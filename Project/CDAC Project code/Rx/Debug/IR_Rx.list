
IR_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006968  08006968  00007968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d1c  08006d1c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d1c  08006d1c  00007d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d24  08006d24  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d24  08006d24  00007d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006d2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009804  00000000  00000000  000081fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000195d  00000000  00000000  00011a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  00013360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000652  00000000  00000000  00013bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021383  00000000  00000000  0001420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f8a  00000000  00000000  0003558d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c703b  00000000  00000000  0003e517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105552  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000338c  00000000  00000000  00105598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00108924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006950 	.word	0x08006950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006950 	.word	0x08006950

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000dd8:	f000 b988 	b.w	80010ec <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fe:	2201      	movs	r2, #1
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <__io_putchar+0x20>)
 8001102:	f002 f9c3 	bl	800348c <HAL_UART_Transmit>
    return ch;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000218 	.word	0x20000218

08001114 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af04      	add	r7, sp, #16
 800111c:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001120:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fe81 	bl	8001e2c <HAL_CAN_GetRxMessage>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        Error_Handler();
 8001130:	f000 f9d4 	bl	80014dc <Error_Handler>
    }


        received_temperature = RxData[0];
 8001134:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdeb 	bl	8000d14 <__aeabi_ui2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a26      	ldr	r2, [pc, #152]	@ (80011dc <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001142:	6013      	str	r3, [r2, #0]
        received_level= RxData[1];
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fde3 	bl	8000d14 <__aeabi_ui2f>
 800114e:	4603      	mov	r3, r0
 8001150:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001152:	6013      	str	r3, [r2, #0]
        speed_kmh = RxData[2] << 8| RxData[3];
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800115c:	78d2      	ldrb	r2, [r2, #3]
 800115e:	4313      	orrs	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fddb 	bl	8000d1c <__aeabi_i2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800116a:	6013      	str	r3, [r2, #0]



        sprintf(uart_msg, "%.2f,%.2f,%.2f\n", received_temperature,speed_kmh, received_level) ;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9e9 	bl	8000548 <__aeabi_f2d>
 8001176:	4680      	mov	r8, r0
 8001178:	4689      	mov	r9, r1
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9e2 	bl	8000548 <__aeabi_f2d>
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800119a:	e9cd 4500 	strd	r4, r5, [sp]
 800119e:	4642      	mov	r2, r8
 80011a0:	464b      	mov	r3, r9
 80011a2:	4911      	ldr	r1, [pc, #68]	@ (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011a6:	f003 faa9 	bl	80046fc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80011aa:	4810      	ldr	r0, [pc, #64]	@ (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011ac:	f7ff f860 	bl	8000270 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80011bc:	f002 f966 	bl	800348c <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80011c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80011c6:	f001 fc5b 	bl	8002a80 <HAL_GPIO_TogglePin>


}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d4:	2000027c 	.word	0x2000027c
 80011d8:	20000260 	.word	0x20000260
 80011dc:	20000284 	.word	0x20000284
 80011e0:	20000288 	.word	0x20000288
 80011e4:	2000028c 	.word	0x2000028c
 80011e8:	08006968 	.word	0x08006968
 80011ec:	20000290 	.word	0x20000290
 80011f0:	20000218 	.word	0x20000218
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fb68 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f824 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 f90a 	bl	800141c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001208:	f000 f88a 	bl	8001320 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800120c:	f000 f8dc 	bl	80013c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start CAN */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <main+0x4c>)
 8001212:	f000 fdc7 	bl	8001da4 <HAL_CAN_Start>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <main+0x28>
      Error_Handler();
 800121c:	f000 f95e 	bl	80014dc <Error_Handler>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001220:	2102      	movs	r1, #2
 8001222:	4808      	ldr	r0, [pc, #32]	@ (8001244 <main+0x4c>)
 8001224:	f000 ff23 	bl	800206e <HAL_CAN_ActivateNotification>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <main+0x3a>
      Error_Handler();
 800122e:	f000 f955 	bl	80014dc <Error_Handler>

    printf("CAN Receiver Ready...\r\n");
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <main+0x50>)
 8001234:	f003 fa5a 	bl	80046ec <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8001238:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800123c:	f000 fbb6 	bl	80019ac <HAL_Delay>
 8001240:	e7fa      	b.n	8001238 <main+0x40>
 8001242:	bf00      	nop
 8001244:	200001f0 	.word	0x200001f0
 8001248:	08006978 	.word	0x08006978

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fb48 	bl	80048f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <SystemClock_Config+0xcc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <SystemClock_Config+0xcc>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <SystemClock_Config+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a21      	ldr	r2, [pc, #132]	@ (800131c <SystemClock_Config+0xd0>)
 8001296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012c0:	2348      	movs	r3, #72	@ 0x48
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fbef 	bl	8002ab4 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012dc:	f000 f8fe 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fe50 	bl	8002fa4 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130a:	f000 f8e7 	bl	80014dc <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	@ 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001328:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <MX_CAN1_Init+0xa4>)
 800132a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 800132e:	2212      	movs	r2, #18
 8001330:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001340:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001344:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001370:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 8001372:	f000 fb3f 	bl	80019f4 <HAL_CAN_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f8ae 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
   CAN_FilterTypeDef canFilter;
   canFilter.FilterActivation = ENABLE;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
   canFilter.FilterBank = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
   canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
   canFilter.FilterIdHigh = 0x0000;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
   canFilter.FilterIdLow = 0x0000;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
   canFilter.FilterMaskIdHigh = 0x0000; // Filter only 0x321
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
   canFilter.FilterMaskIdLow = 0x0000;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
   canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
   canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]

   if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_CAN1_Init+0xa0>)
 80013aa:	f000 fc1f 	bl	8001bec <HAL_CAN_ConfigFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_CAN1_Init+0x98>
     Error_Handler();
 80013b4:	f000 f892 	bl	80014dc <Error_Handler>

  /* USER CODE END CAN1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001f0 	.word	0x200001f0
 80013c4:	40006400 	.word	0x40006400

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f001 fff4 	bl	80033ec <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 f867 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000218 	.word	0x20000218
 8001418:	40004400 	.word	0x40004400

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a26      	ldr	r2, [pc, #152]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_GPIO_Init+0xb8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <MX_GPIO_Init+0xbc>)
 80014aa:	f001 fad1 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014ae:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0xbc>)
 80014c8:	f001 f928 	bl	800271c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020c00 	.word	0x40020c00

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ea:	4804      	ldr	r0, [pc, #16]	@ (80014fc <Error_Handler+0x20>)
 80014ec:	f001 fab0 	bl	8002a50 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80014f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f4:	f000 fa5a 	bl	80019ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80014f8:	bf00      	nop
 80014fa:	e7f3      	b.n	80014e4 <Error_Handler+0x8>
 80014fc:	40020c00 	.word	0x40020c00

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153e:	2007      	movs	r0, #7
 8001540:	f001 f8aa 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_CAN_MspInit+0x94>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d134      	bne.n	80015dc <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 800157c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001580:	6413      	str	r3, [r2, #64]	@ 0x40
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_CAN_MspInit+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015bc:	2309      	movs	r3, #9
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4809      	ldr	r0, [pc, #36]	@ (80015ec <HAL_CAN_MspInit+0x9c>)
 80015c8:	f001 f8a8 	bl	800271c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2014      	movs	r0, #20
 80015d2:	f001 f86c 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015d6:	2014      	movs	r0, #20
 80015d8:	f001 f885 	bl	80026e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40006400 	.word	0x40006400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12b      	bne.n	800166a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_UART_MspInit+0x88>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165a:	2307      	movs	r3, #7
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	@ (800167c <HAL_UART_MspInit+0x8c>)
 8001666:	f001 f859 	bl	800271c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f950 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <CAN1_RX0_IRQHandler+0x10>)
 80016de:	f000 fceb 	bl	80020b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001f0 	.word	0x200001f0

080016ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_kill>:

int _kill(int pid, int sig)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001704:	f003 f946 	bl	8004994 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	2216      	movs	r2, #22
 800170c:	601a      	str	r2, [r3, #0]
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_exit>:

void _exit (int status)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001722:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffe7 	bl	80016fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <_exit+0x12>

08001730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
  }

  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcb3 	bl	80010f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
  }
  return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017c8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f003 f8ae 	bl	8004994 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20020000 	.word	0x20020000
 8001864:	00000400 	.word	0x00000400
 8001868:	200002c4 	.word	0x200002c4
 800186c:	20000418 	.word	0x20000418

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001880:	f7ff fff6 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f003 f879 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fca3 	bl	80011f8 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018c0:	08006d2c 	.word	0x08006d2c
  ldr r2, =_sbss
 80018c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018c8:	20000418 	.word	0x20000418

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fecd 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fdfc 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fee5 	bl	8002702 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001950:	f000 fead 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000
 800196c:	20000008 	.word	0x20000008
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000008 	.word	0x20000008
 8001994:	200002c8 	.word	0x200002c8

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	200002c8 	.word	0x200002c8

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fff0 	bl	8001998 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffe0 	bl	8001998 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0ed      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fd9c 	bl	8001550 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff ffb6 	bl	8001998 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2e:	e012      	b.n	8001a56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a30:	f7ff ffb2 	bl	8001998 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90b      	bls.n	8001a56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0c5      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0e5      	beq.n	8001a30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0202 	bic.w	r2, r2, #2
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a74:	f7ff ff90 	bl	8001998 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7a:	e012      	b.n	8001aa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7c:	f7ff ff8c 	bl	8001998 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b0a      	cmp	r3, #10
 8001a88:	d90b      	bls.n	8001aa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e09f      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e5      	bne.n	8001a7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7e5b      	ldrb	r3, [r3, #25]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e9b      	ldrb	r3, [r3, #26]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d108      	bne.n	8001b1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0220 	bic.w	r2, r2, #32
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7edb      	ldrb	r3, [r3, #27]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0210 	bic.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0210 	orr.w	r2, r2, #16
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0208 	bic.w	r2, r2, #8
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7f5b      	ldrb	r3, [r3, #29]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0204 	orr.w	r2, r2, #4
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e007      	b.n	8001bac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d003      	beq.n	8001c0c <HAL_CAN_ConfigFilter+0x20>
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	f040 80be 	bne.w	8001d88 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c0c:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <HAL_CAN_ConfigFilter+0x1b4>)
 8001c0e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c26:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d123      	bne.n	8001cb6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	3248      	adds	r2, #72	@ 0x48
 8001c96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001caa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	3348      	adds	r3, #72	@ 0x48
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d122      	bne.n	8001d04 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cde:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	3248      	adds	r2, #72	@ 0x48
 8001ce4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cfa:	6939      	ldr	r1, [r7, #16]
 8001cfc:	3348      	adds	r3, #72	@ 0x48
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d1e:	e007      	b.n	8001d30 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d4a:	e007      	b.n	8001d5c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d7a:	f023 0201 	bic.w	r2, r3, #1
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e006      	b.n	8001d96 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40006400 	.word	0x40006400

08001da4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d12e      	bne.n	8001e16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fde2 	bl	8001998 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd6:	e012      	b.n	8001dfe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd8:	f7ff fdde 	bl	8001998 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d90b      	bls.n	8001dfe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2205      	movs	r2, #5
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e012      	b.n	8001e24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e5      	bne.n	8001dd8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_GetRxMessage+0x24>
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	f040 8103 	bne.w	8002056 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10e      	bne.n	8001e74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d116      	bne.n	8001e92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0f7      	b.n	8002064 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0e8      	b.n	8002064 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	331b      	adds	r3, #27
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0204 	and.w	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10c      	bne.n	8001eca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	331b      	adds	r3, #27
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0d5b      	lsrs	r3, r3, #21
 8001ec0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	331b      	adds	r3, #27
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	331b      	adds	r3, #27
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0202 	and.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	331b      	adds	r3, #27
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2208      	movs	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	e00b      	b.n	8001f30 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	331b      	adds	r3, #27
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	331b      	adds	r3, #27
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	331b      	adds	r3, #27
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0a1a      	lsrs	r2, r3, #8
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0c1a      	lsrs	r2, r3, #16
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e1a      	lsrs	r2, r3, #24
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0a1a      	lsrs	r2, r3, #8
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3305      	adds	r3, #5
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0c1a      	lsrs	r2, r3, #16
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3306      	adds	r3, #6
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e1a      	lsrs	r2, r3, #24
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3307      	adds	r3, #7
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	e007      	b.n	8002052 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e006      	b.n	8002064 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d002      	beq.n	800208c <HAL_CAN_ActivateNotification+0x1e>
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d109      	bne.n	80020a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6959      	ldr	r1, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e006      	b.n	80020ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d07c      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d023      	beq.n	8002150 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f983 	bl	8002426 <HAL_CAN_TxMailbox0CompleteCallback>
 8002120:	e016      	b.n	8002150 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
 8002134:	e00c      	b.n	8002150 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
 8002148:	e002      	b.n	8002150 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f986 	bl	800245c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d024      	beq.n	80021a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002162:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f962 	bl	8002438 <HAL_CAN_TxMailbox1CompleteCallback>
 8002174:	e016      	b.n	80021a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
 8002188:	e00c      	b.n	80021a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
 800219c:	e002      	b.n	80021a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f965 	bl	800246e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d024      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f941 	bl	800244a <HAL_CAN_TxMailbox2CompleteCallback>
 80021c8:	e016      	b.n	80021f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
 80021dc:	e00c      	b.n	80021f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f0:	e002      	b.n	80021f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f944 	bl	8002480 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2210      	movs	r2, #16
 800221a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f92a 	bl	8002492 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe ff5c 	bl	8001114 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2208      	movs	r2, #8
 800229a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f90a 	bl	80024b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8f2 	bl	80024a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2210      	movs	r2, #16
 80022da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f8f3 	bl	80024c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2208      	movs	r2, #8
 80022fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8eb 	bl	80024da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d07b      	beq.n	8002406 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d072      	beq.n	80023fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	2b00      	cmp	r3, #0
 8002374:	d043      	beq.n	80023fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d03e      	beq.n	80023fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002386:	2b60      	cmp	r3, #96	@ 0x60
 8002388:	d02b      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x32a>
 800238a:	2b60      	cmp	r3, #96	@ 0x60
 800238c:	d82e      	bhi.n	80023ec <HAL_CAN_IRQHandler+0x334>
 800238e:	2b50      	cmp	r3, #80	@ 0x50
 8002390:	d022      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x320>
 8002392:	2b50      	cmp	r3, #80	@ 0x50
 8002394:	d82a      	bhi.n	80023ec <HAL_CAN_IRQHandler+0x334>
 8002396:	2b40      	cmp	r3, #64	@ 0x40
 8002398:	d019      	beq.n	80023ce <HAL_CAN_IRQHandler+0x316>
 800239a:	2b40      	cmp	r3, #64	@ 0x40
 800239c:	d826      	bhi.n	80023ec <HAL_CAN_IRQHandler+0x334>
 800239e:	2b30      	cmp	r3, #48	@ 0x30
 80023a0:	d010      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x30c>
 80023a2:	2b30      	cmp	r3, #48	@ 0x30
 80023a4:	d822      	bhi.n	80023ec <HAL_CAN_IRQHandler+0x334>
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d002      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x2f8>
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d005      	beq.n	80023ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023ae:	e01d      	b.n	80023ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b8:	e019      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	f043 0310 	orr.w	r3, r3, #16
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c2:	e014      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023cc:	e00f      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023d6:	e00a      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023e0:	e005      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ea:	e000      	b.n	80023ee <HAL_CAN_IRQHandler+0x336>
            break;
 80023ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f867 	bl	80024ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4906      	ldr	r1, [pc, #24]	@ (8002598 <__NVIC_EnableIRQ+0x34>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002678:	f7ff ff90 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff2d 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff42 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff90 	bl	80025f0 <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff5f 	bl	800259c <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff35 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffa2 	bl	8002654 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e16b      	b.n	8002a10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 815a 	bne.w	8002a0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	2b02      	cmp	r3, #2
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d017      	beq.n	800280c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b4 	beq.w	8002a0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a24 <HAL_GPIO_Init+0x308>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002a24 <HAL_GPIO_Init+0x308>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a24 <HAL_GPIO_Init+0x308>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028be:	4a5a      	ldr	r2, [pc, #360]	@ (8002a28 <HAL_GPIO_Init+0x30c>)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a51      	ldr	r2, [pc, #324]	@ (8002a2c <HAL_GPIO_Init+0x310>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02b      	beq.n	8002942 <HAL_GPIO_Init+0x226>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a50      	ldr	r2, [pc, #320]	@ (8002a30 <HAL_GPIO_Init+0x314>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d025      	beq.n	800293e <HAL_GPIO_Init+0x222>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a34 <HAL_GPIO_Init+0x318>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01f      	beq.n	800293a <HAL_GPIO_Init+0x21e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a38 <HAL_GPIO_Init+0x31c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0x21a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4d      	ldr	r2, [pc, #308]	@ (8002a3c <HAL_GPIO_Init+0x320>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x216>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a40 <HAL_GPIO_Init+0x324>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00d      	beq.n	800292e <HAL_GPIO_Init+0x212>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4b      	ldr	r2, [pc, #300]	@ (8002a44 <HAL_GPIO_Init+0x328>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_GPIO_Init+0x32c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_GPIO_Init+0x20a>
 8002922:	2307      	movs	r3, #7
 8002924:	e00e      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002926:	2308      	movs	r3, #8
 8002928:	e00c      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800292a:	2306      	movs	r3, #6
 800292c:	e00a      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800292e:	2305      	movs	r3, #5
 8002930:	e008      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002932:	2304      	movs	r3, #4
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002936:	2303      	movs	r3, #3
 8002938:	e004      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800293a:	2302      	movs	r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002942:	2300      	movs	r3, #0
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f002 0203 	and.w	r2, r2, #3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002954:	4934      	ldr	r1, [pc, #208]	@ (8002a28 <HAL_GPIO_Init+0x30c>)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b3a      	ldr	r3, [pc, #232]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002986:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b0:	4a26      	ldr	r2, [pc, #152]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b6:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029da:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a04:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_GPIO_Init+0x330>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f ae90 	bls.w	8002738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	@ 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43d9      	mvns	r1, r3
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e267      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d075      	beq.n	8002bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ad2:	4b88      	ldr	r3, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d00c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ade:	4b85      	ldr	r3, [pc, #532]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d112      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4b82      	ldr	r3, [pc, #520]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d05b      	beq.n	8002bbc <HAL_RCC_OscConfig+0x108>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d157      	bne.n	8002bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e242      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x74>
 8002b1a:	4b76      	ldr	r3, [pc, #472]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e01d      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x98>
 8002b32:	4b70      	ldr	r3, [pc, #448]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6c      	ldr	r2, [pc, #432]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	4b69      	ldr	r3, [pc, #420]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a68      	ldr	r2, [pc, #416]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ff14 	bl	8001998 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe ff10 	bl	8001998 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	@ 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e207      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0xc0>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe ff00 	bl	8001998 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fefc 	bl	8001998 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	@ 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1f3      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	4b51      	ldr	r3, [pc, #324]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0xe8>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d063      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bca:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b44      	ldr	r3, [pc, #272]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x152>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1c7      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4937      	ldr	r1, [pc, #220]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	e03a      	b.n	8002c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_RCC_OscConfig+0x244>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe feb5 	bl	8001998 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe feb1 	bl	8001998 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e1a8      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4925      	ldr	r1, [pc, #148]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c66:	4b24      	ldr	r3, [pc, #144]	@ (8002cf8 <HAL_RCC_OscConfig+0x244>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fe94 	bl	8001998 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7fe fe90 	bl	8001998 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e187      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d036      	beq.n	8002d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <HAL_RCC_OscConfig+0x248>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fe74 	bl	8001998 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fe70 	bl	8001998 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e167      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x200>
 8002cd2:	e01b      	b.n	8002d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_OscConfig+0x248>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fe5d 	bl	8001998 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	e00e      	b.n	8002d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fe59 	bl	8001998 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d907      	bls.n	8002d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e150      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	42470000 	.word	0x42470000
 8002cfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ea      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8097 	beq.w	8002e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	4b81      	ldr	r3, [pc, #516]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a7c      	ldr	r2, [pc, #496]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b77      	ldr	r3, [pc, #476]	@ (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b74      	ldr	r3, [pc, #464]	@ (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a73      	ldr	r2, [pc, #460]	@ (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fe19 	bl	8001998 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fe fe15 	bl	8001998 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e10c      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f28 <HAL_RCC_OscConfig+0x474>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2ea>
 8002d90:	4b64      	ldr	r3, [pc, #400]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a63      	ldr	r2, [pc, #396]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x324>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x30c>
 8002da6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a5e      	ldr	r2, [pc, #376]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x324>
 8002dc0:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dcc:	4b55      	ldr	r3, [pc, #340]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	4a54      	ldr	r2, [pc, #336]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 0304 	bic.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fdda 	bl	8001998 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe fdd6 	bl	8001998 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0cb      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4b49      	ldr	r3, [pc, #292]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ee      	beq.n	8002de8 <HAL_RCC_OscConfig+0x334>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fdc4 	bl	8001998 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fe fdc0 	bl	8001998 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0b5      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ee      	bne.n	8002e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b39      	ldr	r3, [pc, #228]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	4a38      	ldr	r2, [pc, #224]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a1 	beq.w	8002f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e52:	4b34      	ldr	r3, [pc, #208]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d05c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d141      	bne.n	8002eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fd94 	bl	8001998 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe fd90 	bl	8001998 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e087      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	491b      	ldr	r1, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fd69 	bl	8001998 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fd65 	bl	8001998 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e05c      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x416>
 8002ee8:	e054      	b.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_RCC_OscConfig+0x478>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fd52 	bl	8001998 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fd4e 	bl	8001998 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e045      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x444>
 8002f16:	e03d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e038      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x4ec>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d028      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d121      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d11a      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d111      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800

08002fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0cc      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b68      	ldr	r3, [pc, #416]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d90c      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b65      	ldr	r3, [pc, #404]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b63      	ldr	r3, [pc, #396]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0b8      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	4b59      	ldr	r3, [pc, #356]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003010:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a52      	ldr	r2, [pc, #328]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800301a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b50      	ldr	r3, [pc, #320]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	494d      	ldr	r1, [pc, #308]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d044      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d119      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	2b03      	cmp	r3, #3
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e067      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4934      	ldr	r1, [pc, #208]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003094:	f7fe fc80 	bl	8001998 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309c:	f7fe fc7c 	bl	8001998 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e04f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 020c 	and.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1eb      	bne.n	800309c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c4:	4b25      	ldr	r3, [pc, #148]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d20c      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b22      	ldr	r3, [pc, #136]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e032      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4916      	ldr	r1, [pc, #88]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003116:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	490e      	ldr	r1, [pc, #56]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312a:	f000 f821 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800312e:	4602      	mov	r2, r0
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	490a      	ldr	r1, [pc, #40]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	5ccb      	ldrb	r3, [r1, r3]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a09      	ldr	r2, [pc, #36]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fbe2 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00
 8003160:	40023800 	.word	0x40023800
 8003164:	08006990 	.word	0x08006990
 8003168:	20000000 	.word	0x20000000
 800316c:	20000004 	.word	0x20000004

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b094      	sub	sp, #80	@ 0x50
 8003176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003188:	4b7c      	ldr	r3, [pc, #496]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d00d      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003194:	2b08      	cmp	r3, #8
 8003196:	f200 80e7 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1f8>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x34>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x3a>
 80031a2:	e0e1      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b76      	ldr	r3, [pc, #472]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x210>)
 80031a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a8:	e0e1      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x214>)
 80031ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ae:	e0de      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b72      	ldr	r3, [pc, #456]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d065      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	2200      	movs	r2, #0
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4621      	mov	r1, r4
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	6139      	str	r1, [r7, #16]
 8003200:	4629      	mov	r1, r5
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003214:	4659      	mov	r1, fp
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4651      	mov	r1, sl
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	46d4      	mov	ip, sl
 8003224:	ebb2 080c 	subs.w	r8, r2, ip
 8003228:	4659      	mov	r1, fp
 800322a:	eb63 0901 	sbc.w	r9, r3, r1
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	4690      	mov	r8, r2
 8003244:	4699      	mov	r9, r3
 8003246:	4623      	mov	r3, r4
 8003248:	eb18 0303 	adds.w	r3, r8, r3
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	462b      	mov	r3, r5
 8003250:	eb49 0303 	adc.w	r3, r9, r3
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003262:	4629      	mov	r1, r5
 8003264:	024b      	lsls	r3, r1, #9
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	4604      	mov	r4, r0
 800326c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003270:	4601      	mov	r1, r0
 8003272:	024a      	lsls	r2, r1, #9
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003284:	f7fd fd9e 	bl	8000dc4 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003290:	e05c      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	2200      	movs	r2, #0
 800329a:	4618      	mov	r0, r3
 800329c:	4611      	mov	r1, r2
 800329e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ac:	4642      	mov	r2, r8
 80032ae:	464b      	mov	r3, r9
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	0159      	lsls	r1, r3, #5
 80032ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032be:	0150      	lsls	r0, r2, #5
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	46c4      	mov	ip, r8
 80032c6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80032ca:	4640      	mov	r0, r8
 80032cc:	4649      	mov	r1, r9
 80032ce:	468c      	mov	ip, r1
 80032d0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032e8:	ebb2 040a 	subs.w	r4, r2, sl
 80032ec:	eb63 050b 	sbc.w	r5, r3, fp
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	00eb      	lsls	r3, r5, #3
 80032fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fe:	00e2      	lsls	r2, r4, #3
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	4603      	mov	r3, r0
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	460b      	mov	r3, r1
 800330c:	eb45 0303 	adc.w	r3, r5, r3
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800331e:	4629      	mov	r1, r5
 8003320:	028b      	lsls	r3, r1, #10
 8003322:	4620      	mov	r0, r4
 8003324:	4629      	mov	r1, r5
 8003326:	4604      	mov	r4, r0
 8003328:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800332c:	4601      	mov	r1, r0
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fd fd40 	bl	8000dc4 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_GetSysClockFreq+0x20c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800335c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x210>)
 800336a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	@ 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b02      	ldr	r3, [pc, #8]	@ (8003398 <HAL_RCC_GetHCLKFreq+0x10>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000000 	.word	0x20000000

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a0:	f7ff fff2 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	080069a0 	.word	0x080069a0

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c8:	f7ff ffde 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	080069a0 	.word	0x080069a0

080033ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e042      	b.n	8003484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe f8ec 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f971 	bl	8003718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d175      	bne.n	8003598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Transmit+0x2c>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e06e      	b.n	800359a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	@ 0x21
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ca:	f7fe fa65 	bl	8001998 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e4:	d108      	bne.n	80034f8 <HAL_UART_Transmit+0x6c>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003500:	e02e      	b.n	8003560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2180      	movs	r1, #128	@ 0x80
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f848 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e03a      	b.n	800359a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	3302      	adds	r3, #2
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	e007      	b.n	8003552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1cb      	bne.n	8003502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2140      	movs	r1, #64	@ 0x40
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f814 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	e03b      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ba:	d037      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe f9ec 	bl	8001998 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e03a      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b80      	cmp	r3, #128	@ 0x80
 80035e8:	d020      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b40      	cmp	r3, #64	@ 0x40
 80035ee:	d01d      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d116      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f81d 	bl	8003654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2208      	movs	r2, #8
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d0b4      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b095      	sub	sp, #84	@ 0x54
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800367c:	643a      	str	r2, [r7, #64]	@ 0x40
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d119      	bne.n	8003700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60bb      	str	r3, [r7, #8]
   return(result);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ec:	61ba      	str	r2, [r7, #24]
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	613b      	str	r3, [r7, #16]
   return(result);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800370e:	bf00      	nop
 8003710:	3754      	adds	r7, #84	@ 0x54
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800371c:	b0c0      	sub	sp, #256	@ 0x100
 800371e:	af00      	add	r7, sp, #0
 8003720:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	68d9      	ldr	r1, [r3, #12]
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	ea40 0301 	orr.w	r3, r0, r1
 8003740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	431a      	orrs	r2, r3
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	431a      	orrs	r2, r3
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003770:	f021 010c 	bic.w	r1, r1, #12
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800377e:	430b      	orrs	r3, r1
 8003780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	6999      	ldr	r1, [r3, #24]
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	ea40 0301 	orr.w	r3, r0, r1
 800379e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b91      	ldr	r3, [pc, #580]	@ (80039ec <UART_SetConfig+0x2d4>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d005      	beq.n	80037b8 <UART_SetConfig+0xa0>
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b8f      	ldr	r3, [pc, #572]	@ (80039f0 <UART_SetConfig+0x2d8>)
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d104      	bne.n	80037c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037b8:	f7ff fe04 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 80037bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037c0:	e003      	b.n	80037ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037c2:	f7ff fdeb 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 80037c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d4:	f040 8110 	bne.w	80039f8 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037dc:	2200      	movs	r2, #0
 80037de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037ea:	4622      	mov	r2, r4
 80037ec:	462b      	mov	r3, r5
 80037ee:	1891      	adds	r1, r2, r2
 80037f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037f2:	415b      	adcs	r3, r3
 80037f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037fa:	4620      	mov	r0, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	4604      	mov	r4, r0
 8003800:	eb12 0804 	adds.w	r8, r2, r4
 8003804:	460c      	mov	r4, r1
 8003806:	eb43 0904 	adc.w	r9, r3, r4
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4603      	mov	r3, r0
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800382c:	460b      	mov	r3, r1
 800382e:	eb49 0303 	adc.w	r3, r9, r3
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800384a:	460b      	mov	r3, r1
 800384c:	18db      	adds	r3, r3, r3
 800384e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003850:	4613      	mov	r3, r2
 8003852:	eb42 0303 	adc.w	r3, r2, r3
 8003856:	657b      	str	r3, [r7, #84]	@ 0x54
 8003858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800385c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003860:	f7fd fab0 	bl	8000dc4 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b62      	ldr	r3, [pc, #392]	@ (80039f4 <UART_SetConfig+0x2dc>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011c      	lsls	r4, r3, #4
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800387c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800388c:	415b      	adcs	r3, r3
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003894:	4645      	mov	r5, r8
 8003896:	eb12 0a05 	adds.w	sl, r2, r5
 800389a:	4640      	mov	r0, r8
 800389c:	4649      	mov	r1, r9
 800389e:	460d      	mov	r5, r1
 80038a0:	eb43 0b05 	adc.w	fp, r3, r5
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	4692      	mov	sl, r2
 80038ba:	469b      	mov	fp, r3
 80038bc:	4603      	mov	r3, r0
 80038be:	eb1a 0303 	adds.w	r3, sl, r3
 80038c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038c6:	460b      	mov	r3, r1
 80038c8:	eb4b 0303 	adc.w	r3, fp, r3
 80038cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038fa:	f7fd fa63 	bl	8000dc4 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4611      	mov	r1, r2
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <UART_SetConfig+0x2dc>)
 8003906:	fba3 2301 	umull	r2, r3, r3, r1
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2264      	movs	r2, #100	@ 0x64
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <UART_SetConfig+0x2dc>)
 800391c:	fba3 2302 	umull	r2, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003928:	441c      	add	r4, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003934:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003944:	415b      	adcs	r3, r3
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6339      	str	r1, [r7, #48]	@ 0x30
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4655      	mov	r5, sl
 800396a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003998:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800399c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a0:	460b      	mov	r3, r1
 80039a2:	18db      	adds	r3, r3, r3
 80039a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039b6:	f7fd fa05 	bl	8000dc4 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <UART_SetConfig+0x2dc>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	@ 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3332      	adds	r3, #50	@ 0x32
 80039d2:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <UART_SetConfig+0x2dc>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 0207 	and.w	r2, r3, #7
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4422      	add	r2, r4
 80039e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e8:	e10a      	b.n	8003c00 <UART_SetConfig+0x4e8>
 80039ea:	bf00      	nop
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40011400 	.word	0x40011400
 80039f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	6239      	str	r1, [r7, #32]
 8003a12:	415b      	adcs	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	1854      	adds	r4, r2, r1
 8003a1e:	46cc      	mov	ip, r9
 8003a20:	eb43 050c 	adc.w	r5, r3, ip
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	00eb      	lsls	r3, r5, #3
 8003a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a32:	00e2      	lsls	r2, r4, #3
 8003a34:	4614      	mov	r4, r2
 8003a36:	461d      	mov	r5, r3
 8003a38:	4640      	mov	r0, r8
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	18e3      	adds	r3, r4, r3
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a44:	460b      	mov	r3, r1
 8003a46:	eb45 0303 	adc.w	r3, r5, r3
 8003a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	008b      	lsls	r3, r1, #2
 8003a6e:	4620      	mov	r0, r4
 8003a70:	4629      	mov	r1, r5
 8003a72:	4604      	mov	r4, r0
 8003a74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a78:	4601      	mov	r1, r0
 8003a7a:	008a      	lsls	r2, r1, #2
 8003a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a80:	f7fd f9a0 	bl	8000dc4 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4b60      	ldr	r3, [pc, #384]	@ (8003c0c <UART_SetConfig+0x4f4>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	011c      	lsls	r4, r3, #4
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	61b9      	str	r1, [r7, #24]
 8003aac:	415b      	adcs	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6139      	str	r1, [r7, #16]
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4655      	mov	r5, sl
 8003ad2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4645      	mov	r5, r8
 8003b12:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b1e:	f7fd f951 	bl	8000dc4 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <UART_SetConfig+0x4f4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	@ 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	@ 0x32
 8003b3c:	4a33      	ldr	r2, [pc, #204]	@ (8003c0c <UART_SetConfig+0x4f4>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b48:	441c      	add	r4, r3
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b52:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	1891      	adds	r1, r2, r2
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	415b      	adcs	r3, r3
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b68:	4641      	mov	r1, r8
 8003b6a:	1851      	adds	r1, r2, r1
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	4649      	mov	r1, r9
 8003b70:	414b      	adcs	r3, r1
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b80:	4659      	mov	r1, fp
 8003b82:	00cb      	lsls	r3, r1, #3
 8003b84:	4655      	mov	r5, sl
 8003b86:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	00ca      	lsls	r2, r1, #3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	4642      	mov	r2, r8
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bae:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	008b      	lsls	r3, r1, #2
 8003bc0:	4645      	mov	r5, r8
 8003bc2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	008a      	lsls	r2, r1, #2
 8003bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bce:	f7fd f8f9 	bl	8000dc4 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <UART_SetConfig+0x4f4>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	@ 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	3332      	adds	r3, #50	@ 0x32
 8003bea:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <UART_SetConfig+0x4f4>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4422      	add	r2, r4
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <__cvt>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	b088      	sub	sp, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	461d      	mov	r5, r3
 8003c1a:	4614      	mov	r4, r2
 8003c1c:	bfbc      	itt	lt
 8003c1e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003c22:	4614      	movlt	r4, r2
 8003c24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003c28:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003c2c:	bfb6      	itet	lt
 8003c2e:	461d      	movlt	r5, r3
 8003c30:	2300      	movge	r3, #0
 8003c32:	232d      	movlt	r3, #45	@ 0x2d
 8003c34:	7013      	strb	r3, [r2, #0]
 8003c36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c38:	f023 0820 	bic.w	r8, r3, #32
 8003c3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c40:	d005      	beq.n	8003c4e <__cvt+0x3e>
 8003c42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c46:	d100      	bne.n	8003c4a <__cvt+0x3a>
 8003c48:	3601      	adds	r6, #1
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e000      	b.n	8003c50 <__cvt+0x40>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	aa07      	add	r2, sp, #28
 8003c52:	9204      	str	r2, [sp, #16]
 8003c54:	aa06      	add	r2, sp, #24
 8003c56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c5a:	e9cd 3600 	strd	r3, r6, [sp]
 8003c5e:	4622      	mov	r2, r4
 8003c60:	462b      	mov	r3, r5
 8003c62:	f000 ff4d 	bl	8004b00 <_dtoa_r>
 8003c66:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	d119      	bne.n	8003ca2 <__cvt+0x92>
 8003c6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003c70:	07db      	lsls	r3, r3, #31
 8003c72:	d50e      	bpl.n	8003c92 <__cvt+0x82>
 8003c74:	eb00 0906 	add.w	r9, r0, r6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c84:	b108      	cbz	r0, 8003c8a <__cvt+0x7a>
 8003c86:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c8a:	2230      	movs	r2, #48	@ 0x30
 8003c8c:	9b07      	ldr	r3, [sp, #28]
 8003c8e:	454b      	cmp	r3, r9
 8003c90:	d31e      	bcc.n	8003cd0 <__cvt+0xc0>
 8003c92:	9b07      	ldr	r3, [sp, #28]
 8003c94:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c96:	1bdb      	subs	r3, r3, r7
 8003c98:	4638      	mov	r0, r7
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	b008      	add	sp, #32
 8003c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ca6:	eb00 0906 	add.w	r9, r0, r6
 8003caa:	d1e5      	bne.n	8003c78 <__cvt+0x68>
 8003cac:	7803      	ldrb	r3, [r0, #0]
 8003cae:	2b30      	cmp	r3, #48	@ 0x30
 8003cb0:	d10a      	bne.n	8003cc8 <__cvt+0xb8>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cbe:	b918      	cbnz	r0, 8003cc8 <__cvt+0xb8>
 8003cc0:	f1c6 0601 	rsb	r6, r6, #1
 8003cc4:	f8ca 6000 	str.w	r6, [sl]
 8003cc8:	f8da 3000 	ldr.w	r3, [sl]
 8003ccc:	4499      	add	r9, r3
 8003cce:	e7d3      	b.n	8003c78 <__cvt+0x68>
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	9107      	str	r1, [sp, #28]
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e7d9      	b.n	8003c8c <__cvt+0x7c>

08003cd8 <__exponent>:
 8003cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	bfba      	itte	lt
 8003cde:	4249      	neglt	r1, r1
 8003ce0:	232d      	movlt	r3, #45	@ 0x2d
 8003ce2:	232b      	movge	r3, #43	@ 0x2b
 8003ce4:	2909      	cmp	r1, #9
 8003ce6:	7002      	strb	r2, [r0, #0]
 8003ce8:	7043      	strb	r3, [r0, #1]
 8003cea:	dd29      	ble.n	8003d40 <__exponent+0x68>
 8003cec:	f10d 0307 	add.w	r3, sp, #7
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	270a      	movs	r7, #10
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cfa:	fb07 1416 	mls	r4, r7, r6, r1
 8003cfe:	3430      	adds	r4, #48	@ 0x30
 8003d00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d04:	460c      	mov	r4, r1
 8003d06:	2c63      	cmp	r4, #99	@ 0x63
 8003d08:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	dcf1      	bgt.n	8003cf4 <__exponent+0x1c>
 8003d10:	3130      	adds	r1, #48	@ 0x30
 8003d12:	1e94      	subs	r4, r2, #2
 8003d14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d18:	1c41      	adds	r1, r0, #1
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	42ab      	cmp	r3, r5
 8003d1e:	d30a      	bcc.n	8003d36 <__exponent+0x5e>
 8003d20:	f10d 0309 	add.w	r3, sp, #9
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	42ac      	cmp	r4, r5
 8003d28:	bf88      	it	hi
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	4403      	add	r3, r0
 8003d30:	1a18      	subs	r0, r3, r0
 8003d32:	b003      	add	sp, #12
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d3e:	e7ed      	b.n	8003d1c <__exponent+0x44>
 8003d40:	2330      	movs	r3, #48	@ 0x30
 8003d42:	3130      	adds	r1, #48	@ 0x30
 8003d44:	7083      	strb	r3, [r0, #2]
 8003d46:	70c1      	strb	r1, [r0, #3]
 8003d48:	1d03      	adds	r3, r0, #4
 8003d4a:	e7f1      	b.n	8003d30 <__exponent+0x58>

08003d4c <_printf_float>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b091      	sub	sp, #68	@ 0x44
 8003d52:	460c      	mov	r4, r1
 8003d54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003d58:	4616      	mov	r6, r2
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	f000 fdcf 	bl	8004900 <_localeconv_r>
 8003d62:	6803      	ldr	r3, [r0, #0]
 8003d64:	9308      	str	r3, [sp, #32]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fa82 	bl	8000270 <strlen>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d70:	f8d8 3000 	ldr.w	r3, [r8]
 8003d74:	9009      	str	r0, [sp, #36]	@ 0x24
 8003d76:	3307      	adds	r3, #7
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	f103 0208 	add.w	r2, r3, #8
 8003d80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d84:	f8d4 b000 	ldr.w	fp, [r4]
 8003d88:	f8c8 2000 	str.w	r2, [r8]
 8003d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003da2:	4b9d      	ldr	r3, [pc, #628]	@ (8004018 <_printf_float+0x2cc>)
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003da8:	f7fc fec0 	bl	8000b2c <__aeabi_dcmpun>
 8003dac:	bb70      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003db2:	4b99      	ldr	r3, [pc, #612]	@ (8004018 <_printf_float+0x2cc>)
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003db8:	f7fc fe9a 	bl	8000af0 <__aeabi_dcmple>
 8003dbc:	bb30      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fe89 	bl	8000adc <__aeabi_dcmplt>
 8003dca:	b110      	cbz	r0, 8003dd2 <_printf_float+0x86>
 8003dcc:	232d      	movs	r3, #45	@ 0x2d
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd2:	4a92      	ldr	r2, [pc, #584]	@ (800401c <_printf_float+0x2d0>)
 8003dd4:	4b92      	ldr	r3, [pc, #584]	@ (8004020 <_printf_float+0x2d4>)
 8003dd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dda:	bf8c      	ite	hi
 8003ddc:	4690      	movhi	r8, r2
 8003dde:	4698      	movls	r8, r3
 8003de0:	2303      	movs	r3, #3
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	f02b 0304 	bic.w	r3, fp, #4
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	f04f 0900 	mov.w	r9, #0
 8003dee:	9700      	str	r7, [sp, #0]
 8003df0:	4633      	mov	r3, r6
 8003df2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f9d4 	bl	80041a4 <_printf_common>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f040 808f 	bne.w	8003f20 <_printf_float+0x1d4>
 8003e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e06:	b011      	add	sp, #68	@ 0x44
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	4649      	mov	r1, r9
 8003e14:	f7fc fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8003e18:	b140      	cbz	r0, 8003e2c <_printf_float+0xe0>
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfbc      	itt	lt
 8003e20:	232d      	movlt	r3, #45	@ 0x2d
 8003e22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e26:	4a7f      	ldr	r2, [pc, #508]	@ (8004024 <_printf_float+0x2d8>)
 8003e28:	4b7f      	ldr	r3, [pc, #508]	@ (8004028 <_printf_float+0x2dc>)
 8003e2a:	e7d4      	b.n	8003dd6 <_printf_float+0x8a>
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003e34:	d13f      	bne.n	8003eb6 <_printf_float+0x16a>
 8003e36:	2306      	movs	r3, #6
 8003e38:	6063      	str	r3, [r4, #4]
 8003e3a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003e3e:	2200      	movs	r2, #0
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	9206      	str	r2, [sp, #24]
 8003e44:	aa0e      	add	r2, sp, #56	@ 0x38
 8003e46:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003e4a:	aa0d      	add	r2, sp, #52	@ 0x34
 8003e4c:	9203      	str	r2, [sp, #12]
 8003e4e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003e52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	4628      	mov	r0, r5
 8003e60:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e62:	f7ff fed5 	bl	8003c10 <__cvt>
 8003e66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e68:	2947      	cmp	r1, #71	@ 0x47
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e6e:	d128      	bne.n	8003ec2 <_printf_float+0x176>
 8003e70:	1cc8      	adds	r0, r1, #3
 8003e72:	db02      	blt.n	8003e7a <_printf_float+0x12e>
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	4299      	cmp	r1, r3
 8003e78:	dd40      	ble.n	8003efc <_printf_float+0x1b0>
 8003e7a:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e7e:	fa5f fa8a 	uxtb.w	sl, sl
 8003e82:	3901      	subs	r1, #1
 8003e84:	4652      	mov	r2, sl
 8003e86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e8a:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e8c:	f7ff ff24 	bl	8003cd8 <__exponent>
 8003e90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e92:	1813      	adds	r3, r2, r0
 8003e94:	2a01      	cmp	r2, #1
 8003e96:	4681      	mov	r9, r0
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	dc02      	bgt.n	8003ea2 <_printf_float+0x156>
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	07d2      	lsls	r2, r2, #31
 8003ea0:	d501      	bpl.n	8003ea6 <_printf_float+0x15a>
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	6123      	str	r3, [r4, #16]
 8003ea6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d09f      	beq.n	8003dee <_printf_float+0xa2>
 8003eae:	232d      	movs	r3, #45	@ 0x2d
 8003eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb4:	e79b      	b.n	8003dee <_printf_float+0xa2>
 8003eb6:	2947      	cmp	r1, #71	@ 0x47
 8003eb8:	d1bf      	bne.n	8003e3a <_printf_float+0xee>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1bd      	bne.n	8003e3a <_printf_float+0xee>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e7ba      	b.n	8003e38 <_printf_float+0xec>
 8003ec2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ec6:	d9dc      	bls.n	8003e82 <_printf_float+0x136>
 8003ec8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ecc:	d118      	bne.n	8003f00 <_printf_float+0x1b4>
 8003ece:	2900      	cmp	r1, #0
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	dd0b      	ble.n	8003eec <_printf_float+0x1a0>
 8003ed4:	6121      	str	r1, [r4, #16]
 8003ed6:	b913      	cbnz	r3, 8003ede <_printf_float+0x192>
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	07d0      	lsls	r0, r2, #31
 8003edc:	d502      	bpl.n	8003ee4 <_printf_float+0x198>
 8003ede:	3301      	adds	r3, #1
 8003ee0:	440b      	add	r3, r1
 8003ee2:	6123      	str	r3, [r4, #16]
 8003ee4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ee6:	f04f 0900 	mov.w	r9, #0
 8003eea:	e7dc      	b.n	8003ea6 <_printf_float+0x15a>
 8003eec:	b913      	cbnz	r3, 8003ef4 <_printf_float+0x1a8>
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	07d2      	lsls	r2, r2, #31
 8003ef2:	d501      	bpl.n	8003ef8 <_printf_float+0x1ac>
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	e7f4      	b.n	8003ee2 <_printf_float+0x196>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e7f2      	b.n	8003ee2 <_printf_float+0x196>
 8003efc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f02:	4299      	cmp	r1, r3
 8003f04:	db05      	blt.n	8003f12 <_printf_float+0x1c6>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	6121      	str	r1, [r4, #16]
 8003f0a:	07d8      	lsls	r0, r3, #31
 8003f0c:	d5ea      	bpl.n	8003ee4 <_printf_float+0x198>
 8003f0e:	1c4b      	adds	r3, r1, #1
 8003f10:	e7e7      	b.n	8003ee2 <_printf_float+0x196>
 8003f12:	2900      	cmp	r1, #0
 8003f14:	bfd4      	ite	le
 8003f16:	f1c1 0202 	rsble	r2, r1, #2
 8003f1a:	2201      	movgt	r2, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	e7e0      	b.n	8003ee2 <_printf_float+0x196>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	055a      	lsls	r2, r3, #21
 8003f24:	d407      	bmi.n	8003f36 <_printf_float+0x1ea>
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	4642      	mov	r2, r8
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b8      	blx	r7
 8003f30:	3001      	adds	r0, #1
 8003f32:	d12b      	bne.n	8003f8c <_printf_float+0x240>
 8003f34:	e765      	b.n	8003e02 <_printf_float+0xb6>
 8003f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f3a:	f240 80dd 	bls.w	80040f8 <_printf_float+0x3ac>
 8003f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f42:	2200      	movs	r2, #0
 8003f44:	2300      	movs	r3, #0
 8003f46:	f7fc fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d033      	beq.n	8003fb6 <_printf_float+0x26a>
 8003f4e:	4a37      	ldr	r2, [pc, #220]	@ (800402c <_printf_float+0x2e0>)
 8003f50:	2301      	movs	r3, #1
 8003f52:	4631      	mov	r1, r6
 8003f54:	4628      	mov	r0, r5
 8003f56:	47b8      	blx	r7
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f43f af52 	beq.w	8003e02 <_printf_float+0xb6>
 8003f5e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003f62:	4543      	cmp	r3, r8
 8003f64:	db02      	blt.n	8003f6c <_printf_float+0x220>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	07d8      	lsls	r0, r3, #31
 8003f6a:	d50f      	bpl.n	8003f8c <_printf_float+0x240>
 8003f6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f70:	4631      	mov	r1, r6
 8003f72:	4628      	mov	r0, r5
 8003f74:	47b8      	blx	r7
 8003f76:	3001      	adds	r0, #1
 8003f78:	f43f af43 	beq.w	8003e02 <_printf_float+0xb6>
 8003f7c:	f04f 0900 	mov.w	r9, #0
 8003f80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003f84:	f104 0a1a 	add.w	sl, r4, #26
 8003f88:	45c8      	cmp	r8, r9
 8003f8a:	dc09      	bgt.n	8003fa0 <_printf_float+0x254>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	079b      	lsls	r3, r3, #30
 8003f90:	f100 8103 	bmi.w	800419a <_printf_float+0x44e>
 8003f94:	68e0      	ldr	r0, [r4, #12]
 8003f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f98:	4298      	cmp	r0, r3
 8003f9a:	bfb8      	it	lt
 8003f9c:	4618      	movlt	r0, r3
 8003f9e:	e732      	b.n	8003e06 <_printf_float+0xba>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	47b8      	blx	r7
 8003faa:	3001      	adds	r0, #1
 8003fac:	f43f af29 	beq.w	8003e02 <_printf_float+0xb6>
 8003fb0:	f109 0901 	add.w	r9, r9, #1
 8003fb4:	e7e8      	b.n	8003f88 <_printf_float+0x23c>
 8003fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	dc39      	bgt.n	8004030 <_printf_float+0x2e4>
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800402c <_printf_float+0x2e0>)
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f43f af1b 	beq.w	8003e02 <_printf_float+0xb6>
 8003fcc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003fd0:	ea59 0303 	orrs.w	r3, r9, r3
 8003fd4:	d102      	bne.n	8003fdc <_printf_float+0x290>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	07d9      	lsls	r1, r3, #31
 8003fda:	d5d7      	bpl.n	8003f8c <_printf_float+0x240>
 8003fdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f43f af0b 	beq.w	8003e02 <_printf_float+0xb6>
 8003fec:	f04f 0a00 	mov.w	sl, #0
 8003ff0:	f104 0b1a 	add.w	fp, r4, #26
 8003ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ff6:	425b      	negs	r3, r3
 8003ff8:	4553      	cmp	r3, sl
 8003ffa:	dc01      	bgt.n	8004000 <_printf_float+0x2b4>
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	e793      	b.n	8003f28 <_printf_float+0x1dc>
 8004000:	2301      	movs	r3, #1
 8004002:	465a      	mov	r2, fp
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f aef9 	beq.w	8003e02 <_printf_float+0xb6>
 8004010:	f10a 0a01 	add.w	sl, sl, #1
 8004014:	e7ee      	b.n	8003ff4 <_printf_float+0x2a8>
 8004016:	bf00      	nop
 8004018:	7fefffff 	.word	0x7fefffff
 800401c:	080069ac 	.word	0x080069ac
 8004020:	080069a8 	.word	0x080069a8
 8004024:	080069b4 	.word	0x080069b4
 8004028:	080069b0 	.word	0x080069b0
 800402c:	080069b8 	.word	0x080069b8
 8004030:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004032:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004036:	4553      	cmp	r3, sl
 8004038:	bfa8      	it	ge
 800403a:	4653      	movge	r3, sl
 800403c:	2b00      	cmp	r3, #0
 800403e:	4699      	mov	r9, r3
 8004040:	dc36      	bgt.n	80040b0 <_printf_float+0x364>
 8004042:	f04f 0b00 	mov.w	fp, #0
 8004046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800404a:	f104 021a 	add.w	r2, r4, #26
 800404e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004050:	930a      	str	r3, [sp, #40]	@ 0x28
 8004052:	eba3 0309 	sub.w	r3, r3, r9
 8004056:	455b      	cmp	r3, fp
 8004058:	dc31      	bgt.n	80040be <_printf_float+0x372>
 800405a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800405c:	459a      	cmp	sl, r3
 800405e:	dc3a      	bgt.n	80040d6 <_printf_float+0x38a>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	07da      	lsls	r2, r3, #31
 8004064:	d437      	bmi.n	80040d6 <_printf_float+0x38a>
 8004066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004068:	ebaa 0903 	sub.w	r9, sl, r3
 800406c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800406e:	ebaa 0303 	sub.w	r3, sl, r3
 8004072:	4599      	cmp	r9, r3
 8004074:	bfa8      	it	ge
 8004076:	4699      	movge	r9, r3
 8004078:	f1b9 0f00 	cmp.w	r9, #0
 800407c:	dc33      	bgt.n	80040e6 <_printf_float+0x39a>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004086:	f104 0b1a 	add.w	fp, r4, #26
 800408a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800408c:	ebaa 0303 	sub.w	r3, sl, r3
 8004090:	eba3 0309 	sub.w	r3, r3, r9
 8004094:	4543      	cmp	r3, r8
 8004096:	f77f af79 	ble.w	8003f8c <_printf_float+0x240>
 800409a:	2301      	movs	r3, #1
 800409c:	465a      	mov	r2, fp
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f aeac 	beq.w	8003e02 <_printf_float+0xb6>
 80040aa:	f108 0801 	add.w	r8, r8, #1
 80040ae:	e7ec      	b.n	800408a <_printf_float+0x33e>
 80040b0:	4642      	mov	r2, r8
 80040b2:	4631      	mov	r1, r6
 80040b4:	4628      	mov	r0, r5
 80040b6:	47b8      	blx	r7
 80040b8:	3001      	adds	r0, #1
 80040ba:	d1c2      	bne.n	8004042 <_printf_float+0x2f6>
 80040bc:	e6a1      	b.n	8003e02 <_printf_float+0xb6>
 80040be:	2301      	movs	r3, #1
 80040c0:	4631      	mov	r1, r6
 80040c2:	4628      	mov	r0, r5
 80040c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f ae9a 	beq.w	8003e02 <_printf_float+0xb6>
 80040ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040d0:	f10b 0b01 	add.w	fp, fp, #1
 80040d4:	e7bb      	b.n	800404e <_printf_float+0x302>
 80040d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040da:	4631      	mov	r1, r6
 80040dc:	4628      	mov	r0, r5
 80040de:	47b8      	blx	r7
 80040e0:	3001      	adds	r0, #1
 80040e2:	d1c0      	bne.n	8004066 <_printf_float+0x31a>
 80040e4:	e68d      	b.n	8003e02 <_printf_float+0xb6>
 80040e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040e8:	464b      	mov	r3, r9
 80040ea:	4442      	add	r2, r8
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	d1c3      	bne.n	800407e <_printf_float+0x332>
 80040f6:	e684      	b.n	8003e02 <_printf_float+0xb6>
 80040f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040fc:	f1ba 0f01 	cmp.w	sl, #1
 8004100:	dc01      	bgt.n	8004106 <_printf_float+0x3ba>
 8004102:	07db      	lsls	r3, r3, #31
 8004104:	d536      	bpl.n	8004174 <_printf_float+0x428>
 8004106:	2301      	movs	r3, #1
 8004108:	4642      	mov	r2, r8
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f ae76 	beq.w	8003e02 <_printf_float+0xb6>
 8004116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f ae6e 	beq.w	8003e02 <_printf_float+0xb6>
 8004126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800412a:	2200      	movs	r2, #0
 800412c:	2300      	movs	r3, #0
 800412e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004132:	f7fc fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004136:	b9c0      	cbnz	r0, 800416a <_printf_float+0x41e>
 8004138:	4653      	mov	r3, sl
 800413a:	f108 0201 	add.w	r2, r8, #1
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	d10c      	bne.n	8004162 <_printf_float+0x416>
 8004148:	e65b      	b.n	8003e02 <_printf_float+0xb6>
 800414a:	2301      	movs	r3, #1
 800414c:	465a      	mov	r2, fp
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	47b8      	blx	r7
 8004154:	3001      	adds	r0, #1
 8004156:	f43f ae54 	beq.w	8003e02 <_printf_float+0xb6>
 800415a:	f108 0801 	add.w	r8, r8, #1
 800415e:	45d0      	cmp	r8, sl
 8004160:	dbf3      	blt.n	800414a <_printf_float+0x3fe>
 8004162:	464b      	mov	r3, r9
 8004164:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004168:	e6df      	b.n	8003f2a <_printf_float+0x1de>
 800416a:	f04f 0800 	mov.w	r8, #0
 800416e:	f104 0b1a 	add.w	fp, r4, #26
 8004172:	e7f4      	b.n	800415e <_printf_float+0x412>
 8004174:	2301      	movs	r3, #1
 8004176:	4642      	mov	r2, r8
 8004178:	e7e1      	b.n	800413e <_printf_float+0x3f2>
 800417a:	2301      	movs	r3, #1
 800417c:	464a      	mov	r2, r9
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	f43f ae3c 	beq.w	8003e02 <_printf_float+0xb6>
 800418a:	f108 0801 	add.w	r8, r8, #1
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004192:	1a5b      	subs	r3, r3, r1
 8004194:	4543      	cmp	r3, r8
 8004196:	dcf0      	bgt.n	800417a <_printf_float+0x42e>
 8004198:	e6fc      	b.n	8003f94 <_printf_float+0x248>
 800419a:	f04f 0800 	mov.w	r8, #0
 800419e:	f104 0919 	add.w	r9, r4, #25
 80041a2:	e7f4      	b.n	800418e <_printf_float+0x442>

080041a4 <_printf_common>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	4616      	mov	r6, r2
 80041aa:	4698      	mov	r8, r3
 80041ac:	688a      	ldr	r2, [r1, #8]
 80041ae:	690b      	ldr	r3, [r1, #16]
 80041b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bfb8      	it	lt
 80041b8:	4613      	movlt	r3, r2
 80041ba:	6033      	str	r3, [r6, #0]
 80041bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041c0:	4607      	mov	r7, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	b10a      	cbz	r2, 80041ca <_printf_common+0x26>
 80041c6:	3301      	adds	r3, #1
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	0699      	lsls	r1, r3, #26
 80041ce:	bf42      	ittt	mi
 80041d0:	6833      	ldrmi	r3, [r6, #0]
 80041d2:	3302      	addmi	r3, #2
 80041d4:	6033      	strmi	r3, [r6, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	f015 0506 	ands.w	r5, r5, #6
 80041dc:	d106      	bne.n	80041ec <_printf_common+0x48>
 80041de:	f104 0a19 	add.w	sl, r4, #25
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	6832      	ldr	r2, [r6, #0]
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dc26      	bgt.n	800423a <_printf_common+0x96>
 80041ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	3b00      	subs	r3, #0
 80041f4:	bf18      	it	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	0692      	lsls	r2, r2, #26
 80041fa:	d42b      	bmi.n	8004254 <_printf_common+0xb0>
 80041fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004200:	4641      	mov	r1, r8
 8004202:	4638      	mov	r0, r7
 8004204:	47c8      	blx	r9
 8004206:	3001      	adds	r0, #1
 8004208:	d01e      	beq.n	8004248 <_printf_common+0xa4>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	6922      	ldr	r2, [r4, #16]
 800420e:	f003 0306 	and.w	r3, r3, #6
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf02      	ittt	eq
 8004216:	68e5      	ldreq	r5, [r4, #12]
 8004218:	6833      	ldreq	r3, [r6, #0]
 800421a:	1aed      	subeq	r5, r5, r3
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	bf0c      	ite	eq
 8004220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004224:	2500      	movne	r5, #0
 8004226:	4293      	cmp	r3, r2
 8004228:	bfc4      	itt	gt
 800422a:	1a9b      	subgt	r3, r3, r2
 800422c:	18ed      	addgt	r5, r5, r3
 800422e:	2600      	movs	r6, #0
 8004230:	341a      	adds	r4, #26
 8004232:	42b5      	cmp	r5, r6
 8004234:	d11a      	bne.n	800426c <_printf_common+0xc8>
 8004236:	2000      	movs	r0, #0
 8004238:	e008      	b.n	800424c <_printf_common+0xa8>
 800423a:	2301      	movs	r3, #1
 800423c:	4652      	mov	r2, sl
 800423e:	4641      	mov	r1, r8
 8004240:	4638      	mov	r0, r7
 8004242:	47c8      	blx	r9
 8004244:	3001      	adds	r0, #1
 8004246:	d103      	bne.n	8004250 <_printf_common+0xac>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	3501      	adds	r5, #1
 8004252:	e7c6      	b.n	80041e2 <_printf_common+0x3e>
 8004254:	18e1      	adds	r1, r4, r3
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	2030      	movs	r0, #48	@ 0x30
 800425a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800425e:	4422      	add	r2, r4
 8004260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004268:	3302      	adds	r3, #2
 800426a:	e7c7      	b.n	80041fc <_printf_common+0x58>
 800426c:	2301      	movs	r3, #1
 800426e:	4622      	mov	r2, r4
 8004270:	4641      	mov	r1, r8
 8004272:	4638      	mov	r0, r7
 8004274:	47c8      	blx	r9
 8004276:	3001      	adds	r0, #1
 8004278:	d0e6      	beq.n	8004248 <_printf_common+0xa4>
 800427a:	3601      	adds	r6, #1
 800427c:	e7d9      	b.n	8004232 <_printf_common+0x8e>
	...

08004280 <_printf_i>:
 8004280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	7e0f      	ldrb	r7, [r1, #24]
 8004286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004288:	2f78      	cmp	r7, #120	@ 0x78
 800428a:	4691      	mov	r9, r2
 800428c:	4680      	mov	r8, r0
 800428e:	460c      	mov	r4, r1
 8004290:	469a      	mov	sl, r3
 8004292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004296:	d807      	bhi.n	80042a8 <_printf_i+0x28>
 8004298:	2f62      	cmp	r7, #98	@ 0x62
 800429a:	d80a      	bhi.n	80042b2 <_printf_i+0x32>
 800429c:	2f00      	cmp	r7, #0
 800429e:	f000 80d1 	beq.w	8004444 <_printf_i+0x1c4>
 80042a2:	2f58      	cmp	r7, #88	@ 0x58
 80042a4:	f000 80b8 	beq.w	8004418 <_printf_i+0x198>
 80042a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b0:	e03a      	b.n	8004328 <_printf_i+0xa8>
 80042b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042b6:	2b15      	cmp	r3, #21
 80042b8:	d8f6      	bhi.n	80042a8 <_printf_i+0x28>
 80042ba:	a101      	add	r1, pc, #4	@ (adr r1, 80042c0 <_printf_i+0x40>)
 80042bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c0:	08004319 	.word	0x08004319
 80042c4:	0800432d 	.word	0x0800432d
 80042c8:	080042a9 	.word	0x080042a9
 80042cc:	080042a9 	.word	0x080042a9
 80042d0:	080042a9 	.word	0x080042a9
 80042d4:	080042a9 	.word	0x080042a9
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	080042a9 	.word	0x080042a9
 80042e0:	080042a9 	.word	0x080042a9
 80042e4:	080042a9 	.word	0x080042a9
 80042e8:	080042a9 	.word	0x080042a9
 80042ec:	0800442b 	.word	0x0800442b
 80042f0:	08004357 	.word	0x08004357
 80042f4:	080043e5 	.word	0x080043e5
 80042f8:	080042a9 	.word	0x080042a9
 80042fc:	080042a9 	.word	0x080042a9
 8004300:	0800444d 	.word	0x0800444d
 8004304:	080042a9 	.word	0x080042a9
 8004308:	08004357 	.word	0x08004357
 800430c:	080042a9 	.word	0x080042a9
 8004310:	080042a9 	.word	0x080042a9
 8004314:	080043ed 	.word	0x080043ed
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6032      	str	r2, [r6, #0]
 8004320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004328:	2301      	movs	r3, #1
 800432a:	e09c      	b.n	8004466 <_printf_i+0x1e6>
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	6031      	str	r1, [r6, #0]
 8004334:	0606      	lsls	r6, r0, #24
 8004336:	d501      	bpl.n	800433c <_printf_i+0xbc>
 8004338:	681d      	ldr	r5, [r3, #0]
 800433a:	e003      	b.n	8004344 <_printf_i+0xc4>
 800433c:	0645      	lsls	r5, r0, #25
 800433e:	d5fb      	bpl.n	8004338 <_printf_i+0xb8>
 8004340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004344:	2d00      	cmp	r5, #0
 8004346:	da03      	bge.n	8004350 <_printf_i+0xd0>
 8004348:	232d      	movs	r3, #45	@ 0x2d
 800434a:	426d      	negs	r5, r5
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004350:	4858      	ldr	r0, [pc, #352]	@ (80044b4 <_printf_i+0x234>)
 8004352:	230a      	movs	r3, #10
 8004354:	e011      	b.n	800437a <_printf_i+0xfa>
 8004356:	6821      	ldr	r1, [r4, #0]
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	0608      	lsls	r0, r1, #24
 800435c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004360:	d402      	bmi.n	8004368 <_printf_i+0xe8>
 8004362:	0649      	lsls	r1, r1, #25
 8004364:	bf48      	it	mi
 8004366:	b2ad      	uxthmi	r5, r5
 8004368:	2f6f      	cmp	r7, #111	@ 0x6f
 800436a:	4852      	ldr	r0, [pc, #328]	@ (80044b4 <_printf_i+0x234>)
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	bf14      	ite	ne
 8004370:	230a      	movne	r3, #10
 8004372:	2308      	moveq	r3, #8
 8004374:	2100      	movs	r1, #0
 8004376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800437a:	6866      	ldr	r6, [r4, #4]
 800437c:	60a6      	str	r6, [r4, #8]
 800437e:	2e00      	cmp	r6, #0
 8004380:	db05      	blt.n	800438e <_printf_i+0x10e>
 8004382:	6821      	ldr	r1, [r4, #0]
 8004384:	432e      	orrs	r6, r5
 8004386:	f021 0104 	bic.w	r1, r1, #4
 800438a:	6021      	str	r1, [r4, #0]
 800438c:	d04b      	beq.n	8004426 <_printf_i+0x1a6>
 800438e:	4616      	mov	r6, r2
 8004390:	fbb5 f1f3 	udiv	r1, r5, r3
 8004394:	fb03 5711 	mls	r7, r3, r1, r5
 8004398:	5dc7      	ldrb	r7, [r0, r7]
 800439a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800439e:	462f      	mov	r7, r5
 80043a0:	42bb      	cmp	r3, r7
 80043a2:	460d      	mov	r5, r1
 80043a4:	d9f4      	bls.n	8004390 <_printf_i+0x110>
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d10b      	bne.n	80043c2 <_printf_i+0x142>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	07df      	lsls	r7, r3, #31
 80043ae:	d508      	bpl.n	80043c2 <_printf_i+0x142>
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	6861      	ldr	r1, [r4, #4]
 80043b4:	4299      	cmp	r1, r3
 80043b6:	bfde      	ittt	le
 80043b8:	2330      	movle	r3, #48	@ 0x30
 80043ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043c2:	1b92      	subs	r2, r2, r6
 80043c4:	6122      	str	r2, [r4, #16]
 80043c6:	f8cd a000 	str.w	sl, [sp]
 80043ca:	464b      	mov	r3, r9
 80043cc:	aa03      	add	r2, sp, #12
 80043ce:	4621      	mov	r1, r4
 80043d0:	4640      	mov	r0, r8
 80043d2:	f7ff fee7 	bl	80041a4 <_printf_common>
 80043d6:	3001      	adds	r0, #1
 80043d8:	d14a      	bne.n	8004470 <_printf_i+0x1f0>
 80043da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043de:	b004      	add	sp, #16
 80043e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f043 0320 	orr.w	r3, r3, #32
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	4832      	ldr	r0, [pc, #200]	@ (80044b8 <_printf_i+0x238>)
 80043ee:	2778      	movs	r7, #120	@ 0x78
 80043f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	061f      	lsls	r7, r3, #24
 80043fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80043fe:	d402      	bmi.n	8004406 <_printf_i+0x186>
 8004400:	065f      	lsls	r7, r3, #25
 8004402:	bf48      	it	mi
 8004404:	b2ad      	uxthmi	r5, r5
 8004406:	6031      	str	r1, [r6, #0]
 8004408:	07d9      	lsls	r1, r3, #31
 800440a:	bf44      	itt	mi
 800440c:	f043 0320 	orrmi.w	r3, r3, #32
 8004410:	6023      	strmi	r3, [r4, #0]
 8004412:	b11d      	cbz	r5, 800441c <_printf_i+0x19c>
 8004414:	2310      	movs	r3, #16
 8004416:	e7ad      	b.n	8004374 <_printf_i+0xf4>
 8004418:	4826      	ldr	r0, [pc, #152]	@ (80044b4 <_printf_i+0x234>)
 800441a:	e7e9      	b.n	80043f0 <_printf_i+0x170>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	e7f6      	b.n	8004414 <_printf_i+0x194>
 8004426:	4616      	mov	r6, r2
 8004428:	e7bd      	b.n	80043a6 <_printf_i+0x126>
 800442a:	6833      	ldr	r3, [r6, #0]
 800442c:	6825      	ldr	r5, [r4, #0]
 800442e:	6961      	ldr	r1, [r4, #20]
 8004430:	1d18      	adds	r0, r3, #4
 8004432:	6030      	str	r0, [r6, #0]
 8004434:	062e      	lsls	r6, r5, #24
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	d501      	bpl.n	800443e <_printf_i+0x1be>
 800443a:	6019      	str	r1, [r3, #0]
 800443c:	e002      	b.n	8004444 <_printf_i+0x1c4>
 800443e:	0668      	lsls	r0, r5, #25
 8004440:	d5fb      	bpl.n	800443a <_printf_i+0x1ba>
 8004442:	8019      	strh	r1, [r3, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	4616      	mov	r6, r2
 800444a:	e7bc      	b.n	80043c6 <_printf_i+0x146>
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	6032      	str	r2, [r6, #0]
 8004452:	681e      	ldr	r6, [r3, #0]
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	2100      	movs	r1, #0
 8004458:	4630      	mov	r0, r6
 800445a:	f7fb feb9 	bl	80001d0 <memchr>
 800445e:	b108      	cbz	r0, 8004464 <_printf_i+0x1e4>
 8004460:	1b80      	subs	r0, r0, r6
 8004462:	6060      	str	r0, [r4, #4]
 8004464:	6863      	ldr	r3, [r4, #4]
 8004466:	6123      	str	r3, [r4, #16]
 8004468:	2300      	movs	r3, #0
 800446a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800446e:	e7aa      	b.n	80043c6 <_printf_i+0x146>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	4632      	mov	r2, r6
 8004474:	4649      	mov	r1, r9
 8004476:	4640      	mov	r0, r8
 8004478:	47d0      	blx	sl
 800447a:	3001      	adds	r0, #1
 800447c:	d0ad      	beq.n	80043da <_printf_i+0x15a>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	079b      	lsls	r3, r3, #30
 8004482:	d413      	bmi.n	80044ac <_printf_i+0x22c>
 8004484:	68e0      	ldr	r0, [r4, #12]
 8004486:	9b03      	ldr	r3, [sp, #12]
 8004488:	4298      	cmp	r0, r3
 800448a:	bfb8      	it	lt
 800448c:	4618      	movlt	r0, r3
 800448e:	e7a6      	b.n	80043de <_printf_i+0x15e>
 8004490:	2301      	movs	r3, #1
 8004492:	4632      	mov	r2, r6
 8004494:	4649      	mov	r1, r9
 8004496:	4640      	mov	r0, r8
 8004498:	47d0      	blx	sl
 800449a:	3001      	adds	r0, #1
 800449c:	d09d      	beq.n	80043da <_printf_i+0x15a>
 800449e:	3501      	adds	r5, #1
 80044a0:	68e3      	ldr	r3, [r4, #12]
 80044a2:	9903      	ldr	r1, [sp, #12]
 80044a4:	1a5b      	subs	r3, r3, r1
 80044a6:	42ab      	cmp	r3, r5
 80044a8:	dcf2      	bgt.n	8004490 <_printf_i+0x210>
 80044aa:	e7eb      	b.n	8004484 <_printf_i+0x204>
 80044ac:	2500      	movs	r5, #0
 80044ae:	f104 0619 	add.w	r6, r4, #25
 80044b2:	e7f5      	b.n	80044a0 <_printf_i+0x220>
 80044b4:	080069ba 	.word	0x080069ba
 80044b8:	080069cb 	.word	0x080069cb

080044bc <std>:
 80044bc:	2300      	movs	r3, #0
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
 80044c2:	e9c0 3300 	strd	r3, r3, [r0]
 80044c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ca:	6083      	str	r3, [r0, #8]
 80044cc:	8181      	strh	r1, [r0, #12]
 80044ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80044d0:	81c2      	strh	r2, [r0, #14]
 80044d2:	6183      	str	r3, [r0, #24]
 80044d4:	4619      	mov	r1, r3
 80044d6:	2208      	movs	r2, #8
 80044d8:	305c      	adds	r0, #92	@ 0x5c
 80044da:	f000 fa09 	bl	80048f0 <memset>
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <std+0x58>)
 80044e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <std+0x5c>)
 80044e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <std+0x60>)
 80044e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x64>)
 80044ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <std+0x68>)
 80044f0:	6224      	str	r4, [r4, #32]
 80044f2:	429c      	cmp	r4, r3
 80044f4:	d006      	beq.n	8004504 <std+0x48>
 80044f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044fa:	4294      	cmp	r4, r2
 80044fc:	d002      	beq.n	8004504 <std+0x48>
 80044fe:	33d0      	adds	r3, #208	@ 0xd0
 8004500:	429c      	cmp	r4, r3
 8004502:	d105      	bne.n	8004510 <std+0x54>
 8004504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800450c:	f000 ba6c 	b.w	80049e8 <__retarget_lock_init_recursive>
 8004510:	bd10      	pop	{r4, pc}
 8004512:	bf00      	nop
 8004514:	08004741 	.word	0x08004741
 8004518:	08004763 	.word	0x08004763
 800451c:	0800479b 	.word	0x0800479b
 8004520:	080047bf 	.word	0x080047bf
 8004524:	200002cc 	.word	0x200002cc

08004528 <stdio_exit_handler>:
 8004528:	4a02      	ldr	r2, [pc, #8]	@ (8004534 <stdio_exit_handler+0xc>)
 800452a:	4903      	ldr	r1, [pc, #12]	@ (8004538 <stdio_exit_handler+0x10>)
 800452c:	4803      	ldr	r0, [pc, #12]	@ (800453c <stdio_exit_handler+0x14>)
 800452e:	f000 b869 	b.w	8004604 <_fwalk_sglue>
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
 8004538:	08006341 	.word	0x08006341
 800453c:	2000001c 	.word	0x2000001c

08004540 <cleanup_stdio>:
 8004540:	6841      	ldr	r1, [r0, #4]
 8004542:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <cleanup_stdio+0x34>)
 8004544:	4299      	cmp	r1, r3
 8004546:	b510      	push	{r4, lr}
 8004548:	4604      	mov	r4, r0
 800454a:	d001      	beq.n	8004550 <cleanup_stdio+0x10>
 800454c:	f001 fef8 	bl	8006340 <_fflush_r>
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <cleanup_stdio+0x38>)
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <cleanup_stdio+0x1e>
 8004558:	4620      	mov	r0, r4
 800455a:	f001 fef1 	bl	8006340 <_fflush_r>
 800455e:	68e1      	ldr	r1, [r4, #12]
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <cleanup_stdio+0x3c>)
 8004562:	4299      	cmp	r1, r3
 8004564:	d004      	beq.n	8004570 <cleanup_stdio+0x30>
 8004566:	4620      	mov	r0, r4
 8004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456c:	f001 bee8 	b.w	8006340 <_fflush_r>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop
 8004574:	200002cc 	.word	0x200002cc
 8004578:	20000334 	.word	0x20000334
 800457c:	2000039c 	.word	0x2000039c

08004580 <global_stdio_init.part.0>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <global_stdio_init.part.0+0x30>)
 8004584:	4c0b      	ldr	r4, [pc, #44]	@ (80045b4 <global_stdio_init.part.0+0x34>)
 8004586:	4a0c      	ldr	r2, [pc, #48]	@ (80045b8 <global_stdio_init.part.0+0x38>)
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4620      	mov	r0, r4
 800458c:	2200      	movs	r2, #0
 800458e:	2104      	movs	r1, #4
 8004590:	f7ff ff94 	bl	80044bc <std>
 8004594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004598:	2201      	movs	r2, #1
 800459a:	2109      	movs	r1, #9
 800459c:	f7ff ff8e 	bl	80044bc <std>
 80045a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045a4:	2202      	movs	r2, #2
 80045a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045aa:	2112      	movs	r1, #18
 80045ac:	f7ff bf86 	b.w	80044bc <std>
 80045b0:	20000404 	.word	0x20000404
 80045b4:	200002cc 	.word	0x200002cc
 80045b8:	08004529 	.word	0x08004529

080045bc <__sfp_lock_acquire>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__sfp_lock_acquire+0x8>)
 80045be:	f000 ba14 	b.w	80049ea <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	2000040d 	.word	0x2000040d

080045c8 <__sfp_lock_release>:
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <__sfp_lock_release+0x8>)
 80045ca:	f000 ba0f 	b.w	80049ec <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	2000040d 	.word	0x2000040d

080045d4 <__sinit>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	f7ff fff0 	bl	80045bc <__sfp_lock_acquire>
 80045dc:	6a23      	ldr	r3, [r4, #32]
 80045de:	b11b      	cbz	r3, 80045e8 <__sinit+0x14>
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	f7ff bff0 	b.w	80045c8 <__sfp_lock_release>
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <__sinit+0x28>)
 80045ea:	6223      	str	r3, [r4, #32]
 80045ec:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <__sinit+0x2c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f5      	bne.n	80045e0 <__sinit+0xc>
 80045f4:	f7ff ffc4 	bl	8004580 <global_stdio_init.part.0>
 80045f8:	e7f2      	b.n	80045e0 <__sinit+0xc>
 80045fa:	bf00      	nop
 80045fc:	08004541 	.word	0x08004541
 8004600:	20000404 	.word	0x20000404

08004604 <_fwalk_sglue>:
 8004604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004608:	4607      	mov	r7, r0
 800460a:	4688      	mov	r8, r1
 800460c:	4614      	mov	r4, r2
 800460e:	2600      	movs	r6, #0
 8004610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004614:	f1b9 0901 	subs.w	r9, r9, #1
 8004618:	d505      	bpl.n	8004626 <_fwalk_sglue+0x22>
 800461a:	6824      	ldr	r4, [r4, #0]
 800461c:	2c00      	cmp	r4, #0
 800461e:	d1f7      	bne.n	8004610 <_fwalk_sglue+0xc>
 8004620:	4630      	mov	r0, r6
 8004622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d907      	bls.n	800463c <_fwalk_sglue+0x38>
 800462c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004630:	3301      	adds	r3, #1
 8004632:	d003      	beq.n	800463c <_fwalk_sglue+0x38>
 8004634:	4629      	mov	r1, r5
 8004636:	4638      	mov	r0, r7
 8004638:	47c0      	blx	r8
 800463a:	4306      	orrs	r6, r0
 800463c:	3568      	adds	r5, #104	@ 0x68
 800463e:	e7e9      	b.n	8004614 <_fwalk_sglue+0x10>

08004640 <_puts_r>:
 8004640:	6a03      	ldr	r3, [r0, #32]
 8004642:	b570      	push	{r4, r5, r6, lr}
 8004644:	6884      	ldr	r4, [r0, #8]
 8004646:	4605      	mov	r5, r0
 8004648:	460e      	mov	r6, r1
 800464a:	b90b      	cbnz	r3, 8004650 <_puts_r+0x10>
 800464c:	f7ff ffc2 	bl	80045d4 <__sinit>
 8004650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004652:	07db      	lsls	r3, r3, #31
 8004654:	d405      	bmi.n	8004662 <_puts_r+0x22>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	0598      	lsls	r0, r3, #22
 800465a:	d402      	bmi.n	8004662 <_puts_r+0x22>
 800465c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800465e:	f000 f9c4 	bl	80049ea <__retarget_lock_acquire_recursive>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	0719      	lsls	r1, r3, #28
 8004666:	d502      	bpl.n	800466e <_puts_r+0x2e>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d135      	bne.n	80046da <_puts_r+0x9a>
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f8e7 	bl	8004844 <__swsetup_r>
 8004676:	b380      	cbz	r0, 80046da <_puts_r+0x9a>
 8004678:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800467c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800467e:	07da      	lsls	r2, r3, #31
 8004680:	d405      	bmi.n	800468e <_puts_r+0x4e>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	059b      	lsls	r3, r3, #22
 8004686:	d402      	bmi.n	800468e <_puts_r+0x4e>
 8004688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800468a:	f000 f9af 	bl	80049ec <__retarget_lock_release_recursive>
 800468e:	4628      	mov	r0, r5
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	2b00      	cmp	r3, #0
 8004694:	da04      	bge.n	80046a0 <_puts_r+0x60>
 8004696:	69a2      	ldr	r2, [r4, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	dc17      	bgt.n	80046cc <_puts_r+0x8c>
 800469c:	290a      	cmp	r1, #10
 800469e:	d015      	beq.n	80046cc <_puts_r+0x8c>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	7019      	strb	r1, [r3, #0]
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046ae:	3b01      	subs	r3, #1
 80046b0:	60a3      	str	r3, [r4, #8]
 80046b2:	2900      	cmp	r1, #0
 80046b4:	d1ed      	bne.n	8004692 <_puts_r+0x52>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da11      	bge.n	80046de <_puts_r+0x9e>
 80046ba:	4622      	mov	r2, r4
 80046bc:	210a      	movs	r1, #10
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 f881 	bl	80047c6 <__swbuf_r>
 80046c4:	3001      	adds	r0, #1
 80046c6:	d0d7      	beq.n	8004678 <_puts_r+0x38>
 80046c8:	250a      	movs	r5, #10
 80046ca:	e7d7      	b.n	800467c <_puts_r+0x3c>
 80046cc:	4622      	mov	r2, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f879 	bl	80047c6 <__swbuf_r>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d1e7      	bne.n	80046a8 <_puts_r+0x68>
 80046d8:	e7ce      	b.n	8004678 <_puts_r+0x38>
 80046da:	3e01      	subs	r6, #1
 80046dc:	e7e4      	b.n	80046a8 <_puts_r+0x68>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	6022      	str	r2, [r4, #0]
 80046e4:	220a      	movs	r2, #10
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e7ee      	b.n	80046c8 <_puts_r+0x88>
	...

080046ec <puts>:
 80046ec:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <puts+0xc>)
 80046ee:	4601      	mov	r1, r0
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f7ff bfa5 	b.w	8004640 <_puts_r>
 80046f6:	bf00      	nop
 80046f8:	20000018 	.word	0x20000018

080046fc <siprintf>:
 80046fc:	b40e      	push	{r1, r2, r3}
 80046fe:	b510      	push	{r4, lr}
 8004700:	b09d      	sub	sp, #116	@ 0x74
 8004702:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004704:	9002      	str	r0, [sp, #8]
 8004706:	9006      	str	r0, [sp, #24]
 8004708:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800470c:	480a      	ldr	r0, [pc, #40]	@ (8004738 <siprintf+0x3c>)
 800470e:	9107      	str	r1, [sp, #28]
 8004710:	9104      	str	r1, [sp, #16]
 8004712:	490a      	ldr	r1, [pc, #40]	@ (800473c <siprintf+0x40>)
 8004714:	f853 2b04 	ldr.w	r2, [r3], #4
 8004718:	9105      	str	r1, [sp, #20]
 800471a:	2400      	movs	r4, #0
 800471c:	a902      	add	r1, sp, #8
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004724:	f001 fc90 	bl	8006048 <_svfiprintf_r>
 8004728:	9b02      	ldr	r3, [sp, #8]
 800472a:	701c      	strb	r4, [r3, #0]
 800472c:	b01d      	add	sp, #116	@ 0x74
 800472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004732:	b003      	add	sp, #12
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000018 	.word	0x20000018
 800473c:	ffff0208 	.word	0xffff0208

08004740 <__sread>:
 8004740:	b510      	push	{r4, lr}
 8004742:	460c      	mov	r4, r1
 8004744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004748:	f000 f900 	bl	800494c <_read_r>
 800474c:	2800      	cmp	r0, #0
 800474e:	bfab      	itete	ge
 8004750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004752:	89a3      	ldrhlt	r3, [r4, #12]
 8004754:	181b      	addge	r3, r3, r0
 8004756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800475a:	bfac      	ite	ge
 800475c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800475e:	81a3      	strhlt	r3, [r4, #12]
 8004760:	bd10      	pop	{r4, pc}

08004762 <__swrite>:
 8004762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	461f      	mov	r7, r3
 8004768:	898b      	ldrh	r3, [r1, #12]
 800476a:	05db      	lsls	r3, r3, #23
 800476c:	4605      	mov	r5, r0
 800476e:	460c      	mov	r4, r1
 8004770:	4616      	mov	r6, r2
 8004772:	d505      	bpl.n	8004780 <__swrite+0x1e>
 8004774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004778:	2302      	movs	r3, #2
 800477a:	2200      	movs	r2, #0
 800477c:	f000 f8d4 	bl	8004928 <_lseek_r>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	4632      	mov	r2, r6
 800478e:	463b      	mov	r3, r7
 8004790:	4628      	mov	r0, r5
 8004792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004796:	f000 b8eb 	b.w	8004970 <_write_r>

0800479a <__sseek>:
 800479a:	b510      	push	{r4, lr}
 800479c:	460c      	mov	r4, r1
 800479e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a2:	f000 f8c1 	bl	8004928 <_lseek_r>
 80047a6:	1c43      	adds	r3, r0, #1
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	bf15      	itete	ne
 80047ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047b6:	81a3      	strheq	r3, [r4, #12]
 80047b8:	bf18      	it	ne
 80047ba:	81a3      	strhne	r3, [r4, #12]
 80047bc:	bd10      	pop	{r4, pc}

080047be <__sclose>:
 80047be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c2:	f000 b8a1 	b.w	8004908 <_close_r>

080047c6 <__swbuf_r>:
 80047c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c8:	460e      	mov	r6, r1
 80047ca:	4614      	mov	r4, r2
 80047cc:	4605      	mov	r5, r0
 80047ce:	b118      	cbz	r0, 80047d8 <__swbuf_r+0x12>
 80047d0:	6a03      	ldr	r3, [r0, #32]
 80047d2:	b90b      	cbnz	r3, 80047d8 <__swbuf_r+0x12>
 80047d4:	f7ff fefe 	bl	80045d4 <__sinit>
 80047d8:	69a3      	ldr	r3, [r4, #24]
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	071a      	lsls	r2, r3, #28
 80047e0:	d501      	bpl.n	80047e6 <__swbuf_r+0x20>
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	b943      	cbnz	r3, 80047f8 <__swbuf_r+0x32>
 80047e6:	4621      	mov	r1, r4
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 f82b 	bl	8004844 <__swsetup_r>
 80047ee:	b118      	cbz	r0, 80047f8 <__swbuf_r+0x32>
 80047f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047f4:	4638      	mov	r0, r7
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	6922      	ldr	r2, [r4, #16]
 80047fc:	1a98      	subs	r0, r3, r2
 80047fe:	6963      	ldr	r3, [r4, #20]
 8004800:	b2f6      	uxtb	r6, r6
 8004802:	4283      	cmp	r3, r0
 8004804:	4637      	mov	r7, r6
 8004806:	dc05      	bgt.n	8004814 <__swbuf_r+0x4e>
 8004808:	4621      	mov	r1, r4
 800480a:	4628      	mov	r0, r5
 800480c:	f001 fd98 	bl	8006340 <_fflush_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	d1ed      	bne.n	80047f0 <__swbuf_r+0x2a>
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	3b01      	subs	r3, #1
 8004818:	60a3      	str	r3, [r4, #8]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	701e      	strb	r6, [r3, #0]
 8004822:	6962      	ldr	r2, [r4, #20]
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	429a      	cmp	r2, r3
 8004828:	d004      	beq.n	8004834 <__swbuf_r+0x6e>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	07db      	lsls	r3, r3, #31
 800482e:	d5e1      	bpl.n	80047f4 <__swbuf_r+0x2e>
 8004830:	2e0a      	cmp	r6, #10
 8004832:	d1df      	bne.n	80047f4 <__swbuf_r+0x2e>
 8004834:	4621      	mov	r1, r4
 8004836:	4628      	mov	r0, r5
 8004838:	f001 fd82 	bl	8006340 <_fflush_r>
 800483c:	2800      	cmp	r0, #0
 800483e:	d0d9      	beq.n	80047f4 <__swbuf_r+0x2e>
 8004840:	e7d6      	b.n	80047f0 <__swbuf_r+0x2a>
	...

08004844 <__swsetup_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4b29      	ldr	r3, [pc, #164]	@ (80048ec <__swsetup_r+0xa8>)
 8004848:	4605      	mov	r5, r0
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	460c      	mov	r4, r1
 800484e:	b118      	cbz	r0, 8004858 <__swsetup_r+0x14>
 8004850:	6a03      	ldr	r3, [r0, #32]
 8004852:	b90b      	cbnz	r3, 8004858 <__swsetup_r+0x14>
 8004854:	f7ff febe 	bl	80045d4 <__sinit>
 8004858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485c:	0719      	lsls	r1, r3, #28
 800485e:	d422      	bmi.n	80048a6 <__swsetup_r+0x62>
 8004860:	06da      	lsls	r2, r3, #27
 8004862:	d407      	bmi.n	8004874 <__swsetup_r+0x30>
 8004864:	2209      	movs	r2, #9
 8004866:	602a      	str	r2, [r5, #0]
 8004868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800486c:	81a3      	strh	r3, [r4, #12]
 800486e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004872:	e033      	b.n	80048dc <__swsetup_r+0x98>
 8004874:	0758      	lsls	r0, r3, #29
 8004876:	d512      	bpl.n	800489e <__swsetup_r+0x5a>
 8004878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800487a:	b141      	cbz	r1, 800488e <__swsetup_r+0x4a>
 800487c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__swsetup_r+0x46>
 8004884:	4628      	mov	r0, r5
 8004886:	f000 ff0b 	bl	80056a0 <_free_r>
 800488a:	2300      	movs	r3, #0
 800488c:	6363      	str	r3, [r4, #52]	@ 0x34
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	6063      	str	r3, [r4, #4]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	b94b      	cbnz	r3, 80048be <__swsetup_r+0x7a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b4:	d003      	beq.n	80048be <__swsetup_r+0x7a>
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	f001 fd8f 	bl	80063dc <__smakebuf_r>
 80048be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c2:	f013 0201 	ands.w	r2, r3, #1
 80048c6:	d00a      	beq.n	80048de <__swsetup_r+0x9a>
 80048c8:	2200      	movs	r2, #0
 80048ca:	60a2      	str	r2, [r4, #8]
 80048cc:	6962      	ldr	r2, [r4, #20]
 80048ce:	4252      	negs	r2, r2
 80048d0:	61a2      	str	r2, [r4, #24]
 80048d2:	6922      	ldr	r2, [r4, #16]
 80048d4:	b942      	cbnz	r2, 80048e8 <__swsetup_r+0xa4>
 80048d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048da:	d1c5      	bne.n	8004868 <__swsetup_r+0x24>
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	0799      	lsls	r1, r3, #30
 80048e0:	bf58      	it	pl
 80048e2:	6962      	ldrpl	r2, [r4, #20]
 80048e4:	60a2      	str	r2, [r4, #8]
 80048e6:	e7f4      	b.n	80048d2 <__swsetup_r+0x8e>
 80048e8:	2000      	movs	r0, #0
 80048ea:	e7f7      	b.n	80048dc <__swsetup_r+0x98>
 80048ec:	20000018 	.word	0x20000018

080048f0 <memset>:
 80048f0:	4402      	add	r2, r0
 80048f2:	4603      	mov	r3, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d100      	bne.n	80048fa <memset+0xa>
 80048f8:	4770      	bx	lr
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	e7f9      	b.n	80048f4 <memset+0x4>

08004900 <_localeconv_r>:
 8004900:	4800      	ldr	r0, [pc, #0]	@ (8004904 <_localeconv_r+0x4>)
 8004902:	4770      	bx	lr
 8004904:	20000158 	.word	0x20000158

08004908 <_close_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	@ (8004924 <_close_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc ff45 	bl	80017a2 <_close>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_close_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_close_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000408 	.word	0x20000408

08004928 <_lseek_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_lseek_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc ff57 	bl	80017ea <_lseek>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_lseek_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_lseek_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	20000408 	.word	0x20000408

0800494c <_read_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	@ (800496c <_read_r+0x20>)
 8004950:	4604      	mov	r4, r0
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	2200      	movs	r2, #0
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f7fc fee8 	bl	8001730 <_read>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_read_r+0x1e>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_read_r+0x1e>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	20000408 	.word	0x20000408

08004970 <_write_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d07      	ldr	r5, [pc, #28]	@ (8004990 <_write_r+0x20>)
 8004974:	4604      	mov	r4, r0
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	2200      	movs	r2, #0
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fc fef3 	bl	800176a <_write>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_write_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_write_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20000408 	.word	0x20000408

08004994 <__errno>:
 8004994:	4b01      	ldr	r3, [pc, #4]	@ (800499c <__errno+0x8>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000018 	.word	0x20000018

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4d0d      	ldr	r5, [pc, #52]	@ (80049d8 <__libc_init_array+0x38>)
 80049a4:	4c0d      	ldr	r4, [pc, #52]	@ (80049dc <__libc_init_array+0x3c>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	2600      	movs	r6, #0
 80049ac:	42a6      	cmp	r6, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	4d0b      	ldr	r5, [pc, #44]	@ (80049e0 <__libc_init_array+0x40>)
 80049b2:	4c0c      	ldr	r4, [pc, #48]	@ (80049e4 <__libc_init_array+0x44>)
 80049b4:	f001 ffcc 	bl	8006950 <_init>
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	2600      	movs	r6, #0
 80049be:	42a6      	cmp	r6, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c8:	4798      	blx	r3
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d2:	4798      	blx	r3
 80049d4:	3601      	adds	r6, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	08006d24 	.word	0x08006d24
 80049dc:	08006d24 	.word	0x08006d24
 80049e0:	08006d24 	.word	0x08006d24
 80049e4:	08006d28 	.word	0x08006d28

080049e8 <__retarget_lock_init_recursive>:
 80049e8:	4770      	bx	lr

080049ea <__retarget_lock_acquire_recursive>:
 80049ea:	4770      	bx	lr

080049ec <__retarget_lock_release_recursive>:
 80049ec:	4770      	bx	lr

080049ee <quorem>:
 80049ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f2:	6903      	ldr	r3, [r0, #16]
 80049f4:	690c      	ldr	r4, [r1, #16]
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	4607      	mov	r7, r0
 80049fa:	db7e      	blt.n	8004afa <quorem+0x10c>
 80049fc:	3c01      	subs	r4, #1
 80049fe:	f101 0814 	add.w	r8, r1, #20
 8004a02:	00a3      	lsls	r3, r4, #2
 8004a04:	f100 0514 	add.w	r5, r0, #20
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a20:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a24:	d32e      	bcc.n	8004a84 <quorem+0x96>
 8004a26:	f04f 0a00 	mov.w	sl, #0
 8004a2a:	46c4      	mov	ip, r8
 8004a2c:	46ae      	mov	lr, r5
 8004a2e:	46d3      	mov	fp, sl
 8004a30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a34:	b298      	uxth	r0, r3
 8004a36:	fb06 a000 	mla	r0, r6, r0, sl
 8004a3a:	0c02      	lsrs	r2, r0, #16
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	fb06 2303 	mla	r3, r6, r3, r2
 8004a42:	f8de 2000 	ldr.w	r2, [lr]
 8004a46:	b280      	uxth	r0, r0
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	1a12      	subs	r2, r2, r0
 8004a4c:	445a      	add	r2, fp
 8004a4e:	f8de 0000 	ldr.w	r0, [lr]
 8004a52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a60:	b292      	uxth	r2, r2
 8004a62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a66:	45e1      	cmp	r9, ip
 8004a68:	f84e 2b04 	str.w	r2, [lr], #4
 8004a6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a70:	d2de      	bcs.n	8004a30 <quorem+0x42>
 8004a72:	9b00      	ldr	r3, [sp, #0]
 8004a74:	58eb      	ldr	r3, [r5, r3]
 8004a76:	b92b      	cbnz	r3, 8004a84 <quorem+0x96>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	d32f      	bcc.n	8004ae2 <quorem+0xf4>
 8004a82:	613c      	str	r4, [r7, #16]
 8004a84:	4638      	mov	r0, r7
 8004a86:	f001 f97d 	bl	8005d84 <__mcmp>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	db25      	blt.n	8004ada <quorem+0xec>
 8004a8e:	4629      	mov	r1, r5
 8004a90:	2000      	movs	r0, #0
 8004a92:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a96:	f8d1 c000 	ldr.w	ip, [r1]
 8004a9a:	fa1f fe82 	uxth.w	lr, r2
 8004a9e:	fa1f f38c 	uxth.w	r3, ip
 8004aa2:	eba3 030e 	sub.w	r3, r3, lr
 8004aa6:	4403      	add	r3, r0
 8004aa8:	0c12      	lsrs	r2, r2, #16
 8004aaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004aae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab8:	45c1      	cmp	r9, r8
 8004aba:	f841 3b04 	str.w	r3, [r1], #4
 8004abe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ac2:	d2e6      	bcs.n	8004a92 <quorem+0xa4>
 8004ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004acc:	b922      	cbnz	r2, 8004ad8 <quorem+0xea>
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	429d      	cmp	r5, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	d30b      	bcc.n	8004aee <quorem+0x100>
 8004ad6:	613c      	str	r4, [r7, #16]
 8004ad8:	3601      	adds	r6, #1
 8004ada:	4630      	mov	r0, r6
 8004adc:	b003      	add	sp, #12
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d1cb      	bne.n	8004a82 <quorem+0x94>
 8004aea:	3c01      	subs	r4, #1
 8004aec:	e7c6      	b.n	8004a7c <quorem+0x8e>
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	3b04      	subs	r3, #4
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	d1ef      	bne.n	8004ad6 <quorem+0xe8>
 8004af6:	3c01      	subs	r4, #1
 8004af8:	e7ea      	b.n	8004ad0 <quorem+0xe2>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e7ee      	b.n	8004adc <quorem+0xee>
	...

08004b00 <_dtoa_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	69c7      	ldr	r7, [r0, #28]
 8004b06:	b097      	sub	sp, #92	@ 0x5c
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b10:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004b12:	4681      	mov	r9, r0
 8004b14:	b97f      	cbnz	r7, 8004b36 <_dtoa_r+0x36>
 8004b16:	2010      	movs	r0, #16
 8004b18:	f000 fe0c 	bl	8005734 <malloc>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b22:	b920      	cbnz	r0, 8004b2e <_dtoa_r+0x2e>
 8004b24:	4baa      	ldr	r3, [pc, #680]	@ (8004dd0 <_dtoa_r+0x2d0>)
 8004b26:	21ef      	movs	r1, #239	@ 0xef
 8004b28:	48aa      	ldr	r0, [pc, #680]	@ (8004dd4 <_dtoa_r+0x2d4>)
 8004b2a:	f001 fced 	bl	8006508 <__assert_func>
 8004b2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b32:	6007      	str	r7, [r0, #0]
 8004b34:	60c7      	str	r7, [r0, #12]
 8004b36:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	b159      	cbz	r1, 8004b56 <_dtoa_r+0x56>
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	604a      	str	r2, [r1, #4]
 8004b42:	2301      	movs	r3, #1
 8004b44:	4093      	lsls	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
 8004b48:	4648      	mov	r0, r9
 8004b4a:	f000 fee9 	bl	8005920 <_Bfree>
 8004b4e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	1e2b      	subs	r3, r5, #0
 8004b58:	bfb9      	ittee	lt
 8004b5a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b5e:	9307      	strlt	r3, [sp, #28]
 8004b60:	2300      	movge	r3, #0
 8004b62:	6033      	strge	r3, [r6, #0]
 8004b64:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004b68:	4b9b      	ldr	r3, [pc, #620]	@ (8004dd8 <_dtoa_r+0x2d8>)
 8004b6a:	bfbc      	itt	lt
 8004b6c:	2201      	movlt	r2, #1
 8004b6e:	6032      	strlt	r2, [r6, #0]
 8004b70:	ea33 0308 	bics.w	r3, r3, r8
 8004b74:	d112      	bne.n	8004b9c <_dtoa_r+0x9c>
 8004b76:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b82:	4323      	orrs	r3, r4
 8004b84:	f000 855b 	beq.w	800563e <_dtoa_r+0xb3e>
 8004b88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b8a:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8004ddc <_dtoa_r+0x2dc>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 855d 	beq.w	800564e <_dtoa_r+0xb4e>
 8004b94:	f10a 0303 	add.w	r3, sl, #3
 8004b98:	f000 bd57 	b.w	800564a <_dtoa_r+0xb4a>
 8004b9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ba0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2300      	movs	r3, #0
 8004bac:	f7fb ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	b158      	cbz	r0, 8004bcc <_dtoa_r+0xcc>
 8004bb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bbc:	b113      	cbz	r3, 8004bc4 <_dtoa_r+0xc4>
 8004bbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004bc0:	4b87      	ldr	r3, [pc, #540]	@ (8004de0 <_dtoa_r+0x2e0>)
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8004de4 <_dtoa_r+0x2e4>
 8004bc8:	f000 bd41 	b.w	800564e <_dtoa_r+0xb4e>
 8004bcc:	ab14      	add	r3, sp, #80	@ 0x50
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	ab15      	add	r3, sp, #84	@ 0x54
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004bda:	f001 f981 	bl	8005ee0 <__d2b>
 8004bde:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004be2:	9003      	str	r0, [sp, #12]
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	d077      	beq.n	8004cd8 <_dtoa_r+0x1d8>
 8004be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bea:	9712      	str	r7, [sp, #72]	@ 0x48
 8004bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c00:	4619      	mov	r1, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	4b78      	ldr	r3, [pc, #480]	@ (8004de8 <_dtoa_r+0x2e8>)
 8004c06:	f7fb fb3f 	bl	8000288 <__aeabi_dsub>
 8004c0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004db8 <_dtoa_r+0x2b8>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fcf2 	bl	80005f8 <__aeabi_dmul>
 8004c14:	a36a      	add	r3, pc, #424	@ (adr r3, 8004dc0 <_dtoa_r+0x2c0>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fb37 	bl	800028c <__adddf3>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4630      	mov	r0, r6
 8004c22:	460d      	mov	r5, r1
 8004c24:	f7fb fc7e 	bl	8000524 <__aeabi_i2d>
 8004c28:	a367      	add	r3, pc, #412	@ (adr r3, 8004dc8 <_dtoa_r+0x2c8>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f7fb fce3 	bl	80005f8 <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb fb27 	bl	800028c <__adddf3>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f7fb ff89 	bl	8000b58 <__aeabi_d2iz>
 8004c46:	2200      	movs	r2, #0
 8004c48:	4607      	mov	r7, r0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7fb ff44 	bl	8000adc <__aeabi_dcmplt>
 8004c54:	b140      	cbz	r0, 8004c68 <_dtoa_r+0x168>
 8004c56:	4638      	mov	r0, r7
 8004c58:	f7fb fc64 	bl	8000524 <__aeabi_i2d>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	f7fb ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c64:	b900      	cbnz	r0, 8004c68 <_dtoa_r+0x168>
 8004c66:	3f01      	subs	r7, #1
 8004c68:	2f16      	cmp	r7, #22
 8004c6a:	d853      	bhi.n	8004d14 <_dtoa_r+0x214>
 8004c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8004dec <_dtoa_r+0x2ec>)
 8004c6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c7a:	f7fb ff2f 	bl	8000adc <__aeabi_dcmplt>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d04a      	beq.n	8004d18 <_dtoa_r+0x218>
 8004c82:	3f01      	subs	r7, #1
 8004c84:	2300      	movs	r3, #0
 8004c86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c8a:	1b9b      	subs	r3, r3, r6
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	bf45      	ittet	mi
 8004c90:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c94:	9304      	strmi	r3, [sp, #16]
 8004c96:	2300      	movpl	r3, #0
 8004c98:	2300      	movmi	r3, #0
 8004c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c9c:	bf54      	ite	pl
 8004c9e:	9304      	strpl	r3, [sp, #16]
 8004ca0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004ca2:	2f00      	cmp	r7, #0
 8004ca4:	db3a      	blt.n	8004d1c <_dtoa_r+0x21c>
 8004ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004caa:	443b      	add	r3, r7
 8004cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cae:	2300      	movs	r3, #0
 8004cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cb4:	2b09      	cmp	r3, #9
 8004cb6:	d864      	bhi.n	8004d82 <_dtoa_r+0x282>
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	bfc4      	itt	gt
 8004cbc:	3b04      	subgt	r3, #4
 8004cbe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004cc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cc2:	f1a3 0302 	sub.w	r3, r3, #2
 8004cc6:	bfcc      	ite	gt
 8004cc8:	2400      	movgt	r4, #0
 8004cca:	2401      	movle	r4, #1
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d864      	bhi.n	8004d9a <_dtoa_r+0x29a>
 8004cd0:	e8df f003 	tbb	[pc, r3]
 8004cd4:	2c385553 	.word	0x2c385553
 8004cd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004cdc:	441e      	add	r6, r3
 8004cde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	bfc1      	itttt	gt
 8004ce6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cea:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cee:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004cf2:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004cf6:	bfd6      	itet	le
 8004cf8:	f1c3 0320 	rsble	r3, r3, #32
 8004cfc:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d00:	fa04 f003 	lslle.w	r0, r4, r3
 8004d04:	f7fb fbfe 	bl	8000504 <__aeabi_ui2d>
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d0e:	3e01      	subs	r6, #1
 8004d10:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d12:	e775      	b.n	8004c00 <_dtoa_r+0x100>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e7b6      	b.n	8004c86 <_dtoa_r+0x186>
 8004d18:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d1a:	e7b5      	b.n	8004c88 <_dtoa_r+0x188>
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	1bdb      	subs	r3, r3, r7
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	427b      	negs	r3, r7
 8004d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d26:	2300      	movs	r3, #0
 8004d28:	930e      	str	r3, [sp, #56]	@ 0x38
 8004d2a:	e7c2      	b.n	8004cb2 <_dtoa_r+0x1b2>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d32:	eb07 0b03 	add.w	fp, r7, r3
 8004d36:	f10b 0301 	add.w	r3, fp, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	9308      	str	r3, [sp, #32]
 8004d3e:	bfb8      	it	lt
 8004d40:	2301      	movlt	r3, #1
 8004d42:	e006      	b.n	8004d52 <_dtoa_r+0x252>
 8004d44:	2301      	movs	r3, #1
 8004d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dd28      	ble.n	8004da0 <_dtoa_r+0x2a0>
 8004d4e:	469b      	mov	fp, r3
 8004d50:	9308      	str	r3, [sp, #32]
 8004d52:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d56:	2100      	movs	r1, #0
 8004d58:	2204      	movs	r2, #4
 8004d5a:	f102 0514 	add.w	r5, r2, #20
 8004d5e:	429d      	cmp	r5, r3
 8004d60:	d926      	bls.n	8004db0 <_dtoa_r+0x2b0>
 8004d62:	6041      	str	r1, [r0, #4]
 8004d64:	4648      	mov	r0, r9
 8004d66:	f000 fd9b 	bl	80058a0 <_Balloc>
 8004d6a:	4682      	mov	sl, r0
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d141      	bne.n	8004df4 <_dtoa_r+0x2f4>
 8004d70:	4b1f      	ldr	r3, [pc, #124]	@ (8004df0 <_dtoa_r+0x2f0>)
 8004d72:	4602      	mov	r2, r0
 8004d74:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d78:	e6d6      	b.n	8004b28 <_dtoa_r+0x28>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e7e3      	b.n	8004d46 <_dtoa_r+0x246>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e7d5      	b.n	8004d2e <_dtoa_r+0x22e>
 8004d82:	2401      	movs	r4, #1
 8004d84:	2300      	movs	r3, #0
 8004d86:	9320      	str	r3, [sp, #128]	@ 0x80
 8004d88:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d8a:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8cd b020 	str.w	fp, [sp, #32]
 8004d94:	2312      	movs	r3, #18
 8004d96:	9221      	str	r2, [sp, #132]	@ 0x84
 8004d98:	e7db      	b.n	8004d52 <_dtoa_r+0x252>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d9e:	e7f4      	b.n	8004d8a <_dtoa_r+0x28a>
 8004da0:	f04f 0b01 	mov.w	fp, #1
 8004da4:	f8cd b020 	str.w	fp, [sp, #32]
 8004da8:	465b      	mov	r3, fp
 8004daa:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004dae:	e7d0      	b.n	8004d52 <_dtoa_r+0x252>
 8004db0:	3101      	adds	r1, #1
 8004db2:	0052      	lsls	r2, r2, #1
 8004db4:	e7d1      	b.n	8004d5a <_dtoa_r+0x25a>
 8004db6:	bf00      	nop
 8004db8:	636f4361 	.word	0x636f4361
 8004dbc:	3fd287a7 	.word	0x3fd287a7
 8004dc0:	8b60c8b3 	.word	0x8b60c8b3
 8004dc4:	3fc68a28 	.word	0x3fc68a28
 8004dc8:	509f79fb 	.word	0x509f79fb
 8004dcc:	3fd34413 	.word	0x3fd34413
 8004dd0:	080069e9 	.word	0x080069e9
 8004dd4:	08006a00 	.word	0x08006a00
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	080069e5 	.word	0x080069e5
 8004de0:	080069b9 	.word	0x080069b9
 8004de4:	080069b8 	.word	0x080069b8
 8004de8:	3ff80000 	.word	0x3ff80000
 8004dec:	08006b50 	.word	0x08006b50
 8004df0:	08006a58 	.word	0x08006a58
 8004df4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004df8:	6018      	str	r0, [r3, #0]
 8004dfa:	9b08      	ldr	r3, [sp, #32]
 8004dfc:	2b0e      	cmp	r3, #14
 8004dfe:	f200 80a1 	bhi.w	8004f44 <_dtoa_r+0x444>
 8004e02:	2c00      	cmp	r4, #0
 8004e04:	f000 809e 	beq.w	8004f44 <_dtoa_r+0x444>
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	dd33      	ble.n	8004e74 <_dtoa_r+0x374>
 8004e0c:	4b9c      	ldr	r3, [pc, #624]	@ (8005080 <_dtoa_r+0x580>)
 8004e0e:	f007 020f 	and.w	r2, r7, #15
 8004e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e1a:	05f8      	lsls	r0, r7, #23
 8004e1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004e20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e24:	d516      	bpl.n	8004e54 <_dtoa_r+0x354>
 8004e26:	4b97      	ldr	r3, [pc, #604]	@ (8005084 <_dtoa_r+0x584>)
 8004e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e30:	f7fb fd0c 	bl	800084c <__aeabi_ddiv>
 8004e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e38:	f004 040f 	and.w	r4, r4, #15
 8004e3c:	2603      	movs	r6, #3
 8004e3e:	4d91      	ldr	r5, [pc, #580]	@ (8005084 <_dtoa_r+0x584>)
 8004e40:	b954      	cbnz	r4, 8004e58 <_dtoa_r+0x358>
 8004e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e4a:	f7fb fcff 	bl	800084c <__aeabi_ddiv>
 8004e4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e52:	e028      	b.n	8004ea6 <_dtoa_r+0x3a6>
 8004e54:	2602      	movs	r6, #2
 8004e56:	e7f2      	b.n	8004e3e <_dtoa_r+0x33e>
 8004e58:	07e1      	lsls	r1, r4, #31
 8004e5a:	d508      	bpl.n	8004e6e <_dtoa_r+0x36e>
 8004e5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e64:	f7fb fbc8 	bl	80005f8 <__aeabi_dmul>
 8004e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	1064      	asrs	r4, r4, #1
 8004e70:	3508      	adds	r5, #8
 8004e72:	e7e5      	b.n	8004e40 <_dtoa_r+0x340>
 8004e74:	f000 80af 	beq.w	8004fd6 <_dtoa_r+0x4d6>
 8004e78:	427c      	negs	r4, r7
 8004e7a:	4b81      	ldr	r3, [pc, #516]	@ (8005080 <_dtoa_r+0x580>)
 8004e7c:	4d81      	ldr	r5, [pc, #516]	@ (8005084 <_dtoa_r+0x584>)
 8004e7e:	f004 020f 	and.w	r2, r4, #15
 8004e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e8e:	f7fb fbb3 	bl	80005f8 <__aeabi_dmul>
 8004e92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e96:	1124      	asrs	r4, r4, #4
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2602      	movs	r6, #2
 8004e9c:	2c00      	cmp	r4, #0
 8004e9e:	f040 808f 	bne.w	8004fc0 <_dtoa_r+0x4c0>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1d3      	bne.n	8004e4e <_dtoa_r+0x34e>
 8004ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ea8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8094 	beq.w	8004fda <_dtoa_r+0x4da>
 8004eb2:	4b75      	ldr	r3, [pc, #468]	@ (8005088 <_dtoa_r+0x588>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fe0f 	bl	8000adc <__aeabi_dcmplt>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	f000 808b 	beq.w	8004fda <_dtoa_r+0x4da>
 8004ec4:	9b08      	ldr	r3, [sp, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8087 	beq.w	8004fda <_dtoa_r+0x4da>
 8004ecc:	f1bb 0f00 	cmp.w	fp, #0
 8004ed0:	dd34      	ble.n	8004f3c <_dtoa_r+0x43c>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4b6d      	ldr	r3, [pc, #436]	@ (800508c <_dtoa_r+0x58c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4629      	mov	r1, r5
 8004eda:	f7fb fb8d 	bl	80005f8 <__aeabi_dmul>
 8004ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ee2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	465c      	mov	r4, fp
 8004eea:	4630      	mov	r0, r6
 8004eec:	f7fb fb1a 	bl	8000524 <__aeabi_i2d>
 8004ef0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef4:	f7fb fb80 	bl	80005f8 <__aeabi_dmul>
 8004ef8:	4b65      	ldr	r3, [pc, #404]	@ (8005090 <_dtoa_r+0x590>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fb f9c6 	bl	800028c <__adddf3>
 8004f00:	4605      	mov	r5, r0
 8004f02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f06:	2c00      	cmp	r4, #0
 8004f08:	d16a      	bne.n	8004fe0 <_dtoa_r+0x4e0>
 8004f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f0e:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <_dtoa_r+0x594>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	f7fb f9b9 	bl	8000288 <__aeabi_dsub>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4633      	mov	r3, r6
 8004f22:	f7fb fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 8298 	bne.w	800545c <_dtoa_r+0x95c>
 8004f2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f30:	462a      	mov	r2, r5
 8004f32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f36:	f7fb fdd1 	bl	8000adc <__aeabi_dcmplt>
 8004f3a:	bb38      	cbnz	r0, 8004f8c <_dtoa_r+0x48c>
 8004f3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004f40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f2c0 8157 	blt.w	80051fa <_dtoa_r+0x6fa>
 8004f4c:	2f0e      	cmp	r7, #14
 8004f4e:	f300 8154 	bgt.w	80051fa <_dtoa_r+0x6fa>
 8004f52:	4b4b      	ldr	r3, [pc, #300]	@ (8005080 <_dtoa_r+0x580>)
 8004f54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f280 80e5 	bge.w	8005132 <_dtoa_r+0x632>
 8004f68:	9b08      	ldr	r3, [sp, #32]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f300 80e1 	bgt.w	8005132 <_dtoa_r+0x632>
 8004f70:	d10c      	bne.n	8004f8c <_dtoa_r+0x48c>
 8004f72:	4b48      	ldr	r3, [pc, #288]	@ (8005094 <_dtoa_r+0x594>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f7a:	f7fb fb3d 	bl	80005f8 <__aeabi_dmul>
 8004f7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f82:	f7fb fdbf 	bl	8000b04 <__aeabi_dcmpge>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f000 8266 	beq.w	8005458 <_dtoa_r+0x958>
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	4625      	mov	r5, r4
 8004f90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f92:	4656      	mov	r6, sl
 8004f94:	ea6f 0803 	mvn.w	r8, r3
 8004f98:	2700      	movs	r7, #0
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 fcbf 	bl	8005920 <_Bfree>
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	f000 80bd 	beq.w	8005122 <_dtoa_r+0x622>
 8004fa8:	b12f      	cbz	r7, 8004fb6 <_dtoa_r+0x4b6>
 8004faa:	42af      	cmp	r7, r5
 8004fac:	d003      	beq.n	8004fb6 <_dtoa_r+0x4b6>
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4648      	mov	r0, r9
 8004fb2:	f000 fcb5 	bl	8005920 <_Bfree>
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4648      	mov	r0, r9
 8004fba:	f000 fcb1 	bl	8005920 <_Bfree>
 8004fbe:	e0b0      	b.n	8005122 <_dtoa_r+0x622>
 8004fc0:	07e2      	lsls	r2, r4, #31
 8004fc2:	d505      	bpl.n	8004fd0 <_dtoa_r+0x4d0>
 8004fc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fc8:	f7fb fb16 	bl	80005f8 <__aeabi_dmul>
 8004fcc:	3601      	adds	r6, #1
 8004fce:	2301      	movs	r3, #1
 8004fd0:	1064      	asrs	r4, r4, #1
 8004fd2:	3508      	adds	r5, #8
 8004fd4:	e762      	b.n	8004e9c <_dtoa_r+0x39c>
 8004fd6:	2602      	movs	r6, #2
 8004fd8:	e765      	b.n	8004ea6 <_dtoa_r+0x3a6>
 8004fda:	9c08      	ldr	r4, [sp, #32]
 8004fdc:	46b8      	mov	r8, r7
 8004fde:	e784      	b.n	8004eea <_dtoa_r+0x3ea>
 8004fe0:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <_dtoa_r+0x580>)
 8004fe2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fec:	4454      	add	r4, sl
 8004fee:	2900      	cmp	r1, #0
 8004ff0:	d054      	beq.n	800509c <_dtoa_r+0x59c>
 8004ff2:	4929      	ldr	r1, [pc, #164]	@ (8005098 <_dtoa_r+0x598>)
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fb fc29 	bl	800084c <__aeabi_ddiv>
 8004ffa:	4633      	mov	r3, r6
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	f7fb f943 	bl	8000288 <__aeabi_dsub>
 8005002:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005006:	4656      	mov	r6, sl
 8005008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800500c:	f7fb fda4 	bl	8000b58 <__aeabi_d2iz>
 8005010:	4605      	mov	r5, r0
 8005012:	f7fb fa87 	bl	8000524 <__aeabi_i2d>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800501e:	f7fb f933 	bl	8000288 <__aeabi_dsub>
 8005022:	3530      	adds	r5, #48	@ 0x30
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800502c:	f806 5b01 	strb.w	r5, [r6], #1
 8005030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005034:	f7fb fd52 	bl	8000adc <__aeabi_dcmplt>
 8005038:	2800      	cmp	r0, #0
 800503a:	d172      	bne.n	8005122 <_dtoa_r+0x622>
 800503c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005040:	4911      	ldr	r1, [pc, #68]	@ (8005088 <_dtoa_r+0x588>)
 8005042:	2000      	movs	r0, #0
 8005044:	f7fb f920 	bl	8000288 <__aeabi_dsub>
 8005048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800504c:	f7fb fd46 	bl	8000adc <__aeabi_dcmplt>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 80b4 	bne.w	80051be <_dtoa_r+0x6be>
 8005056:	42a6      	cmp	r6, r4
 8005058:	f43f af70 	beq.w	8004f3c <_dtoa_r+0x43c>
 800505c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005060:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <_dtoa_r+0x58c>)
 8005062:	2200      	movs	r2, #0
 8005064:	f7fb fac8 	bl	80005f8 <__aeabi_dmul>
 8005068:	4b08      	ldr	r3, [pc, #32]	@ (800508c <_dtoa_r+0x58c>)
 800506a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800506e:	2200      	movs	r2, #0
 8005070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005074:	f7fb fac0 	bl	80005f8 <__aeabi_dmul>
 8005078:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800507c:	e7c4      	b.n	8005008 <_dtoa_r+0x508>
 800507e:	bf00      	nop
 8005080:	08006b50 	.word	0x08006b50
 8005084:	08006b28 	.word	0x08006b28
 8005088:	3ff00000 	.word	0x3ff00000
 800508c:	40240000 	.word	0x40240000
 8005090:	401c0000 	.word	0x401c0000
 8005094:	40140000 	.word	0x40140000
 8005098:	3fe00000 	.word	0x3fe00000
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	f7fb faaa 	bl	80005f8 <__aeabi_dmul>
 80050a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80050aa:	4656      	mov	r6, sl
 80050ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b0:	f7fb fd52 	bl	8000b58 <__aeabi_d2iz>
 80050b4:	4605      	mov	r5, r0
 80050b6:	f7fb fa35 	bl	8000524 <__aeabi_i2d>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c2:	f7fb f8e1 	bl	8000288 <__aeabi_dsub>
 80050c6:	3530      	adds	r5, #48	@ 0x30
 80050c8:	f806 5b01 	strb.w	r5, [r6], #1
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	d124      	bne.n	8005126 <_dtoa_r+0x626>
 80050dc:	4baf      	ldr	r3, [pc, #700]	@ (800539c <_dtoa_r+0x89c>)
 80050de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050e2:	f7fb f8d3 	bl	800028c <__adddf3>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ee:	f7fb fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d163      	bne.n	80051be <_dtoa_r+0x6be>
 80050f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050fa:	49a8      	ldr	r1, [pc, #672]	@ (800539c <_dtoa_r+0x89c>)
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fb f8c3 	bl	8000288 <__aeabi_dsub>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800510a:	f7fb fce7 	bl	8000adc <__aeabi_dcmplt>
 800510e:	2800      	cmp	r0, #0
 8005110:	f43f af14 	beq.w	8004f3c <_dtoa_r+0x43c>
 8005114:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005116:	1e73      	subs	r3, r6, #1
 8005118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800511a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800511e:	2b30      	cmp	r3, #48	@ 0x30
 8005120:	d0f8      	beq.n	8005114 <_dtoa_r+0x614>
 8005122:	4647      	mov	r7, r8
 8005124:	e03b      	b.n	800519e <_dtoa_r+0x69e>
 8005126:	4b9e      	ldr	r3, [pc, #632]	@ (80053a0 <_dtoa_r+0x8a0>)
 8005128:	f7fb fa66 	bl	80005f8 <__aeabi_dmul>
 800512c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005130:	e7bc      	b.n	80050ac <_dtoa_r+0x5ac>
 8005132:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005136:	4656      	mov	r6, sl
 8005138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb fb84 	bl	800084c <__aeabi_ddiv>
 8005144:	f7fb fd08 	bl	8000b58 <__aeabi_d2iz>
 8005148:	4680      	mov	r8, r0
 800514a:	f7fb f9eb 	bl	8000524 <__aeabi_i2d>
 800514e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005152:	f7fb fa51 	bl	80005f8 <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005162:	f7fb f891 	bl	8000288 <__aeabi_dsub>
 8005166:	f806 4b01 	strb.w	r4, [r6], #1
 800516a:	9d08      	ldr	r5, [sp, #32]
 800516c:	eba6 040a 	sub.w	r4, r6, sl
 8005170:	42a5      	cmp	r5, r4
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	d133      	bne.n	80051e0 <_dtoa_r+0x6e0>
 8005178:	f7fb f888 	bl	800028c <__adddf3>
 800517c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005180:	4604      	mov	r4, r0
 8005182:	460d      	mov	r5, r1
 8005184:	f7fb fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8005188:	b9c0      	cbnz	r0, 80051bc <_dtoa_r+0x6bc>
 800518a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	f7fb fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8005196:	b110      	cbz	r0, 800519e <_dtoa_r+0x69e>
 8005198:	f018 0f01 	tst.w	r8, #1
 800519c:	d10e      	bne.n	80051bc <_dtoa_r+0x6bc>
 800519e:	9903      	ldr	r1, [sp, #12]
 80051a0:	4648      	mov	r0, r9
 80051a2:	f000 fbbd 	bl	8005920 <_Bfree>
 80051a6:	2300      	movs	r3, #0
 80051a8:	7033      	strb	r3, [r6, #0]
 80051aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051ac:	3701      	adds	r7, #1
 80051ae:	601f      	str	r7, [r3, #0]
 80051b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 824b 	beq.w	800564e <_dtoa_r+0xb4e>
 80051b8:	601e      	str	r6, [r3, #0]
 80051ba:	e248      	b.n	800564e <_dtoa_r+0xb4e>
 80051bc:	46b8      	mov	r8, r7
 80051be:	4633      	mov	r3, r6
 80051c0:	461e      	mov	r6, r3
 80051c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051c6:	2a39      	cmp	r2, #57	@ 0x39
 80051c8:	d106      	bne.n	80051d8 <_dtoa_r+0x6d8>
 80051ca:	459a      	cmp	sl, r3
 80051cc:	d1f8      	bne.n	80051c0 <_dtoa_r+0x6c0>
 80051ce:	2230      	movs	r2, #48	@ 0x30
 80051d0:	f108 0801 	add.w	r8, r8, #1
 80051d4:	f88a 2000 	strb.w	r2, [sl]
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	3201      	adds	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e7a0      	b.n	8005122 <_dtoa_r+0x622>
 80051e0:	4b6f      	ldr	r3, [pc, #444]	@ (80053a0 <_dtoa_r+0x8a0>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	f7fb fa08 	bl	80005f8 <__aeabi_dmul>
 80051e8:	2200      	movs	r2, #0
 80051ea:	2300      	movs	r3, #0
 80051ec:	4604      	mov	r4, r0
 80051ee:	460d      	mov	r5, r1
 80051f0:	f7fb fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d09f      	beq.n	8005138 <_dtoa_r+0x638>
 80051f8:	e7d1      	b.n	800519e <_dtoa_r+0x69e>
 80051fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	f000 80ea 	beq.w	80053d6 <_dtoa_r+0x8d6>
 8005202:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005204:	2a01      	cmp	r2, #1
 8005206:	f300 80cd 	bgt.w	80053a4 <_dtoa_r+0x8a4>
 800520a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800520c:	2a00      	cmp	r2, #0
 800520e:	f000 80c1 	beq.w	8005394 <_dtoa_r+0x894>
 8005212:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005216:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005218:	9e04      	ldr	r6, [sp, #16]
 800521a:	9a04      	ldr	r2, [sp, #16]
 800521c:	441a      	add	r2, r3
 800521e:	9204      	str	r2, [sp, #16]
 8005220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005222:	2101      	movs	r1, #1
 8005224:	441a      	add	r2, r3
 8005226:	4648      	mov	r0, r9
 8005228:	9209      	str	r2, [sp, #36]	@ 0x24
 800522a:	f000 fc2d 	bl	8005a88 <__i2b>
 800522e:	4605      	mov	r5, r0
 8005230:	b166      	cbz	r6, 800524c <_dtoa_r+0x74c>
 8005232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	dd09      	ble.n	800524c <_dtoa_r+0x74c>
 8005238:	42b3      	cmp	r3, r6
 800523a:	9a04      	ldr	r2, [sp, #16]
 800523c:	bfa8      	it	ge
 800523e:	4633      	movge	r3, r6
 8005240:	1ad2      	subs	r2, r2, r3
 8005242:	9204      	str	r2, [sp, #16]
 8005244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005246:	1af6      	subs	r6, r6, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	9309      	str	r3, [sp, #36]	@ 0x24
 800524c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800524e:	b30b      	cbz	r3, 8005294 <_dtoa_r+0x794>
 8005250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80c6 	beq.w	80053e4 <_dtoa_r+0x8e4>
 8005258:	2c00      	cmp	r4, #0
 800525a:	f000 80c0 	beq.w	80053de <_dtoa_r+0x8de>
 800525e:	4629      	mov	r1, r5
 8005260:	4622      	mov	r2, r4
 8005262:	4648      	mov	r0, r9
 8005264:	f000 fcc8 	bl	8005bf8 <__pow5mult>
 8005268:	9a03      	ldr	r2, [sp, #12]
 800526a:	4601      	mov	r1, r0
 800526c:	4605      	mov	r5, r0
 800526e:	4648      	mov	r0, r9
 8005270:	f000 fc20 	bl	8005ab4 <__multiply>
 8005274:	9903      	ldr	r1, [sp, #12]
 8005276:	4680      	mov	r8, r0
 8005278:	4648      	mov	r0, r9
 800527a:	f000 fb51 	bl	8005920 <_Bfree>
 800527e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005280:	1b1b      	subs	r3, r3, r4
 8005282:	930a      	str	r3, [sp, #40]	@ 0x28
 8005284:	f000 80b1 	beq.w	80053ea <_dtoa_r+0x8ea>
 8005288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800528a:	4641      	mov	r1, r8
 800528c:	4648      	mov	r0, r9
 800528e:	f000 fcb3 	bl	8005bf8 <__pow5mult>
 8005292:	9003      	str	r0, [sp, #12]
 8005294:	2101      	movs	r1, #1
 8005296:	4648      	mov	r0, r9
 8005298:	f000 fbf6 	bl	8005a88 <__i2b>
 800529c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800529e:	4604      	mov	r4, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 81d8 	beq.w	8005656 <_dtoa_r+0xb56>
 80052a6:	461a      	mov	r2, r3
 80052a8:	4601      	mov	r1, r0
 80052aa:	4648      	mov	r0, r9
 80052ac:	f000 fca4 	bl	8005bf8 <__pow5mult>
 80052b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	4604      	mov	r4, r0
 80052b6:	f300 809f 	bgt.w	80053f8 <_dtoa_r+0x8f8>
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8097 	bne.w	80053f0 <_dtoa_r+0x8f0>
 80052c2:	9b07      	ldr	r3, [sp, #28]
 80052c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f040 8093 	bne.w	80053f4 <_dtoa_r+0x8f4>
 80052ce:	9b07      	ldr	r3, [sp, #28]
 80052d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052d4:	0d1b      	lsrs	r3, r3, #20
 80052d6:	051b      	lsls	r3, r3, #20
 80052d8:	b133      	cbz	r3, 80052e8 <_dtoa_r+0x7e8>
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	3301      	adds	r3, #1
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052e6:	2301      	movs	r3, #1
 80052e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 81b8 	beq.w	8005662 <_dtoa_r+0xb62>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052f8:	6918      	ldr	r0, [r3, #16]
 80052fa:	f000 fb79 	bl	80059f0 <__hi0bits>
 80052fe:	f1c0 0020 	rsb	r0, r0, #32
 8005302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005304:	4418      	add	r0, r3
 8005306:	f010 001f 	ands.w	r0, r0, #31
 800530a:	f000 8082 	beq.w	8005412 <_dtoa_r+0x912>
 800530e:	f1c0 0320 	rsb	r3, r0, #32
 8005312:	2b04      	cmp	r3, #4
 8005314:	dd73      	ble.n	80053fe <_dtoa_r+0x8fe>
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	f1c0 001c 	rsb	r0, r0, #28
 800531c:	4403      	add	r3, r0
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005322:	4403      	add	r3, r0
 8005324:	4406      	add	r6, r0
 8005326:	9309      	str	r3, [sp, #36]	@ 0x24
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	dd05      	ble.n	800533a <_dtoa_r+0x83a>
 800532e:	9903      	ldr	r1, [sp, #12]
 8005330:	461a      	mov	r2, r3
 8005332:	4648      	mov	r0, r9
 8005334:	f000 fcba 	bl	8005cac <__lshift>
 8005338:	9003      	str	r0, [sp, #12]
 800533a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	dd05      	ble.n	800534c <_dtoa_r+0x84c>
 8005340:	4621      	mov	r1, r4
 8005342:	461a      	mov	r2, r3
 8005344:	4648      	mov	r0, r9
 8005346:	f000 fcb1 	bl	8005cac <__lshift>
 800534a:	4604      	mov	r4, r0
 800534c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d061      	beq.n	8005416 <_dtoa_r+0x916>
 8005352:	9803      	ldr	r0, [sp, #12]
 8005354:	4621      	mov	r1, r4
 8005356:	f000 fd15 	bl	8005d84 <__mcmp>
 800535a:	2800      	cmp	r0, #0
 800535c:	da5b      	bge.n	8005416 <_dtoa_r+0x916>
 800535e:	2300      	movs	r3, #0
 8005360:	9903      	ldr	r1, [sp, #12]
 8005362:	220a      	movs	r2, #10
 8005364:	4648      	mov	r0, r9
 8005366:	f000 fafd 	bl	8005964 <__multadd>
 800536a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800536c:	9003      	str	r0, [sp, #12]
 800536e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8177 	beq.w	8005666 <_dtoa_r+0xb66>
 8005378:	4629      	mov	r1, r5
 800537a:	2300      	movs	r3, #0
 800537c:	220a      	movs	r2, #10
 800537e:	4648      	mov	r0, r9
 8005380:	f000 faf0 	bl	8005964 <__multadd>
 8005384:	f1bb 0f00 	cmp.w	fp, #0
 8005388:	4605      	mov	r5, r0
 800538a:	dc6f      	bgt.n	800546c <_dtoa_r+0x96c>
 800538c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800538e:	2b02      	cmp	r3, #2
 8005390:	dc49      	bgt.n	8005426 <_dtoa_r+0x926>
 8005392:	e06b      	b.n	800546c <_dtoa_r+0x96c>
 8005394:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800539a:	e73c      	b.n	8005216 <_dtoa_r+0x716>
 800539c:	3fe00000 	.word	0x3fe00000
 80053a0:	40240000 	.word	0x40240000
 80053a4:	9b08      	ldr	r3, [sp, #32]
 80053a6:	1e5c      	subs	r4, r3, #1
 80053a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	db09      	blt.n	80053c2 <_dtoa_r+0x8c2>
 80053ae:	1b1c      	subs	r4, r3, r4
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f6bf af30 	bge.w	8005218 <_dtoa_r+0x718>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	9a08      	ldr	r2, [sp, #32]
 80053bc:	1a9e      	subs	r6, r3, r2
 80053be:	2300      	movs	r3, #0
 80053c0:	e72b      	b.n	800521a <_dtoa_r+0x71a>
 80053c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80053c8:	1ae3      	subs	r3, r4, r3
 80053ca:	441a      	add	r2, r3
 80053cc:	9e04      	ldr	r6, [sp, #16]
 80053ce:	9b08      	ldr	r3, [sp, #32]
 80053d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80053d2:	2400      	movs	r4, #0
 80053d4:	e721      	b.n	800521a <_dtoa_r+0x71a>
 80053d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053d8:	9e04      	ldr	r6, [sp, #16]
 80053da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80053dc:	e728      	b.n	8005230 <_dtoa_r+0x730>
 80053de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053e2:	e751      	b.n	8005288 <_dtoa_r+0x788>
 80053e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053e6:	9903      	ldr	r1, [sp, #12]
 80053e8:	e750      	b.n	800528c <_dtoa_r+0x78c>
 80053ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ee:	e751      	b.n	8005294 <_dtoa_r+0x794>
 80053f0:	2300      	movs	r3, #0
 80053f2:	e779      	b.n	80052e8 <_dtoa_r+0x7e8>
 80053f4:	9b06      	ldr	r3, [sp, #24]
 80053f6:	e777      	b.n	80052e8 <_dtoa_r+0x7e8>
 80053f8:	2300      	movs	r3, #0
 80053fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80053fc:	e779      	b.n	80052f2 <_dtoa_r+0x7f2>
 80053fe:	d093      	beq.n	8005328 <_dtoa_r+0x828>
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	331c      	adds	r3, #28
 8005404:	441a      	add	r2, r3
 8005406:	9204      	str	r2, [sp, #16]
 8005408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800540a:	441a      	add	r2, r3
 800540c:	441e      	add	r6, r3
 800540e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005410:	e78a      	b.n	8005328 <_dtoa_r+0x828>
 8005412:	4603      	mov	r3, r0
 8005414:	e7f4      	b.n	8005400 <_dtoa_r+0x900>
 8005416:	9b08      	ldr	r3, [sp, #32]
 8005418:	2b00      	cmp	r3, #0
 800541a:	46b8      	mov	r8, r7
 800541c:	dc20      	bgt.n	8005460 <_dtoa_r+0x960>
 800541e:	469b      	mov	fp, r3
 8005420:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005422:	2b02      	cmp	r3, #2
 8005424:	dd1e      	ble.n	8005464 <_dtoa_r+0x964>
 8005426:	f1bb 0f00 	cmp.w	fp, #0
 800542a:	f47f adb1 	bne.w	8004f90 <_dtoa_r+0x490>
 800542e:	4621      	mov	r1, r4
 8005430:	465b      	mov	r3, fp
 8005432:	2205      	movs	r2, #5
 8005434:	4648      	mov	r0, r9
 8005436:	f000 fa95 	bl	8005964 <__multadd>
 800543a:	4601      	mov	r1, r0
 800543c:	4604      	mov	r4, r0
 800543e:	9803      	ldr	r0, [sp, #12]
 8005440:	f000 fca0 	bl	8005d84 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	f77f ada3 	ble.w	8004f90 <_dtoa_r+0x490>
 800544a:	4656      	mov	r6, sl
 800544c:	2331      	movs	r3, #49	@ 0x31
 800544e:	f806 3b01 	strb.w	r3, [r6], #1
 8005452:	f108 0801 	add.w	r8, r8, #1
 8005456:	e59f      	b.n	8004f98 <_dtoa_r+0x498>
 8005458:	9c08      	ldr	r4, [sp, #32]
 800545a:	46b8      	mov	r8, r7
 800545c:	4625      	mov	r5, r4
 800545e:	e7f4      	b.n	800544a <_dtoa_r+0x94a>
 8005460:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8101 	beq.w	800566e <_dtoa_r+0xb6e>
 800546c:	2e00      	cmp	r6, #0
 800546e:	dd05      	ble.n	800547c <_dtoa_r+0x97c>
 8005470:	4629      	mov	r1, r5
 8005472:	4632      	mov	r2, r6
 8005474:	4648      	mov	r0, r9
 8005476:	f000 fc19 	bl	8005cac <__lshift>
 800547a:	4605      	mov	r5, r0
 800547c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05c      	beq.n	800553c <_dtoa_r+0xa3c>
 8005482:	6869      	ldr	r1, [r5, #4]
 8005484:	4648      	mov	r0, r9
 8005486:	f000 fa0b 	bl	80058a0 <_Balloc>
 800548a:	4606      	mov	r6, r0
 800548c:	b928      	cbnz	r0, 800549a <_dtoa_r+0x99a>
 800548e:	4b82      	ldr	r3, [pc, #520]	@ (8005698 <_dtoa_r+0xb98>)
 8005490:	4602      	mov	r2, r0
 8005492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005496:	f7ff bb47 	b.w	8004b28 <_dtoa_r+0x28>
 800549a:	692a      	ldr	r2, [r5, #16]
 800549c:	3202      	adds	r2, #2
 800549e:	0092      	lsls	r2, r2, #2
 80054a0:	f105 010c 	add.w	r1, r5, #12
 80054a4:	300c      	adds	r0, #12
 80054a6:	f001 f821 	bl	80064ec <memcpy>
 80054aa:	2201      	movs	r2, #1
 80054ac:	4631      	mov	r1, r6
 80054ae:	4648      	mov	r0, r9
 80054b0:	f000 fbfc 	bl	8005cac <__lshift>
 80054b4:	f10a 0301 	add.w	r3, sl, #1
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	eb0a 030b 	add.w	r3, sl, fp
 80054be:	930a      	str	r3, [sp, #40]	@ 0x28
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	462f      	mov	r7, r5
 80054c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ca:	4605      	mov	r5, r0
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	9803      	ldr	r0, [sp, #12]
 80054d0:	4621      	mov	r1, r4
 80054d2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80054d6:	f7ff fa8a 	bl	80049ee <quorem>
 80054da:	4603      	mov	r3, r0
 80054dc:	3330      	adds	r3, #48	@ 0x30
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	4639      	mov	r1, r7
 80054e2:	9803      	ldr	r0, [sp, #12]
 80054e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054e6:	f000 fc4d 	bl	8005d84 <__mcmp>
 80054ea:	462a      	mov	r2, r5
 80054ec:	9008      	str	r0, [sp, #32]
 80054ee:	4621      	mov	r1, r4
 80054f0:	4648      	mov	r0, r9
 80054f2:	f000 fc63 	bl	8005dbc <__mdiff>
 80054f6:	68c2      	ldr	r2, [r0, #12]
 80054f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054fa:	4606      	mov	r6, r0
 80054fc:	bb02      	cbnz	r2, 8005540 <_dtoa_r+0xa40>
 80054fe:	4601      	mov	r1, r0
 8005500:	9803      	ldr	r0, [sp, #12]
 8005502:	f000 fc3f 	bl	8005d84 <__mcmp>
 8005506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005508:	4602      	mov	r2, r0
 800550a:	4631      	mov	r1, r6
 800550c:	4648      	mov	r0, r9
 800550e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005512:	f000 fa05 	bl	8005920 <_Bfree>
 8005516:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005518:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800551a:	9e04      	ldr	r6, [sp, #16]
 800551c:	ea42 0103 	orr.w	r1, r2, r3
 8005520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005522:	4319      	orrs	r1, r3
 8005524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005526:	d10d      	bne.n	8005544 <_dtoa_r+0xa44>
 8005528:	2b39      	cmp	r3, #57	@ 0x39
 800552a:	d027      	beq.n	800557c <_dtoa_r+0xa7c>
 800552c:	9a08      	ldr	r2, [sp, #32]
 800552e:	2a00      	cmp	r2, #0
 8005530:	dd01      	ble.n	8005536 <_dtoa_r+0xa36>
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	3331      	adds	r3, #49	@ 0x31
 8005536:	f88b 3000 	strb.w	r3, [fp]
 800553a:	e52e      	b.n	8004f9a <_dtoa_r+0x49a>
 800553c:	4628      	mov	r0, r5
 800553e:	e7b9      	b.n	80054b4 <_dtoa_r+0x9b4>
 8005540:	2201      	movs	r2, #1
 8005542:	e7e2      	b.n	800550a <_dtoa_r+0xa0a>
 8005544:	9908      	ldr	r1, [sp, #32]
 8005546:	2900      	cmp	r1, #0
 8005548:	db04      	blt.n	8005554 <_dtoa_r+0xa54>
 800554a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800554c:	4301      	orrs	r1, r0
 800554e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005550:	4301      	orrs	r1, r0
 8005552:	d120      	bne.n	8005596 <_dtoa_r+0xa96>
 8005554:	2a00      	cmp	r2, #0
 8005556:	ddee      	ble.n	8005536 <_dtoa_r+0xa36>
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	2201      	movs	r2, #1
 800555e:	4648      	mov	r0, r9
 8005560:	f000 fba4 	bl	8005cac <__lshift>
 8005564:	4621      	mov	r1, r4
 8005566:	9003      	str	r0, [sp, #12]
 8005568:	f000 fc0c 	bl	8005d84 <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	dc02      	bgt.n	8005578 <_dtoa_r+0xa78>
 8005572:	d1e0      	bne.n	8005536 <_dtoa_r+0xa36>
 8005574:	07da      	lsls	r2, r3, #31
 8005576:	d5de      	bpl.n	8005536 <_dtoa_r+0xa36>
 8005578:	2b39      	cmp	r3, #57	@ 0x39
 800557a:	d1da      	bne.n	8005532 <_dtoa_r+0xa32>
 800557c:	2339      	movs	r3, #57	@ 0x39
 800557e:	f88b 3000 	strb.w	r3, [fp]
 8005582:	4633      	mov	r3, r6
 8005584:	461e      	mov	r6, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800558c:	2a39      	cmp	r2, #57	@ 0x39
 800558e:	d04e      	beq.n	800562e <_dtoa_r+0xb2e>
 8005590:	3201      	adds	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e501      	b.n	8004f9a <_dtoa_r+0x49a>
 8005596:	2a00      	cmp	r2, #0
 8005598:	dd03      	ble.n	80055a2 <_dtoa_r+0xaa2>
 800559a:	2b39      	cmp	r3, #57	@ 0x39
 800559c:	d0ee      	beq.n	800557c <_dtoa_r+0xa7c>
 800559e:	3301      	adds	r3, #1
 80055a0:	e7c9      	b.n	8005536 <_dtoa_r+0xa36>
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055aa:	428a      	cmp	r2, r1
 80055ac:	d028      	beq.n	8005600 <_dtoa_r+0xb00>
 80055ae:	9903      	ldr	r1, [sp, #12]
 80055b0:	2300      	movs	r3, #0
 80055b2:	220a      	movs	r2, #10
 80055b4:	4648      	mov	r0, r9
 80055b6:	f000 f9d5 	bl	8005964 <__multadd>
 80055ba:	42af      	cmp	r7, r5
 80055bc:	9003      	str	r0, [sp, #12]
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	f04f 020a 	mov.w	r2, #10
 80055c6:	4639      	mov	r1, r7
 80055c8:	4648      	mov	r0, r9
 80055ca:	d107      	bne.n	80055dc <_dtoa_r+0xadc>
 80055cc:	f000 f9ca 	bl	8005964 <__multadd>
 80055d0:	4607      	mov	r7, r0
 80055d2:	4605      	mov	r5, r0
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	e777      	b.n	80054cc <_dtoa_r+0x9cc>
 80055dc:	f000 f9c2 	bl	8005964 <__multadd>
 80055e0:	4629      	mov	r1, r5
 80055e2:	4607      	mov	r7, r0
 80055e4:	2300      	movs	r3, #0
 80055e6:	220a      	movs	r2, #10
 80055e8:	4648      	mov	r0, r9
 80055ea:	f000 f9bb 	bl	8005964 <__multadd>
 80055ee:	4605      	mov	r5, r0
 80055f0:	e7f0      	b.n	80055d4 <_dtoa_r+0xad4>
 80055f2:	f1bb 0f00 	cmp.w	fp, #0
 80055f6:	bfcc      	ite	gt
 80055f8:	465e      	movgt	r6, fp
 80055fa:	2601      	movle	r6, #1
 80055fc:	4456      	add	r6, sl
 80055fe:	2700      	movs	r7, #0
 8005600:	9903      	ldr	r1, [sp, #12]
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	2201      	movs	r2, #1
 8005606:	4648      	mov	r0, r9
 8005608:	f000 fb50 	bl	8005cac <__lshift>
 800560c:	4621      	mov	r1, r4
 800560e:	9003      	str	r0, [sp, #12]
 8005610:	f000 fbb8 	bl	8005d84 <__mcmp>
 8005614:	2800      	cmp	r0, #0
 8005616:	dcb4      	bgt.n	8005582 <_dtoa_r+0xa82>
 8005618:	d102      	bne.n	8005620 <_dtoa_r+0xb20>
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	07db      	lsls	r3, r3, #31
 800561e:	d4b0      	bmi.n	8005582 <_dtoa_r+0xa82>
 8005620:	4633      	mov	r3, r6
 8005622:	461e      	mov	r6, r3
 8005624:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005628:	2a30      	cmp	r2, #48	@ 0x30
 800562a:	d0fa      	beq.n	8005622 <_dtoa_r+0xb22>
 800562c:	e4b5      	b.n	8004f9a <_dtoa_r+0x49a>
 800562e:	459a      	cmp	sl, r3
 8005630:	d1a8      	bne.n	8005584 <_dtoa_r+0xa84>
 8005632:	2331      	movs	r3, #49	@ 0x31
 8005634:	f108 0801 	add.w	r8, r8, #1
 8005638:	f88a 3000 	strb.w	r3, [sl]
 800563c:	e4ad      	b.n	8004f9a <_dtoa_r+0x49a>
 800563e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005640:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800569c <_dtoa_r+0xb9c>
 8005644:	b11b      	cbz	r3, 800564e <_dtoa_r+0xb4e>
 8005646:	f10a 0308 	add.w	r3, sl, #8
 800564a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4650      	mov	r0, sl
 8005650:	b017      	add	sp, #92	@ 0x5c
 8005652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005658:	2b01      	cmp	r3, #1
 800565a:	f77f ae2e 	ble.w	80052ba <_dtoa_r+0x7ba>
 800565e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005660:	930a      	str	r3, [sp, #40]	@ 0x28
 8005662:	2001      	movs	r0, #1
 8005664:	e64d      	b.n	8005302 <_dtoa_r+0x802>
 8005666:	f1bb 0f00 	cmp.w	fp, #0
 800566a:	f77f aed9 	ble.w	8005420 <_dtoa_r+0x920>
 800566e:	4656      	mov	r6, sl
 8005670:	9803      	ldr	r0, [sp, #12]
 8005672:	4621      	mov	r1, r4
 8005674:	f7ff f9bb 	bl	80049ee <quorem>
 8005678:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800567c:	f806 3b01 	strb.w	r3, [r6], #1
 8005680:	eba6 020a 	sub.w	r2, r6, sl
 8005684:	4593      	cmp	fp, r2
 8005686:	ddb4      	ble.n	80055f2 <_dtoa_r+0xaf2>
 8005688:	9903      	ldr	r1, [sp, #12]
 800568a:	2300      	movs	r3, #0
 800568c:	220a      	movs	r2, #10
 800568e:	4648      	mov	r0, r9
 8005690:	f000 f968 	bl	8005964 <__multadd>
 8005694:	9003      	str	r0, [sp, #12]
 8005696:	e7eb      	b.n	8005670 <_dtoa_r+0xb70>
 8005698:	08006a58 	.word	0x08006a58
 800569c:	080069dc 	.word	0x080069dc

080056a0 <_free_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4605      	mov	r5, r0
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d041      	beq.n	800572c <_free_r+0x8c>
 80056a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ac:	1f0c      	subs	r4, r1, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bfb8      	it	lt
 80056b2:	18e4      	addlt	r4, r4, r3
 80056b4:	f000 f8e8 	bl	8005888 <__malloc_lock>
 80056b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005730 <_free_r+0x90>)
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	b933      	cbnz	r3, 80056cc <_free_r+0x2c>
 80056be:	6063      	str	r3, [r4, #4]
 80056c0:	6014      	str	r4, [r2, #0]
 80056c2:	4628      	mov	r0, r5
 80056c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056c8:	f000 b8e4 	b.w	8005894 <__malloc_unlock>
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d908      	bls.n	80056e2 <_free_r+0x42>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	1821      	adds	r1, r4, r0
 80056d4:	428b      	cmp	r3, r1
 80056d6:	bf01      	itttt	eq
 80056d8:	6819      	ldreq	r1, [r3, #0]
 80056da:	685b      	ldreq	r3, [r3, #4]
 80056dc:	1809      	addeq	r1, r1, r0
 80056de:	6021      	streq	r1, [r4, #0]
 80056e0:	e7ed      	b.n	80056be <_free_r+0x1e>
 80056e2:	461a      	mov	r2, r3
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	b10b      	cbz	r3, 80056ec <_free_r+0x4c>
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d9fa      	bls.n	80056e2 <_free_r+0x42>
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	1850      	adds	r0, r2, r1
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d10b      	bne.n	800570c <_free_r+0x6c>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	4401      	add	r1, r0
 80056f8:	1850      	adds	r0, r2, r1
 80056fa:	4283      	cmp	r3, r0
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	d1e0      	bne.n	80056c2 <_free_r+0x22>
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	6053      	str	r3, [r2, #4]
 8005706:	4408      	add	r0, r1
 8005708:	6010      	str	r0, [r2, #0]
 800570a:	e7da      	b.n	80056c2 <_free_r+0x22>
 800570c:	d902      	bls.n	8005714 <_free_r+0x74>
 800570e:	230c      	movs	r3, #12
 8005710:	602b      	str	r3, [r5, #0]
 8005712:	e7d6      	b.n	80056c2 <_free_r+0x22>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	1821      	adds	r1, r4, r0
 8005718:	428b      	cmp	r3, r1
 800571a:	bf04      	itt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	bf04      	itt	eq
 8005724:	1809      	addeq	r1, r1, r0
 8005726:	6021      	streq	r1, [r4, #0]
 8005728:	6054      	str	r4, [r2, #4]
 800572a:	e7ca      	b.n	80056c2 <_free_r+0x22>
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	20000414 	.word	0x20000414

08005734 <malloc>:
 8005734:	4b02      	ldr	r3, [pc, #8]	@ (8005740 <malloc+0xc>)
 8005736:	4601      	mov	r1, r0
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	f000 b825 	b.w	8005788 <_malloc_r>
 800573e:	bf00      	nop
 8005740:	20000018 	.word	0x20000018

08005744 <sbrk_aligned>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4e0f      	ldr	r6, [pc, #60]	@ (8005784 <sbrk_aligned+0x40>)
 8005748:	460c      	mov	r4, r1
 800574a:	6831      	ldr	r1, [r6, #0]
 800574c:	4605      	mov	r5, r0
 800574e:	b911      	cbnz	r1, 8005756 <sbrk_aligned+0x12>
 8005750:	f000 febc 	bl	80064cc <_sbrk_r>
 8005754:	6030      	str	r0, [r6, #0]
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 feb7 	bl	80064cc <_sbrk_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d103      	bne.n	800576a <sbrk_aligned+0x26>
 8005762:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005766:	4620      	mov	r0, r4
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	1cc4      	adds	r4, r0, #3
 800576c:	f024 0403 	bic.w	r4, r4, #3
 8005770:	42a0      	cmp	r0, r4
 8005772:	d0f8      	beq.n	8005766 <sbrk_aligned+0x22>
 8005774:	1a21      	subs	r1, r4, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fea8 	bl	80064cc <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d1f2      	bne.n	8005766 <sbrk_aligned+0x22>
 8005780:	e7ef      	b.n	8005762 <sbrk_aligned+0x1e>
 8005782:	bf00      	nop
 8005784:	20000410 	.word	0x20000410

08005788 <_malloc_r>:
 8005788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800578c:	1ccd      	adds	r5, r1, #3
 800578e:	f025 0503 	bic.w	r5, r5, #3
 8005792:	3508      	adds	r5, #8
 8005794:	2d0c      	cmp	r5, #12
 8005796:	bf38      	it	cc
 8005798:	250c      	movcc	r5, #12
 800579a:	2d00      	cmp	r5, #0
 800579c:	4606      	mov	r6, r0
 800579e:	db01      	blt.n	80057a4 <_malloc_r+0x1c>
 80057a0:	42a9      	cmp	r1, r5
 80057a2:	d904      	bls.n	80057ae <_malloc_r+0x26>
 80057a4:	230c      	movs	r3, #12
 80057a6:	6033      	str	r3, [r6, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005884 <_malloc_r+0xfc>
 80057b2:	f000 f869 	bl	8005888 <__malloc_lock>
 80057b6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ba:	461c      	mov	r4, r3
 80057bc:	bb44      	cbnz	r4, 8005810 <_malloc_r+0x88>
 80057be:	4629      	mov	r1, r5
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff ffbf 	bl	8005744 <sbrk_aligned>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	4604      	mov	r4, r0
 80057ca:	d158      	bne.n	800587e <_malloc_r+0xf6>
 80057cc:	f8d8 4000 	ldr.w	r4, [r8]
 80057d0:	4627      	mov	r7, r4
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	d143      	bne.n	800585e <_malloc_r+0xd6>
 80057d6:	2c00      	cmp	r4, #0
 80057d8:	d04b      	beq.n	8005872 <_malloc_r+0xea>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	4639      	mov	r1, r7
 80057de:	4630      	mov	r0, r6
 80057e0:	eb04 0903 	add.w	r9, r4, r3
 80057e4:	f000 fe72 	bl	80064cc <_sbrk_r>
 80057e8:	4581      	cmp	r9, r0
 80057ea:	d142      	bne.n	8005872 <_malloc_r+0xea>
 80057ec:	6821      	ldr	r1, [r4, #0]
 80057ee:	1a6d      	subs	r5, r5, r1
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff ffa6 	bl	8005744 <sbrk_aligned>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d03a      	beq.n	8005872 <_malloc_r+0xea>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	442b      	add	r3, r5
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	f8d8 3000 	ldr.w	r3, [r8]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	bb62      	cbnz	r2, 8005864 <_malloc_r+0xdc>
 800580a:	f8c8 7000 	str.w	r7, [r8]
 800580e:	e00f      	b.n	8005830 <_malloc_r+0xa8>
 8005810:	6822      	ldr	r2, [r4, #0]
 8005812:	1b52      	subs	r2, r2, r5
 8005814:	d420      	bmi.n	8005858 <_malloc_r+0xd0>
 8005816:	2a0b      	cmp	r2, #11
 8005818:	d917      	bls.n	800584a <_malloc_r+0xc2>
 800581a:	1961      	adds	r1, r4, r5
 800581c:	42a3      	cmp	r3, r4
 800581e:	6025      	str	r5, [r4, #0]
 8005820:	bf18      	it	ne
 8005822:	6059      	strne	r1, [r3, #4]
 8005824:	6863      	ldr	r3, [r4, #4]
 8005826:	bf08      	it	eq
 8005828:	f8c8 1000 	streq.w	r1, [r8]
 800582c:	5162      	str	r2, [r4, r5]
 800582e:	604b      	str	r3, [r1, #4]
 8005830:	4630      	mov	r0, r6
 8005832:	f000 f82f 	bl	8005894 <__malloc_unlock>
 8005836:	f104 000b 	add.w	r0, r4, #11
 800583a:	1d23      	adds	r3, r4, #4
 800583c:	f020 0007 	bic.w	r0, r0, #7
 8005840:	1ac2      	subs	r2, r0, r3
 8005842:	bf1c      	itt	ne
 8005844:	1a1b      	subne	r3, r3, r0
 8005846:	50a3      	strne	r3, [r4, r2]
 8005848:	e7af      	b.n	80057aa <_malloc_r+0x22>
 800584a:	6862      	ldr	r2, [r4, #4]
 800584c:	42a3      	cmp	r3, r4
 800584e:	bf0c      	ite	eq
 8005850:	f8c8 2000 	streq.w	r2, [r8]
 8005854:	605a      	strne	r2, [r3, #4]
 8005856:	e7eb      	b.n	8005830 <_malloc_r+0xa8>
 8005858:	4623      	mov	r3, r4
 800585a:	6864      	ldr	r4, [r4, #4]
 800585c:	e7ae      	b.n	80057bc <_malloc_r+0x34>
 800585e:	463c      	mov	r4, r7
 8005860:	687f      	ldr	r7, [r7, #4]
 8005862:	e7b6      	b.n	80057d2 <_malloc_r+0x4a>
 8005864:	461a      	mov	r2, r3
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	42a3      	cmp	r3, r4
 800586a:	d1fb      	bne.n	8005864 <_malloc_r+0xdc>
 800586c:	2300      	movs	r3, #0
 800586e:	6053      	str	r3, [r2, #4]
 8005870:	e7de      	b.n	8005830 <_malloc_r+0xa8>
 8005872:	230c      	movs	r3, #12
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	4630      	mov	r0, r6
 8005878:	f000 f80c 	bl	8005894 <__malloc_unlock>
 800587c:	e794      	b.n	80057a8 <_malloc_r+0x20>
 800587e:	6005      	str	r5, [r0, #0]
 8005880:	e7d6      	b.n	8005830 <_malloc_r+0xa8>
 8005882:	bf00      	nop
 8005884:	20000414 	.word	0x20000414

08005888 <__malloc_lock>:
 8005888:	4801      	ldr	r0, [pc, #4]	@ (8005890 <__malloc_lock+0x8>)
 800588a:	f7ff b8ae 	b.w	80049ea <__retarget_lock_acquire_recursive>
 800588e:	bf00      	nop
 8005890:	2000040c 	.word	0x2000040c

08005894 <__malloc_unlock>:
 8005894:	4801      	ldr	r0, [pc, #4]	@ (800589c <__malloc_unlock+0x8>)
 8005896:	f7ff b8a9 	b.w	80049ec <__retarget_lock_release_recursive>
 800589a:	bf00      	nop
 800589c:	2000040c 	.word	0x2000040c

080058a0 <_Balloc>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	69c6      	ldr	r6, [r0, #28]
 80058a4:	4604      	mov	r4, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	b976      	cbnz	r6, 80058c8 <_Balloc+0x28>
 80058aa:	2010      	movs	r0, #16
 80058ac:	f7ff ff42 	bl	8005734 <malloc>
 80058b0:	4602      	mov	r2, r0
 80058b2:	61e0      	str	r0, [r4, #28]
 80058b4:	b920      	cbnz	r0, 80058c0 <_Balloc+0x20>
 80058b6:	4b18      	ldr	r3, [pc, #96]	@ (8005918 <_Balloc+0x78>)
 80058b8:	4818      	ldr	r0, [pc, #96]	@ (800591c <_Balloc+0x7c>)
 80058ba:	216b      	movs	r1, #107	@ 0x6b
 80058bc:	f000 fe24 	bl	8006508 <__assert_func>
 80058c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058c4:	6006      	str	r6, [r0, #0]
 80058c6:	60c6      	str	r6, [r0, #12]
 80058c8:	69e6      	ldr	r6, [r4, #28]
 80058ca:	68f3      	ldr	r3, [r6, #12]
 80058cc:	b183      	cbz	r3, 80058f0 <_Balloc+0x50>
 80058ce:	69e3      	ldr	r3, [r4, #28]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058d6:	b9b8      	cbnz	r0, 8005908 <_Balloc+0x68>
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f605 	lsl.w	r6, r1, r5
 80058de:	1d72      	adds	r2, r6, #5
 80058e0:	0092      	lsls	r2, r2, #2
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fe2e 	bl	8006544 <_calloc_r>
 80058e8:	b160      	cbz	r0, 8005904 <_Balloc+0x64>
 80058ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ee:	e00e      	b.n	800590e <_Balloc+0x6e>
 80058f0:	2221      	movs	r2, #33	@ 0x21
 80058f2:	2104      	movs	r1, #4
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 fe25 	bl	8006544 <_calloc_r>
 80058fa:	69e3      	ldr	r3, [r4, #28]
 80058fc:	60f0      	str	r0, [r6, #12]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e4      	bne.n	80058ce <_Balloc+0x2e>
 8005904:	2000      	movs	r0, #0
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	6802      	ldr	r2, [r0, #0]
 800590a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800590e:	2300      	movs	r3, #0
 8005910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005914:	e7f7      	b.n	8005906 <_Balloc+0x66>
 8005916:	bf00      	nop
 8005918:	080069e9 	.word	0x080069e9
 800591c:	08006a69 	.word	0x08006a69

08005920 <_Bfree>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	69c6      	ldr	r6, [r0, #28]
 8005924:	4605      	mov	r5, r0
 8005926:	460c      	mov	r4, r1
 8005928:	b976      	cbnz	r6, 8005948 <_Bfree+0x28>
 800592a:	2010      	movs	r0, #16
 800592c:	f7ff ff02 	bl	8005734 <malloc>
 8005930:	4602      	mov	r2, r0
 8005932:	61e8      	str	r0, [r5, #28]
 8005934:	b920      	cbnz	r0, 8005940 <_Bfree+0x20>
 8005936:	4b09      	ldr	r3, [pc, #36]	@ (800595c <_Bfree+0x3c>)
 8005938:	4809      	ldr	r0, [pc, #36]	@ (8005960 <_Bfree+0x40>)
 800593a:	218f      	movs	r1, #143	@ 0x8f
 800593c:	f000 fde4 	bl	8006508 <__assert_func>
 8005940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005944:	6006      	str	r6, [r0, #0]
 8005946:	60c6      	str	r6, [r0, #12]
 8005948:	b13c      	cbz	r4, 800595a <_Bfree+0x3a>
 800594a:	69eb      	ldr	r3, [r5, #28]
 800594c:	6862      	ldr	r2, [r4, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005954:	6021      	str	r1, [r4, #0]
 8005956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	080069e9 	.word	0x080069e9
 8005960:	08006a69 	.word	0x08006a69

08005964 <__multadd>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	690d      	ldr	r5, [r1, #16]
 800596a:	4607      	mov	r7, r0
 800596c:	460c      	mov	r4, r1
 800596e:	461e      	mov	r6, r3
 8005970:	f101 0c14 	add.w	ip, r1, #20
 8005974:	2000      	movs	r0, #0
 8005976:	f8dc 3000 	ldr.w	r3, [ip]
 800597a:	b299      	uxth	r1, r3
 800597c:	fb02 6101 	mla	r1, r2, r1, r6
 8005980:	0c1e      	lsrs	r6, r3, #16
 8005982:	0c0b      	lsrs	r3, r1, #16
 8005984:	fb02 3306 	mla	r3, r2, r6, r3
 8005988:	b289      	uxth	r1, r1
 800598a:	3001      	adds	r0, #1
 800598c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005990:	4285      	cmp	r5, r0
 8005992:	f84c 1b04 	str.w	r1, [ip], #4
 8005996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800599a:	dcec      	bgt.n	8005976 <__multadd+0x12>
 800599c:	b30e      	cbz	r6, 80059e2 <__multadd+0x7e>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dc19      	bgt.n	80059d8 <__multadd+0x74>
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4638      	mov	r0, r7
 80059a8:	3101      	adds	r1, #1
 80059aa:	f7ff ff79 	bl	80058a0 <_Balloc>
 80059ae:	4680      	mov	r8, r0
 80059b0:	b928      	cbnz	r0, 80059be <__multadd+0x5a>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <__multadd+0x84>)
 80059b6:	480d      	ldr	r0, [pc, #52]	@ (80059ec <__multadd+0x88>)
 80059b8:	21ba      	movs	r1, #186	@ 0xba
 80059ba:	f000 fda5 	bl	8006508 <__assert_func>
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	3202      	adds	r2, #2
 80059c2:	f104 010c 	add.w	r1, r4, #12
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	300c      	adds	r0, #12
 80059ca:	f000 fd8f 	bl	80064ec <memcpy>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ffa5 	bl	8005920 <_Bfree>
 80059d6:	4644      	mov	r4, r8
 80059d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059dc:	3501      	adds	r5, #1
 80059de:	615e      	str	r6, [r3, #20]
 80059e0:	6125      	str	r5, [r4, #16]
 80059e2:	4620      	mov	r0, r4
 80059e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e8:	08006a58 	.word	0x08006a58
 80059ec:	08006a69 	.word	0x08006a69

080059f0 <__hi0bits>:
 80059f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059f4:	4603      	mov	r3, r0
 80059f6:	bf36      	itet	cc
 80059f8:	0403      	lslcc	r3, r0, #16
 80059fa:	2000      	movcs	r0, #0
 80059fc:	2010      	movcc	r0, #16
 80059fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a02:	bf3c      	itt	cc
 8005a04:	021b      	lslcc	r3, r3, #8
 8005a06:	3008      	addcc	r0, #8
 8005a08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0c:	bf3c      	itt	cc
 8005a0e:	011b      	lslcc	r3, r3, #4
 8005a10:	3004      	addcc	r0, #4
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a16:	bf3c      	itt	cc
 8005a18:	009b      	lslcc	r3, r3, #2
 8005a1a:	3002      	addcc	r0, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db05      	blt.n	8005a2c <__hi0bits+0x3c>
 8005a20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a24:	f100 0001 	add.w	r0, r0, #1
 8005a28:	bf08      	it	eq
 8005a2a:	2020      	moveq	r0, #32
 8005a2c:	4770      	bx	lr

08005a2e <__lo0bits>:
 8005a2e:	6803      	ldr	r3, [r0, #0]
 8005a30:	4602      	mov	r2, r0
 8005a32:	f013 0007 	ands.w	r0, r3, #7
 8005a36:	d00b      	beq.n	8005a50 <__lo0bits+0x22>
 8005a38:	07d9      	lsls	r1, r3, #31
 8005a3a:	d421      	bmi.n	8005a80 <__lo0bits+0x52>
 8005a3c:	0798      	lsls	r0, r3, #30
 8005a3e:	bf49      	itett	mi
 8005a40:	085b      	lsrmi	r3, r3, #1
 8005a42:	089b      	lsrpl	r3, r3, #2
 8005a44:	2001      	movmi	r0, #1
 8005a46:	6013      	strmi	r3, [r2, #0]
 8005a48:	bf5c      	itt	pl
 8005a4a:	6013      	strpl	r3, [r2, #0]
 8005a4c:	2002      	movpl	r0, #2
 8005a4e:	4770      	bx	lr
 8005a50:	b299      	uxth	r1, r3
 8005a52:	b909      	cbnz	r1, 8005a58 <__lo0bits+0x2a>
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	2010      	movs	r0, #16
 8005a58:	b2d9      	uxtb	r1, r3
 8005a5a:	b909      	cbnz	r1, 8005a60 <__lo0bits+0x32>
 8005a5c:	3008      	adds	r0, #8
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	0719      	lsls	r1, r3, #28
 8005a62:	bf04      	itt	eq
 8005a64:	091b      	lsreq	r3, r3, #4
 8005a66:	3004      	addeq	r0, #4
 8005a68:	0799      	lsls	r1, r3, #30
 8005a6a:	bf04      	itt	eq
 8005a6c:	089b      	lsreq	r3, r3, #2
 8005a6e:	3002      	addeq	r0, #2
 8005a70:	07d9      	lsls	r1, r3, #31
 8005a72:	d403      	bmi.n	8005a7c <__lo0bits+0x4e>
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f100 0001 	add.w	r0, r0, #1
 8005a7a:	d003      	beq.n	8005a84 <__lo0bits+0x56>
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4770      	bx	lr
 8005a80:	2000      	movs	r0, #0
 8005a82:	4770      	bx	lr
 8005a84:	2020      	movs	r0, #32
 8005a86:	4770      	bx	lr

08005a88 <__i2b>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	f7ff ff07 	bl	80058a0 <_Balloc>
 8005a92:	4602      	mov	r2, r0
 8005a94:	b928      	cbnz	r0, 8005aa2 <__i2b+0x1a>
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <__i2b+0x24>)
 8005a98:	4805      	ldr	r0, [pc, #20]	@ (8005ab0 <__i2b+0x28>)
 8005a9a:	f240 1145 	movw	r1, #325	@ 0x145
 8005a9e:	f000 fd33 	bl	8006508 <__assert_func>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	6144      	str	r4, [r0, #20]
 8005aa6:	6103      	str	r3, [r0, #16]
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	bf00      	nop
 8005aac:	08006a58 	.word	0x08006a58
 8005ab0:	08006a69 	.word	0x08006a69

08005ab4 <__multiply>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	4617      	mov	r7, r2
 8005aba:	690a      	ldr	r2, [r1, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bfa8      	it	ge
 8005ac2:	463b      	movge	r3, r7
 8005ac4:	4689      	mov	r9, r1
 8005ac6:	bfa4      	itt	ge
 8005ac8:	460f      	movge	r7, r1
 8005aca:	4699      	movge	r9, r3
 8005acc:	693d      	ldr	r5, [r7, #16]
 8005ace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	eb05 060a 	add.w	r6, r5, sl
 8005ada:	42b3      	cmp	r3, r6
 8005adc:	b085      	sub	sp, #20
 8005ade:	bfb8      	it	lt
 8005ae0:	3101      	addlt	r1, #1
 8005ae2:	f7ff fedd 	bl	80058a0 <_Balloc>
 8005ae6:	b930      	cbnz	r0, 8005af6 <__multiply+0x42>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b41      	ldr	r3, [pc, #260]	@ (8005bf0 <__multiply+0x13c>)
 8005aec:	4841      	ldr	r0, [pc, #260]	@ (8005bf4 <__multiply+0x140>)
 8005aee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005af2:	f000 fd09 	bl	8006508 <__assert_func>
 8005af6:	f100 0414 	add.w	r4, r0, #20
 8005afa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005afe:	4623      	mov	r3, r4
 8005b00:	2200      	movs	r2, #0
 8005b02:	4573      	cmp	r3, lr
 8005b04:	d320      	bcc.n	8005b48 <__multiply+0x94>
 8005b06:	f107 0814 	add.w	r8, r7, #20
 8005b0a:	f109 0114 	add.w	r1, r9, #20
 8005b0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005b12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	1beb      	subs	r3, r5, r7
 8005b1a:	3b15      	subs	r3, #21
 8005b1c:	f023 0303 	bic.w	r3, r3, #3
 8005b20:	3304      	adds	r3, #4
 8005b22:	3715      	adds	r7, #21
 8005b24:	42bd      	cmp	r5, r7
 8005b26:	bf38      	it	cc
 8005b28:	2304      	movcc	r3, #4
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	9b02      	ldr	r3, [sp, #8]
 8005b2e:	9103      	str	r1, [sp, #12]
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d80c      	bhi.n	8005b4e <__multiply+0x9a>
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	dd03      	ble.n	8005b40 <__multiply+0x8c>
 8005b38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d055      	beq.n	8005bec <__multiply+0x138>
 8005b40:	6106      	str	r6, [r0, #16]
 8005b42:	b005      	add	sp, #20
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	f843 2b04 	str.w	r2, [r3], #4
 8005b4c:	e7d9      	b.n	8005b02 <__multiply+0x4e>
 8005b4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b52:	f1ba 0f00 	cmp.w	sl, #0
 8005b56:	d01f      	beq.n	8005b98 <__multiply+0xe4>
 8005b58:	46c4      	mov	ip, r8
 8005b5a:	46a1      	mov	r9, r4
 8005b5c:	2700      	movs	r7, #0
 8005b5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b62:	f8d9 3000 	ldr.w	r3, [r9]
 8005b66:	fa1f fb82 	uxth.w	fp, r2
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b70:	443b      	add	r3, r7
 8005b72:	f8d9 7000 	ldr.w	r7, [r9]
 8005b76:	0c12      	lsrs	r2, r2, #16
 8005b78:	0c3f      	lsrs	r7, r7, #16
 8005b7a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005b7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b88:	4565      	cmp	r5, ip
 8005b8a:	f849 3b04 	str.w	r3, [r9], #4
 8005b8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005b92:	d8e4      	bhi.n	8005b5e <__multiply+0xaa>
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	50e7      	str	r7, [r4, r3]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b9e:	3104      	adds	r1, #4
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	d020      	beq.n	8005be8 <__multiply+0x134>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	4647      	mov	r7, r8
 8005baa:	46a4      	mov	ip, r4
 8005bac:	f04f 0a00 	mov.w	sl, #0
 8005bb0:	f8b7 b000 	ldrh.w	fp, [r7]
 8005bb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8005bbc:	4452      	add	r2, sl
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bc4:	f84c 3b04 	str.w	r3, [ip], #4
 8005bc8:	f857 3b04 	ldr.w	r3, [r7], #4
 8005bcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bd0:	f8bc 3000 	ldrh.w	r3, [ip]
 8005bd4:	fb09 330a 	mla	r3, r9, sl, r3
 8005bd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005bdc:	42bd      	cmp	r5, r7
 8005bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005be2:	d8e5      	bhi.n	8005bb0 <__multiply+0xfc>
 8005be4:	9a01      	ldr	r2, [sp, #4]
 8005be6:	50a3      	str	r3, [r4, r2]
 8005be8:	3404      	adds	r4, #4
 8005bea:	e79f      	b.n	8005b2c <__multiply+0x78>
 8005bec:	3e01      	subs	r6, #1
 8005bee:	e7a1      	b.n	8005b34 <__multiply+0x80>
 8005bf0:	08006a58 	.word	0x08006a58
 8005bf4:	08006a69 	.word	0x08006a69

08005bf8 <__pow5mult>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	f012 0203 	ands.w	r2, r2, #3
 8005c02:	4607      	mov	r7, r0
 8005c04:	460e      	mov	r6, r1
 8005c06:	d007      	beq.n	8005c18 <__pow5mult+0x20>
 8005c08:	4c25      	ldr	r4, [pc, #148]	@ (8005ca0 <__pow5mult+0xa8>)
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c12:	f7ff fea7 	bl	8005964 <__multadd>
 8005c16:	4606      	mov	r6, r0
 8005c18:	10ad      	asrs	r5, r5, #2
 8005c1a:	d03d      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c1c:	69fc      	ldr	r4, [r7, #28]
 8005c1e:	b97c      	cbnz	r4, 8005c40 <__pow5mult+0x48>
 8005c20:	2010      	movs	r0, #16
 8005c22:	f7ff fd87 	bl	8005734 <malloc>
 8005c26:	4602      	mov	r2, r0
 8005c28:	61f8      	str	r0, [r7, #28]
 8005c2a:	b928      	cbnz	r0, 8005c38 <__pow5mult+0x40>
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <__pow5mult+0xac>)
 8005c2e:	481e      	ldr	r0, [pc, #120]	@ (8005ca8 <__pow5mult+0xb0>)
 8005c30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c34:	f000 fc68 	bl	8006508 <__assert_func>
 8005c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c3c:	6004      	str	r4, [r0, #0]
 8005c3e:	60c4      	str	r4, [r0, #12]
 8005c40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c48:	b94c      	cbnz	r4, 8005c5e <__pow5mult+0x66>
 8005c4a:	f240 2171 	movw	r1, #625	@ 0x271
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f7ff ff1a 	bl	8005a88 <__i2b>
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	07eb      	lsls	r3, r5, #31
 8005c64:	d50a      	bpl.n	8005c7c <__pow5mult+0x84>
 8005c66:	4631      	mov	r1, r6
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f7ff ff22 	bl	8005ab4 <__multiply>
 8005c70:	4631      	mov	r1, r6
 8005c72:	4680      	mov	r8, r0
 8005c74:	4638      	mov	r0, r7
 8005c76:	f7ff fe53 	bl	8005920 <_Bfree>
 8005c7a:	4646      	mov	r6, r8
 8005c7c:	106d      	asrs	r5, r5, #1
 8005c7e:	d00b      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	b938      	cbnz	r0, 8005c94 <__pow5mult+0x9c>
 8005c84:	4622      	mov	r2, r4
 8005c86:	4621      	mov	r1, r4
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7ff ff13 	bl	8005ab4 <__multiply>
 8005c8e:	6020      	str	r0, [r4, #0]
 8005c90:	f8c0 9000 	str.w	r9, [r0]
 8005c94:	4604      	mov	r4, r0
 8005c96:	e7e4      	b.n	8005c62 <__pow5mult+0x6a>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08006b1c 	.word	0x08006b1c
 8005ca4:	080069e9 	.word	0x080069e9
 8005ca8:	08006a69 	.word	0x08006a69

08005cac <__lshift>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	6849      	ldr	r1, [r1, #4]
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	4691      	mov	r9, r2
 8005cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc4:	f108 0601 	add.w	r6, r8, #1
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	db0b      	blt.n	8005ce4 <__lshift+0x38>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff fde7 	bl	80058a0 <_Balloc>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	b948      	cbnz	r0, 8005cea <__lshift+0x3e>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b28      	ldr	r3, [pc, #160]	@ (8005d7c <__lshift+0xd0>)
 8005cda:	4829      	ldr	r0, [pc, #164]	@ (8005d80 <__lshift+0xd4>)
 8005cdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ce0:	f000 fc12 	bl	8006508 <__assert_func>
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__lshift+0x1c>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f100 0114 	add.w	r1, r0, #20
 8005cf0:	f100 0210 	add.w	r2, r0, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4553      	cmp	r3, sl
 8005cf8:	db33      	blt.n	8005d62 <__lshift+0xb6>
 8005cfa:	6920      	ldr	r0, [r4, #16]
 8005cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d00:	f104 0314 	add.w	r3, r4, #20
 8005d04:	f019 091f 	ands.w	r9, r9, #31
 8005d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d10:	d02b      	beq.n	8005d6a <__lshift+0xbe>
 8005d12:	f1c9 0e20 	rsb	lr, r9, #32
 8005d16:	468a      	mov	sl, r1
 8005d18:	2200      	movs	r2, #0
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d20:	4310      	orrs	r0, r2
 8005d22:	f84a 0b04 	str.w	r0, [sl], #4
 8005d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2a:	459c      	cmp	ip, r3
 8005d2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d30:	d8f3      	bhi.n	8005d1a <__lshift+0x6e>
 8005d32:	ebac 0304 	sub.w	r3, ip, r4
 8005d36:	3b15      	subs	r3, #21
 8005d38:	f023 0303 	bic.w	r3, r3, #3
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	f104 0015 	add.w	r0, r4, #21
 8005d42:	4560      	cmp	r0, ip
 8005d44:	bf88      	it	hi
 8005d46:	2304      	movhi	r3, #4
 8005d48:	50ca      	str	r2, [r1, r3]
 8005d4a:	b10a      	cbz	r2, 8005d50 <__lshift+0xa4>
 8005d4c:	f108 0602 	add.w	r6, r8, #2
 8005d50:	3e01      	subs	r6, #1
 8005d52:	4638      	mov	r0, r7
 8005d54:	612e      	str	r6, [r5, #16]
 8005d56:	4621      	mov	r1, r4
 8005d58:	f7ff fde2 	bl	8005920 <_Bfree>
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d66:	3301      	adds	r3, #1
 8005d68:	e7c5      	b.n	8005cf6 <__lshift+0x4a>
 8005d6a:	3904      	subs	r1, #4
 8005d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d74:	459c      	cmp	ip, r3
 8005d76:	d8f9      	bhi.n	8005d6c <__lshift+0xc0>
 8005d78:	e7ea      	b.n	8005d50 <__lshift+0xa4>
 8005d7a:	bf00      	nop
 8005d7c:	08006a58 	.word	0x08006a58
 8005d80:	08006a69 	.word	0x08006a69

08005d84 <__mcmp>:
 8005d84:	690a      	ldr	r2, [r1, #16]
 8005d86:	4603      	mov	r3, r0
 8005d88:	6900      	ldr	r0, [r0, #16]
 8005d8a:	1a80      	subs	r0, r0, r2
 8005d8c:	b530      	push	{r4, r5, lr}
 8005d8e:	d10e      	bne.n	8005dae <__mcmp+0x2a>
 8005d90:	3314      	adds	r3, #20
 8005d92:	3114      	adds	r1, #20
 8005d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005da4:	4295      	cmp	r5, r2
 8005da6:	d003      	beq.n	8005db0 <__mcmp+0x2c>
 8005da8:	d205      	bcs.n	8005db6 <__mcmp+0x32>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dae:	bd30      	pop	{r4, r5, pc}
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d3f3      	bcc.n	8005d9c <__mcmp+0x18>
 8005db4:	e7fb      	b.n	8005dae <__mcmp+0x2a>
 8005db6:	2001      	movs	r0, #1
 8005db8:	e7f9      	b.n	8005dae <__mcmp+0x2a>
	...

08005dbc <__mdiff>:
 8005dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4648      	mov	r0, r9
 8005dc8:	4614      	mov	r4, r2
 8005dca:	f7ff ffdb 	bl	8005d84 <__mcmp>
 8005dce:	1e05      	subs	r5, r0, #0
 8005dd0:	d112      	bne.n	8005df8 <__mdiff+0x3c>
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff fd63 	bl	80058a0 <_Balloc>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	b928      	cbnz	r0, 8005dea <__mdiff+0x2e>
 8005dde:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed8 <__mdiff+0x11c>)
 8005de0:	f240 2137 	movw	r1, #567	@ 0x237
 8005de4:	483d      	ldr	r0, [pc, #244]	@ (8005edc <__mdiff+0x120>)
 8005de6:	f000 fb8f 	bl	8006508 <__assert_func>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005df0:	4610      	mov	r0, r2
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	bfbc      	itt	lt
 8005dfa:	464b      	movlt	r3, r9
 8005dfc:	46a1      	movlt	r9, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e04:	bfba      	itte	lt
 8005e06:	461c      	movlt	r4, r3
 8005e08:	2501      	movlt	r5, #1
 8005e0a:	2500      	movge	r5, #0
 8005e0c:	f7ff fd48 	bl	80058a0 <_Balloc>
 8005e10:	4602      	mov	r2, r0
 8005e12:	b918      	cbnz	r0, 8005e1c <__mdiff+0x60>
 8005e14:	4b30      	ldr	r3, [pc, #192]	@ (8005ed8 <__mdiff+0x11c>)
 8005e16:	f240 2145 	movw	r1, #581	@ 0x245
 8005e1a:	e7e3      	b.n	8005de4 <__mdiff+0x28>
 8005e1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e20:	6926      	ldr	r6, [r4, #16]
 8005e22:	60c5      	str	r5, [r0, #12]
 8005e24:	f109 0310 	add.w	r3, r9, #16
 8005e28:	f109 0514 	add.w	r5, r9, #20
 8005e2c:	f104 0e14 	add.w	lr, r4, #20
 8005e30:	f100 0b14 	add.w	fp, r0, #20
 8005e34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	46d9      	mov	r9, fp
 8005e40:	f04f 0c00 	mov.w	ip, #0
 8005e44:	9b01      	ldr	r3, [sp, #4]
 8005e46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	b281      	uxth	r1, r0
 8005e52:	fa1f f38a 	uxth.w	r3, sl
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	0c00      	lsrs	r0, r0, #16
 8005e5a:	4463      	add	r3, ip
 8005e5c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e60:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e6a:	4576      	cmp	r6, lr
 8005e6c:	f849 3b04 	str.w	r3, [r9], #4
 8005e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e74:	d8e6      	bhi.n	8005e44 <__mdiff+0x88>
 8005e76:	1b33      	subs	r3, r6, r4
 8005e78:	3b15      	subs	r3, #21
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	3415      	adds	r4, #21
 8005e80:	3304      	adds	r3, #4
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	bf38      	it	cc
 8005e86:	2304      	movcc	r3, #4
 8005e88:	441d      	add	r5, r3
 8005e8a:	445b      	add	r3, fp
 8005e8c:	461e      	mov	r6, r3
 8005e8e:	462c      	mov	r4, r5
 8005e90:	4544      	cmp	r4, r8
 8005e92:	d30e      	bcc.n	8005eb2 <__mdiff+0xf6>
 8005e94:	f108 0103 	add.w	r1, r8, #3
 8005e98:	1b49      	subs	r1, r1, r5
 8005e9a:	f021 0103 	bic.w	r1, r1, #3
 8005e9e:	3d03      	subs	r5, #3
 8005ea0:	45a8      	cmp	r8, r5
 8005ea2:	bf38      	it	cc
 8005ea4:	2100      	movcc	r1, #0
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005eac:	b191      	cbz	r1, 8005ed4 <__mdiff+0x118>
 8005eae:	6117      	str	r7, [r2, #16]
 8005eb0:	e79e      	b.n	8005df0 <__mdiff+0x34>
 8005eb2:	f854 1b04 	ldr.w	r1, [r4], #4
 8005eb6:	46e6      	mov	lr, ip
 8005eb8:	0c08      	lsrs	r0, r1, #16
 8005eba:	fa1c fc81 	uxtah	ip, ip, r1
 8005ebe:	4471      	add	r1, lr
 8005ec0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ec4:	b289      	uxth	r1, r1
 8005ec6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005eca:	f846 1b04 	str.w	r1, [r6], #4
 8005ece:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ed2:	e7dd      	b.n	8005e90 <__mdiff+0xd4>
 8005ed4:	3f01      	subs	r7, #1
 8005ed6:	e7e7      	b.n	8005ea8 <__mdiff+0xec>
 8005ed8:	08006a58 	.word	0x08006a58
 8005edc:	08006a69 	.word	0x08006a69

08005ee0 <__d2b>:
 8005ee0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	9e08      	ldr	r6, [sp, #32]
 8005ee8:	4690      	mov	r8, r2
 8005eea:	4699      	mov	r9, r3
 8005eec:	f7ff fcd8 	bl	80058a0 <_Balloc>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	b930      	cbnz	r0, 8005f02 <__d2b+0x22>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <__d2b+0xa8>)
 8005ef8:	4824      	ldr	r0, [pc, #144]	@ (8005f8c <__d2b+0xac>)
 8005efa:	f240 310f 	movw	r1, #783	@ 0x30f
 8005efe:	f000 fb03 	bl	8006508 <__assert_func>
 8005f02:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f0a:	b10d      	cbz	r5, 8005f10 <__d2b+0x30>
 8005f0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f1b8 0300 	subs.w	r3, r8, #0
 8005f16:	d024      	beq.n	8005f62 <__d2b+0x82>
 8005f18:	4668      	mov	r0, sp
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	f7ff fd87 	bl	8005a2e <__lo0bits>
 8005f20:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f24:	b1d8      	cbz	r0, 8005f5e <__d2b+0x7e>
 8005f26:	f1c0 0320 	rsb	r3, r0, #32
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	40c2      	lsrs	r2, r0
 8005f32:	6163      	str	r3, [r4, #20]
 8005f34:	9201      	str	r2, [sp, #4]
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	61a3      	str	r3, [r4, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2201      	moveq	r2, #1
 8005f40:	2202      	movne	r2, #2
 8005f42:	6122      	str	r2, [r4, #16]
 8005f44:	b1ad      	cbz	r5, 8005f72 <__d2b+0x92>
 8005f46:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f4a:	4405      	add	r5, r0
 8005f4c:	6035      	str	r5, [r6, #0]
 8005f4e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f54:	6018      	str	r0, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	b002      	add	sp, #8
 8005f5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005f5e:	6161      	str	r1, [r4, #20]
 8005f60:	e7e9      	b.n	8005f36 <__d2b+0x56>
 8005f62:	a801      	add	r0, sp, #4
 8005f64:	f7ff fd63 	bl	8005a2e <__lo0bits>
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	6163      	str	r3, [r4, #20]
 8005f6c:	3020      	adds	r0, #32
 8005f6e:	2201      	movs	r2, #1
 8005f70:	e7e7      	b.n	8005f42 <__d2b+0x62>
 8005f72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f7a:	6030      	str	r0, [r6, #0]
 8005f7c:	6918      	ldr	r0, [r3, #16]
 8005f7e:	f7ff fd37 	bl	80059f0 <__hi0bits>
 8005f82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f86:	e7e4      	b.n	8005f52 <__d2b+0x72>
 8005f88:	08006a58 	.word	0x08006a58
 8005f8c:	08006a69 	.word	0x08006a69

08005f90 <__ssputs_r>:
 8005f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	688e      	ldr	r6, [r1, #8]
 8005f96:	461f      	mov	r7, r3
 8005f98:	42be      	cmp	r6, r7
 8005f9a:	680b      	ldr	r3, [r1, #0]
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4690      	mov	r8, r2
 8005fa2:	d82d      	bhi.n	8006000 <__ssputs_r+0x70>
 8005fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fac:	d026      	beq.n	8005ffc <__ssputs_r+0x6c>
 8005fae:	6965      	ldr	r5, [r4, #20]
 8005fb0:	6909      	ldr	r1, [r1, #16]
 8005fb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb6:	eba3 0901 	sub.w	r9, r3, r1
 8005fba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fbe:	1c7b      	adds	r3, r7, #1
 8005fc0:	444b      	add	r3, r9
 8005fc2:	106d      	asrs	r5, r5, #1
 8005fc4:	429d      	cmp	r5, r3
 8005fc6:	bf38      	it	cc
 8005fc8:	461d      	movcc	r5, r3
 8005fca:	0553      	lsls	r3, r2, #21
 8005fcc:	d527      	bpl.n	800601e <__ssputs_r+0x8e>
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7ff fbda 	bl	8005788 <_malloc_r>
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	b360      	cbz	r0, 8006032 <__ssputs_r+0xa2>
 8005fd8:	6921      	ldr	r1, [r4, #16]
 8005fda:	464a      	mov	r2, r9
 8005fdc:	f000 fa86 	bl	80064ec <memcpy>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	6126      	str	r6, [r4, #16]
 8005fee:	6165      	str	r5, [r4, #20]
 8005ff0:	444e      	add	r6, r9
 8005ff2:	eba5 0509 	sub.w	r5, r5, r9
 8005ff6:	6026      	str	r6, [r4, #0]
 8005ff8:	60a5      	str	r5, [r4, #8]
 8005ffa:	463e      	mov	r6, r7
 8005ffc:	42be      	cmp	r6, r7
 8005ffe:	d900      	bls.n	8006002 <__ssputs_r+0x72>
 8006000:	463e      	mov	r6, r7
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	4632      	mov	r2, r6
 8006006:	4641      	mov	r1, r8
 8006008:	f000 fa24 	bl	8006454 <memmove>
 800600c:	68a3      	ldr	r3, [r4, #8]
 800600e:	1b9b      	subs	r3, r3, r6
 8006010:	60a3      	str	r3, [r4, #8]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	4433      	add	r3, r6
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	2000      	movs	r0, #0
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	462a      	mov	r2, r5
 8006020:	f000 fab6 	bl	8006590 <_realloc_r>
 8006024:	4606      	mov	r6, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d1e0      	bne.n	8005fec <__ssputs_r+0x5c>
 800602a:	6921      	ldr	r1, [r4, #16]
 800602c:	4650      	mov	r0, sl
 800602e:	f7ff fb37 	bl	80056a0 <_free_r>
 8006032:	230c      	movs	r3, #12
 8006034:	f8ca 3000 	str.w	r3, [sl]
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006044:	e7e9      	b.n	800601a <__ssputs_r+0x8a>
	...

08006048 <_svfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	4698      	mov	r8, r3
 800604e:	898b      	ldrh	r3, [r1, #12]
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	b09d      	sub	sp, #116	@ 0x74
 8006054:	4607      	mov	r7, r0
 8006056:	460d      	mov	r5, r1
 8006058:	4614      	mov	r4, r2
 800605a:	d510      	bpl.n	800607e <_svfiprintf_r+0x36>
 800605c:	690b      	ldr	r3, [r1, #16]
 800605e:	b973      	cbnz	r3, 800607e <_svfiprintf_r+0x36>
 8006060:	2140      	movs	r1, #64	@ 0x40
 8006062:	f7ff fb91 	bl	8005788 <_malloc_r>
 8006066:	6028      	str	r0, [r5, #0]
 8006068:	6128      	str	r0, [r5, #16]
 800606a:	b930      	cbnz	r0, 800607a <_svfiprintf_r+0x32>
 800606c:	230c      	movs	r3, #12
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006074:	b01d      	add	sp, #116	@ 0x74
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	2340      	movs	r3, #64	@ 0x40
 800607c:	616b      	str	r3, [r5, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9309      	str	r3, [sp, #36]	@ 0x24
 8006082:	2320      	movs	r3, #32
 8006084:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006088:	f8cd 800c 	str.w	r8, [sp, #12]
 800608c:	2330      	movs	r3, #48	@ 0x30
 800608e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800622c <_svfiprintf_r+0x1e4>
 8006092:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006096:	f04f 0901 	mov.w	r9, #1
 800609a:	4623      	mov	r3, r4
 800609c:	469a      	mov	sl, r3
 800609e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a2:	b10a      	cbz	r2, 80060a8 <_svfiprintf_r+0x60>
 80060a4:	2a25      	cmp	r2, #37	@ 0x25
 80060a6:	d1f9      	bne.n	800609c <_svfiprintf_r+0x54>
 80060a8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ac:	d00b      	beq.n	80060c6 <_svfiprintf_r+0x7e>
 80060ae:	465b      	mov	r3, fp
 80060b0:	4622      	mov	r2, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ff6b 	bl	8005f90 <__ssputs_r>
 80060ba:	3001      	adds	r0, #1
 80060bc:	f000 80a7 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060c2:	445a      	add	r2, fp
 80060c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060c6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 809f 	beq.w	800620e <_svfiprintf_r+0x1c6>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060da:	f10a 0a01 	add.w	sl, sl, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80060e8:	4654      	mov	r4, sl
 80060ea:	2205      	movs	r2, #5
 80060ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f0:	484e      	ldr	r0, [pc, #312]	@ (800622c <_svfiprintf_r+0x1e4>)
 80060f2:	f7fa f86d 	bl	80001d0 <memchr>
 80060f6:	9a04      	ldr	r2, [sp, #16]
 80060f8:	b9d8      	cbnz	r0, 8006132 <_svfiprintf_r+0xea>
 80060fa:	06d0      	lsls	r0, r2, #27
 80060fc:	bf44      	itt	mi
 80060fe:	2320      	movmi	r3, #32
 8006100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006104:	0711      	lsls	r1, r2, #28
 8006106:	bf44      	itt	mi
 8006108:	232b      	movmi	r3, #43	@ 0x2b
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610e:	f89a 3000 	ldrb.w	r3, [sl]
 8006112:	2b2a      	cmp	r3, #42	@ 0x2a
 8006114:	d015      	beq.n	8006142 <_svfiprintf_r+0xfa>
 8006116:	9a07      	ldr	r2, [sp, #28]
 8006118:	4654      	mov	r4, sl
 800611a:	2000      	movs	r0, #0
 800611c:	f04f 0c0a 	mov.w	ip, #10
 8006120:	4621      	mov	r1, r4
 8006122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006126:	3b30      	subs	r3, #48	@ 0x30
 8006128:	2b09      	cmp	r3, #9
 800612a:	d94b      	bls.n	80061c4 <_svfiprintf_r+0x17c>
 800612c:	b1b0      	cbz	r0, 800615c <_svfiprintf_r+0x114>
 800612e:	9207      	str	r2, [sp, #28]
 8006130:	e014      	b.n	800615c <_svfiprintf_r+0x114>
 8006132:	eba0 0308 	sub.w	r3, r0, r8
 8006136:	fa09 f303 	lsl.w	r3, r9, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	46a2      	mov	sl, r4
 8006140:	e7d2      	b.n	80060e8 <_svfiprintf_r+0xa0>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9103      	str	r1, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfbb      	ittet	lt
 800614e:	425b      	neglt	r3, r3
 8006150:	f042 0202 	orrlt.w	r2, r2, #2
 8006154:	9307      	strge	r3, [sp, #28]
 8006156:	9307      	strlt	r3, [sp, #28]
 8006158:	bfb8      	it	lt
 800615a:	9204      	strlt	r2, [sp, #16]
 800615c:	7823      	ldrb	r3, [r4, #0]
 800615e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006160:	d10a      	bne.n	8006178 <_svfiprintf_r+0x130>
 8006162:	7863      	ldrb	r3, [r4, #1]
 8006164:	2b2a      	cmp	r3, #42	@ 0x2a
 8006166:	d132      	bne.n	80061ce <_svfiprintf_r+0x186>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	9203      	str	r2, [sp, #12]
 8006170:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006174:	3402      	adds	r4, #2
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006230 <_svfiprintf_r+0x1e8>
 800617c:	7821      	ldrb	r1, [r4, #0]
 800617e:	2203      	movs	r2, #3
 8006180:	4650      	mov	r0, sl
 8006182:	f7fa f825 	bl	80001d0 <memchr>
 8006186:	b138      	cbz	r0, 8006198 <_svfiprintf_r+0x150>
 8006188:	9b04      	ldr	r3, [sp, #16]
 800618a:	eba0 000a 	sub.w	r0, r0, sl
 800618e:	2240      	movs	r2, #64	@ 0x40
 8006190:	4082      	lsls	r2, r0
 8006192:	4313      	orrs	r3, r2
 8006194:	3401      	adds	r4, #1
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800619c:	4825      	ldr	r0, [pc, #148]	@ (8006234 <_svfiprintf_r+0x1ec>)
 800619e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061a2:	2206      	movs	r2, #6
 80061a4:	f7fa f814 	bl	80001d0 <memchr>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d036      	beq.n	800621a <_svfiprintf_r+0x1d2>
 80061ac:	4b22      	ldr	r3, [pc, #136]	@ (8006238 <_svfiprintf_r+0x1f0>)
 80061ae:	bb1b      	cbnz	r3, 80061f8 <_svfiprintf_r+0x1b0>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	3307      	adds	r3, #7
 80061b4:	f023 0307 	bic.w	r3, r3, #7
 80061b8:	3308      	adds	r3, #8
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061be:	4433      	add	r3, r6
 80061c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c2:	e76a      	b.n	800609a <_svfiprintf_r+0x52>
 80061c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c8:	460c      	mov	r4, r1
 80061ca:	2001      	movs	r0, #1
 80061cc:	e7a8      	b.n	8006120 <_svfiprintf_r+0xd8>
 80061ce:	2300      	movs	r3, #0
 80061d0:	3401      	adds	r4, #1
 80061d2:	9305      	str	r3, [sp, #20]
 80061d4:	4619      	mov	r1, r3
 80061d6:	f04f 0c0a 	mov.w	ip, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e0:	3a30      	subs	r2, #48	@ 0x30
 80061e2:	2a09      	cmp	r2, #9
 80061e4:	d903      	bls.n	80061ee <_svfiprintf_r+0x1a6>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0c6      	beq.n	8006178 <_svfiprintf_r+0x130>
 80061ea:	9105      	str	r1, [sp, #20]
 80061ec:	e7c4      	b.n	8006178 <_svfiprintf_r+0x130>
 80061ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f2:	4604      	mov	r4, r0
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7f0      	b.n	80061da <_svfiprintf_r+0x192>
 80061f8:	ab03      	add	r3, sp, #12
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	462a      	mov	r2, r5
 80061fe:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <_svfiprintf_r+0x1f4>)
 8006200:	a904      	add	r1, sp, #16
 8006202:	4638      	mov	r0, r7
 8006204:	f7fd fda2 	bl	8003d4c <_printf_float>
 8006208:	1c42      	adds	r2, r0, #1
 800620a:	4606      	mov	r6, r0
 800620c:	d1d6      	bne.n	80061bc <_svfiprintf_r+0x174>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	065b      	lsls	r3, r3, #25
 8006212:	f53f af2d 	bmi.w	8006070 <_svfiprintf_r+0x28>
 8006216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006218:	e72c      	b.n	8006074 <_svfiprintf_r+0x2c>
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	462a      	mov	r2, r5
 8006220:	4b06      	ldr	r3, [pc, #24]	@ (800623c <_svfiprintf_r+0x1f4>)
 8006222:	a904      	add	r1, sp, #16
 8006224:	4638      	mov	r0, r7
 8006226:	f7fe f82b 	bl	8004280 <_printf_i>
 800622a:	e7ed      	b.n	8006208 <_svfiprintf_r+0x1c0>
 800622c:	08006ac2 	.word	0x08006ac2
 8006230:	08006ac8 	.word	0x08006ac8
 8006234:	08006acc 	.word	0x08006acc
 8006238:	08003d4d 	.word	0x08003d4d
 800623c:	08005f91 	.word	0x08005f91

08006240 <__sflush_r>:
 8006240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	0716      	lsls	r6, r2, #28
 8006248:	4605      	mov	r5, r0
 800624a:	460c      	mov	r4, r1
 800624c:	d454      	bmi.n	80062f8 <__sflush_r+0xb8>
 800624e:	684b      	ldr	r3, [r1, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc02      	bgt.n	800625a <__sflush_r+0x1a>
 8006254:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	dd48      	ble.n	80062ec <__sflush_r+0xac>
 800625a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800625c:	2e00      	cmp	r6, #0
 800625e:	d045      	beq.n	80062ec <__sflush_r+0xac>
 8006260:	2300      	movs	r3, #0
 8006262:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006266:	682f      	ldr	r7, [r5, #0]
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	d030      	beq.n	80062d0 <__sflush_r+0x90>
 800626e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	0759      	lsls	r1, r3, #29
 8006274:	d505      	bpl.n	8006282 <__sflush_r+0x42>
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800627c:	b10b      	cbz	r3, 8006282 <__sflush_r+0x42>
 800627e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	4628      	mov	r0, r5
 800628a:	47b0      	blx	r6
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	d106      	bne.n	80062a0 <__sflush_r+0x60>
 8006292:	6829      	ldr	r1, [r5, #0]
 8006294:	291d      	cmp	r1, #29
 8006296:	d82b      	bhi.n	80062f0 <__sflush_r+0xb0>
 8006298:	4a28      	ldr	r2, [pc, #160]	@ (800633c <__sflush_r+0xfc>)
 800629a:	40ca      	lsrs	r2, r1
 800629c:	07d6      	lsls	r6, r2, #31
 800629e:	d527      	bpl.n	80062f0 <__sflush_r+0xb0>
 80062a0:	2200      	movs	r2, #0
 80062a2:	6062      	str	r2, [r4, #4]
 80062a4:	04d9      	lsls	r1, r3, #19
 80062a6:	6922      	ldr	r2, [r4, #16]
 80062a8:	6022      	str	r2, [r4, #0]
 80062aa:	d504      	bpl.n	80062b6 <__sflush_r+0x76>
 80062ac:	1c42      	adds	r2, r0, #1
 80062ae:	d101      	bne.n	80062b4 <__sflush_r+0x74>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b903      	cbnz	r3, 80062b6 <__sflush_r+0x76>
 80062b4:	6560      	str	r0, [r4, #84]	@ 0x54
 80062b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062b8:	602f      	str	r7, [r5, #0]
 80062ba:	b1b9      	cbz	r1, 80062ec <__sflush_r+0xac>
 80062bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d002      	beq.n	80062ca <__sflush_r+0x8a>
 80062c4:	4628      	mov	r0, r5
 80062c6:	f7ff f9eb 	bl	80056a0 <_free_r>
 80062ca:	2300      	movs	r3, #0
 80062cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ce:	e00d      	b.n	80062ec <__sflush_r+0xac>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4628      	mov	r0, r5
 80062d4:	47b0      	blx	r6
 80062d6:	4602      	mov	r2, r0
 80062d8:	1c50      	adds	r0, r2, #1
 80062da:	d1c9      	bne.n	8006270 <__sflush_r+0x30>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0c6      	beq.n	8006270 <__sflush_r+0x30>
 80062e2:	2b1d      	cmp	r3, #29
 80062e4:	d001      	beq.n	80062ea <__sflush_r+0xaa>
 80062e6:	2b16      	cmp	r3, #22
 80062e8:	d11d      	bne.n	8006326 <__sflush_r+0xe6>
 80062ea:	602f      	str	r7, [r5, #0]
 80062ec:	2000      	movs	r0, #0
 80062ee:	e021      	b.n	8006334 <__sflush_r+0xf4>
 80062f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	e01a      	b.n	800632e <__sflush_r+0xee>
 80062f8:	690f      	ldr	r7, [r1, #16]
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	d0f6      	beq.n	80062ec <__sflush_r+0xac>
 80062fe:	0793      	lsls	r3, r2, #30
 8006300:	680e      	ldr	r6, [r1, #0]
 8006302:	bf08      	it	eq
 8006304:	694b      	ldreq	r3, [r1, #20]
 8006306:	600f      	str	r7, [r1, #0]
 8006308:	bf18      	it	ne
 800630a:	2300      	movne	r3, #0
 800630c:	1bf6      	subs	r6, r6, r7
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	2e00      	cmp	r6, #0
 8006312:	ddeb      	ble.n	80062ec <__sflush_r+0xac>
 8006314:	6a21      	ldr	r1, [r4, #32]
 8006316:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800631a:	4633      	mov	r3, r6
 800631c:	463a      	mov	r2, r7
 800631e:	4628      	mov	r0, r5
 8006320:	47e0      	blx	ip
 8006322:	2800      	cmp	r0, #0
 8006324:	dc07      	bgt.n	8006336 <__sflush_r+0xf6>
 8006326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006336:	4407      	add	r7, r0
 8006338:	1a36      	subs	r6, r6, r0
 800633a:	e7e9      	b.n	8006310 <__sflush_r+0xd0>
 800633c:	20400001 	.word	0x20400001

08006340 <_fflush_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	b913      	cbnz	r3, 8006350 <_fflush_r+0x10>
 800634a:	2500      	movs	r5, #0
 800634c:	4628      	mov	r0, r5
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	b118      	cbz	r0, 800635a <_fflush_r+0x1a>
 8006352:	6a03      	ldr	r3, [r0, #32]
 8006354:	b90b      	cbnz	r3, 800635a <_fflush_r+0x1a>
 8006356:	f7fe f93d 	bl	80045d4 <__sinit>
 800635a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f3      	beq.n	800634a <_fflush_r+0xa>
 8006362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006364:	07d0      	lsls	r0, r2, #31
 8006366:	d404      	bmi.n	8006372 <_fflush_r+0x32>
 8006368:	0599      	lsls	r1, r3, #22
 800636a:	d402      	bmi.n	8006372 <_fflush_r+0x32>
 800636c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636e:	f7fe fb3c 	bl	80049ea <__retarget_lock_acquire_recursive>
 8006372:	4628      	mov	r0, r5
 8006374:	4621      	mov	r1, r4
 8006376:	f7ff ff63 	bl	8006240 <__sflush_r>
 800637a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800637c:	07da      	lsls	r2, r3, #31
 800637e:	4605      	mov	r5, r0
 8006380:	d4e4      	bmi.n	800634c <_fflush_r+0xc>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	059b      	lsls	r3, r3, #22
 8006386:	d4e1      	bmi.n	800634c <_fflush_r+0xc>
 8006388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800638a:	f7fe fb2f 	bl	80049ec <__retarget_lock_release_recursive>
 800638e:	e7dd      	b.n	800634c <_fflush_r+0xc>

08006390 <__swhatbuf_r>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	460c      	mov	r4, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2900      	cmp	r1, #0
 800639a:	b096      	sub	sp, #88	@ 0x58
 800639c:	4615      	mov	r5, r2
 800639e:	461e      	mov	r6, r3
 80063a0:	da0d      	bge.n	80063be <__swhatbuf_r+0x2e>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2340      	movne	r3, #64	@ 0x40
 80063b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063b4:	2000      	movs	r0, #0
 80063b6:	6031      	str	r1, [r6, #0]
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	b016      	add	sp, #88	@ 0x58
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	466a      	mov	r2, sp
 80063c0:	f000 f862 	bl	8006488 <_fstat_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	dbec      	blt.n	80063a2 <__swhatbuf_r+0x12>
 80063c8:	9901      	ldr	r1, [sp, #4]
 80063ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063d2:	4259      	negs	r1, r3
 80063d4:	4159      	adcs	r1, r3
 80063d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063da:	e7eb      	b.n	80063b4 <__swhatbuf_r+0x24>

080063dc <__smakebuf_r>:
 80063dc:	898b      	ldrh	r3, [r1, #12]
 80063de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e0:	079d      	lsls	r5, r3, #30
 80063e2:	4606      	mov	r6, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	d507      	bpl.n	80063f8 <__smakebuf_r+0x1c>
 80063e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2301      	movs	r3, #1
 80063f2:	6163      	str	r3, [r4, #20]
 80063f4:	b003      	add	sp, #12
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f8:	ab01      	add	r3, sp, #4
 80063fa:	466a      	mov	r2, sp
 80063fc:	f7ff ffc8 	bl	8006390 <__swhatbuf_r>
 8006400:	9f00      	ldr	r7, [sp, #0]
 8006402:	4605      	mov	r5, r0
 8006404:	4639      	mov	r1, r7
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff f9be 	bl	8005788 <_malloc_r>
 800640c:	b948      	cbnz	r0, 8006422 <__smakebuf_r+0x46>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	059a      	lsls	r2, r3, #22
 8006414:	d4ee      	bmi.n	80063f4 <__smakebuf_r+0x18>
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	f043 0302 	orr.w	r3, r3, #2
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	e7e2      	b.n	80063e8 <__smakebuf_r+0xc>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	6020      	str	r0, [r4, #0]
 8006426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006432:	b15b      	cbz	r3, 800644c <__smakebuf_r+0x70>
 8006434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f837 	bl	80064ac <_isatty_r>
 800643e:	b128      	cbz	r0, 800644c <__smakebuf_r+0x70>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	431d      	orrs	r5, r3
 8006450:	81a5      	strh	r5, [r4, #12]
 8006452:	e7cf      	b.n	80063f4 <__smakebuf_r+0x18>

08006454 <memmove>:
 8006454:	4288      	cmp	r0, r1
 8006456:	b510      	push	{r4, lr}
 8006458:	eb01 0402 	add.w	r4, r1, r2
 800645c:	d902      	bls.n	8006464 <memmove+0x10>
 800645e:	4284      	cmp	r4, r0
 8006460:	4623      	mov	r3, r4
 8006462:	d807      	bhi.n	8006474 <memmove+0x20>
 8006464:	1e43      	subs	r3, r0, #1
 8006466:	42a1      	cmp	r1, r4
 8006468:	d008      	beq.n	800647c <memmove+0x28>
 800646a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800646e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006472:	e7f8      	b.n	8006466 <memmove+0x12>
 8006474:	4402      	add	r2, r0
 8006476:	4601      	mov	r1, r0
 8006478:	428a      	cmp	r2, r1
 800647a:	d100      	bne.n	800647e <memmove+0x2a>
 800647c:	bd10      	pop	{r4, pc}
 800647e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006486:	e7f7      	b.n	8006478 <memmove+0x24>

08006488 <_fstat_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d07      	ldr	r5, [pc, #28]	@ (80064a8 <_fstat_r+0x20>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fb f98f 	bl	80017b8 <_fstat>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_fstat_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_fstat_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	20000408 	.word	0x20000408

080064ac <_isatty_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d06      	ldr	r5, [pc, #24]	@ (80064c8 <_isatty_r+0x1c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb f98d 	bl	80017d6 <_isatty>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_isatty_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_isatty_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	20000408 	.word	0x20000408

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d06      	ldr	r5, [pc, #24]	@ (80064e8 <_sbrk_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fb f994 	bl	8001804 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000408 	.word	0x20000408

080064ec <memcpy>:
 80064ec:	440a      	add	r2, r1
 80064ee:	4291      	cmp	r1, r2
 80064f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80064f4:	d100      	bne.n	80064f8 <memcpy+0xc>
 80064f6:	4770      	bx	lr
 80064f8:	b510      	push	{r4, lr}
 80064fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006502:	4291      	cmp	r1, r2
 8006504:	d1f9      	bne.n	80064fa <memcpy+0xe>
 8006506:	bd10      	pop	{r4, pc}

08006508 <__assert_func>:
 8006508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800650a:	4614      	mov	r4, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <__assert_func+0x2c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4605      	mov	r5, r0
 8006514:	68d8      	ldr	r0, [r3, #12]
 8006516:	b14c      	cbz	r4, 800652c <__assert_func+0x24>
 8006518:	4b07      	ldr	r3, [pc, #28]	@ (8006538 <__assert_func+0x30>)
 800651a:	9100      	str	r1, [sp, #0]
 800651c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006520:	4906      	ldr	r1, [pc, #24]	@ (800653c <__assert_func+0x34>)
 8006522:	462b      	mov	r3, r5
 8006524:	f000 f870 	bl	8006608 <fiprintf>
 8006528:	f000 f880 	bl	800662c <abort>
 800652c:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <__assert_func+0x38>)
 800652e:	461c      	mov	r4, r3
 8006530:	e7f3      	b.n	800651a <__assert_func+0x12>
 8006532:	bf00      	nop
 8006534:	20000018 	.word	0x20000018
 8006538:	08006add 	.word	0x08006add
 800653c:	08006aea 	.word	0x08006aea
 8006540:	08006b18 	.word	0x08006b18

08006544 <_calloc_r>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	fba1 5402 	umull	r5, r4, r1, r2
 800654a:	b934      	cbnz	r4, 800655a <_calloc_r+0x16>
 800654c:	4629      	mov	r1, r5
 800654e:	f7ff f91b 	bl	8005788 <_malloc_r>
 8006552:	4606      	mov	r6, r0
 8006554:	b928      	cbnz	r0, 8006562 <_calloc_r+0x1e>
 8006556:	4630      	mov	r0, r6
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	220c      	movs	r2, #12
 800655c:	6002      	str	r2, [r0, #0]
 800655e:	2600      	movs	r6, #0
 8006560:	e7f9      	b.n	8006556 <_calloc_r+0x12>
 8006562:	462a      	mov	r2, r5
 8006564:	4621      	mov	r1, r4
 8006566:	f7fe f9c3 	bl	80048f0 <memset>
 800656a:	e7f4      	b.n	8006556 <_calloc_r+0x12>

0800656c <__ascii_mbtowc>:
 800656c:	b082      	sub	sp, #8
 800656e:	b901      	cbnz	r1, 8006572 <__ascii_mbtowc+0x6>
 8006570:	a901      	add	r1, sp, #4
 8006572:	b142      	cbz	r2, 8006586 <__ascii_mbtowc+0x1a>
 8006574:	b14b      	cbz	r3, 800658a <__ascii_mbtowc+0x1e>
 8006576:	7813      	ldrb	r3, [r2, #0]
 8006578:	600b      	str	r3, [r1, #0]
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	1e10      	subs	r0, r2, #0
 800657e:	bf18      	it	ne
 8006580:	2001      	movne	r0, #1
 8006582:	b002      	add	sp, #8
 8006584:	4770      	bx	lr
 8006586:	4610      	mov	r0, r2
 8006588:	e7fb      	b.n	8006582 <__ascii_mbtowc+0x16>
 800658a:	f06f 0001 	mvn.w	r0, #1
 800658e:	e7f8      	b.n	8006582 <__ascii_mbtowc+0x16>

08006590 <_realloc_r>:
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	4607      	mov	r7, r0
 8006596:	4614      	mov	r4, r2
 8006598:	460d      	mov	r5, r1
 800659a:	b921      	cbnz	r1, 80065a6 <_realloc_r+0x16>
 800659c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	4611      	mov	r1, r2
 80065a2:	f7ff b8f1 	b.w	8005788 <_malloc_r>
 80065a6:	b92a      	cbnz	r2, 80065b4 <_realloc_r+0x24>
 80065a8:	f7ff f87a 	bl	80056a0 <_free_r>
 80065ac:	4625      	mov	r5, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	f000 f841 	bl	800663a <_malloc_usable_size_r>
 80065b8:	4284      	cmp	r4, r0
 80065ba:	4606      	mov	r6, r0
 80065bc:	d802      	bhi.n	80065c4 <_realloc_r+0x34>
 80065be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065c2:	d8f4      	bhi.n	80065ae <_realloc_r+0x1e>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff f8de 	bl	8005788 <_malloc_r>
 80065cc:	4680      	mov	r8, r0
 80065ce:	b908      	cbnz	r0, 80065d4 <_realloc_r+0x44>
 80065d0:	4645      	mov	r5, r8
 80065d2:	e7ec      	b.n	80065ae <_realloc_r+0x1e>
 80065d4:	42b4      	cmp	r4, r6
 80065d6:	4622      	mov	r2, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	bf28      	it	cs
 80065dc:	4632      	movcs	r2, r6
 80065de:	f7ff ff85 	bl	80064ec <memcpy>
 80065e2:	4629      	mov	r1, r5
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff f85b 	bl	80056a0 <_free_r>
 80065ea:	e7f1      	b.n	80065d0 <_realloc_r+0x40>

080065ec <__ascii_wctomb>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	b141      	cbz	r1, 8006604 <__ascii_wctomb+0x18>
 80065f2:	2aff      	cmp	r2, #255	@ 0xff
 80065f4:	d904      	bls.n	8006600 <__ascii_wctomb+0x14>
 80065f6:	228a      	movs	r2, #138	@ 0x8a
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065fe:	4770      	bx	lr
 8006600:	700a      	strb	r2, [r1, #0]
 8006602:	2001      	movs	r0, #1
 8006604:	4770      	bx	lr
	...

08006608 <fiprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b503      	push	{r0, r1, lr}
 800660c:	4601      	mov	r1, r0
 800660e:	ab03      	add	r3, sp, #12
 8006610:	4805      	ldr	r0, [pc, #20]	@ (8006628 <fiprintf+0x20>)
 8006612:	f853 2b04 	ldr.w	r2, [r3], #4
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	f000 f83d 	bl	8006698 <_vfiprintf_r>
 800661e:	b002      	add	sp, #8
 8006620:	f85d eb04 	ldr.w	lr, [sp], #4
 8006624:	b003      	add	sp, #12
 8006626:	4770      	bx	lr
 8006628:	20000018 	.word	0x20000018

0800662c <abort>:
 800662c:	b508      	push	{r3, lr}
 800662e:	2006      	movs	r0, #6
 8006630:	f000 f972 	bl	8006918 <raise>
 8006634:	2001      	movs	r0, #1
 8006636:	f7fb f870 	bl	800171a <_exit>

0800663a <_malloc_usable_size_r>:
 800663a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663e:	1f18      	subs	r0, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfbc      	itt	lt
 8006644:	580b      	ldrlt	r3, [r1, r0]
 8006646:	18c0      	addlt	r0, r0, r3
 8006648:	4770      	bx	lr

0800664a <__sfputc_r>:
 800664a:	6893      	ldr	r3, [r2, #8]
 800664c:	3b01      	subs	r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	b410      	push	{r4}
 8006652:	6093      	str	r3, [r2, #8]
 8006654:	da07      	bge.n	8006666 <__sfputc_r+0x1c>
 8006656:	6994      	ldr	r4, [r2, #24]
 8006658:	42a3      	cmp	r3, r4
 800665a:	db01      	blt.n	8006660 <__sfputc_r+0x16>
 800665c:	290a      	cmp	r1, #10
 800665e:	d102      	bne.n	8006666 <__sfputc_r+0x1c>
 8006660:	bc10      	pop	{r4}
 8006662:	f7fe b8b0 	b.w	80047c6 <__swbuf_r>
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	1c58      	adds	r0, r3, #1
 800666a:	6010      	str	r0, [r2, #0]
 800666c:	7019      	strb	r1, [r3, #0]
 800666e:	4608      	mov	r0, r1
 8006670:	bc10      	pop	{r4}
 8006672:	4770      	bx	lr

08006674 <__sfputs_r>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	4606      	mov	r6, r0
 8006678:	460f      	mov	r7, r1
 800667a:	4614      	mov	r4, r2
 800667c:	18d5      	adds	r5, r2, r3
 800667e:	42ac      	cmp	r4, r5
 8006680:	d101      	bne.n	8006686 <__sfputs_r+0x12>
 8006682:	2000      	movs	r0, #0
 8006684:	e007      	b.n	8006696 <__sfputs_r+0x22>
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	463a      	mov	r2, r7
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ffdc 	bl	800664a <__sfputc_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d1f3      	bne.n	800667e <__sfputs_r+0xa>
 8006696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006698 <_vfiprintf_r>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	460d      	mov	r5, r1
 800669e:	b09d      	sub	sp, #116	@ 0x74
 80066a0:	4614      	mov	r4, r2
 80066a2:	4698      	mov	r8, r3
 80066a4:	4606      	mov	r6, r0
 80066a6:	b118      	cbz	r0, 80066b0 <_vfiprintf_r+0x18>
 80066a8:	6a03      	ldr	r3, [r0, #32]
 80066aa:	b90b      	cbnz	r3, 80066b0 <_vfiprintf_r+0x18>
 80066ac:	f7fd ff92 	bl	80045d4 <__sinit>
 80066b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066b2:	07d9      	lsls	r1, r3, #31
 80066b4:	d405      	bmi.n	80066c2 <_vfiprintf_r+0x2a>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	059a      	lsls	r2, r3, #22
 80066ba:	d402      	bmi.n	80066c2 <_vfiprintf_r+0x2a>
 80066bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066be:	f7fe f994 	bl	80049ea <__retarget_lock_acquire_recursive>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	071b      	lsls	r3, r3, #28
 80066c6:	d501      	bpl.n	80066cc <_vfiprintf_r+0x34>
 80066c8:	692b      	ldr	r3, [r5, #16]
 80066ca:	b99b      	cbnz	r3, 80066f4 <_vfiprintf_r+0x5c>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7fe f8b8 	bl	8004844 <__swsetup_r>
 80066d4:	b170      	cbz	r0, 80066f4 <_vfiprintf_r+0x5c>
 80066d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066d8:	07dc      	lsls	r4, r3, #31
 80066da:	d504      	bpl.n	80066e6 <_vfiprintf_r+0x4e>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066e0:	b01d      	add	sp, #116	@ 0x74
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	0598      	lsls	r0, r3, #22
 80066ea:	d4f7      	bmi.n	80066dc <_vfiprintf_r+0x44>
 80066ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ee:	f7fe f97d 	bl	80049ec <__retarget_lock_release_recursive>
 80066f2:	e7f3      	b.n	80066dc <_vfiprintf_r+0x44>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f8:	2320      	movs	r3, #32
 80066fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006702:	2330      	movs	r3, #48	@ 0x30
 8006704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80068b4 <_vfiprintf_r+0x21c>
 8006708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800670c:	f04f 0901 	mov.w	r9, #1
 8006710:	4623      	mov	r3, r4
 8006712:	469a      	mov	sl, r3
 8006714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006718:	b10a      	cbz	r2, 800671e <_vfiprintf_r+0x86>
 800671a:	2a25      	cmp	r2, #37	@ 0x25
 800671c:	d1f9      	bne.n	8006712 <_vfiprintf_r+0x7a>
 800671e:	ebba 0b04 	subs.w	fp, sl, r4
 8006722:	d00b      	beq.n	800673c <_vfiprintf_r+0xa4>
 8006724:	465b      	mov	r3, fp
 8006726:	4622      	mov	r2, r4
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ffa2 	bl	8006674 <__sfputs_r>
 8006730:	3001      	adds	r0, #1
 8006732:	f000 80a7 	beq.w	8006884 <_vfiprintf_r+0x1ec>
 8006736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006738:	445a      	add	r2, fp
 800673a:	9209      	str	r2, [sp, #36]	@ 0x24
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 809f 	beq.w	8006884 <_vfiprintf_r+0x1ec>
 8006746:	2300      	movs	r3, #0
 8006748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800674c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006750:	f10a 0a01 	add.w	sl, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800675c:	931a      	str	r3, [sp, #104]	@ 0x68
 800675e:	4654      	mov	r4, sl
 8006760:	2205      	movs	r2, #5
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	4853      	ldr	r0, [pc, #332]	@ (80068b4 <_vfiprintf_r+0x21c>)
 8006768:	f7f9 fd32 	bl	80001d0 <memchr>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	b9d8      	cbnz	r0, 80067a8 <_vfiprintf_r+0x110>
 8006770:	06d1      	lsls	r1, r2, #27
 8006772:	bf44      	itt	mi
 8006774:	2320      	movmi	r3, #32
 8006776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800677a:	0713      	lsls	r3, r2, #28
 800677c:	bf44      	itt	mi
 800677e:	232b      	movmi	r3, #43	@ 0x2b
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b2a      	cmp	r3, #42	@ 0x2a
 800678a:	d015      	beq.n	80067b8 <_vfiprintf_r+0x120>
 800678c:	9a07      	ldr	r2, [sp, #28]
 800678e:	4654      	mov	r4, sl
 8006790:	2000      	movs	r0, #0
 8006792:	f04f 0c0a 	mov.w	ip, #10
 8006796:	4621      	mov	r1, r4
 8006798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679c:	3b30      	subs	r3, #48	@ 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d94b      	bls.n	800683a <_vfiprintf_r+0x1a2>
 80067a2:	b1b0      	cbz	r0, 80067d2 <_vfiprintf_r+0x13a>
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	e014      	b.n	80067d2 <_vfiprintf_r+0x13a>
 80067a8:	eba0 0308 	sub.w	r3, r0, r8
 80067ac:	fa09 f303 	lsl.w	r3, r9, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	46a2      	mov	sl, r4
 80067b6:	e7d2      	b.n	800675e <_vfiprintf_r+0xc6>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	1d19      	adds	r1, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	9103      	str	r1, [sp, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbb      	ittet	lt
 80067c4:	425b      	neglt	r3, r3
 80067c6:	f042 0202 	orrlt.w	r2, r2, #2
 80067ca:	9307      	strge	r3, [sp, #28]
 80067cc:	9307      	strlt	r3, [sp, #28]
 80067ce:	bfb8      	it	lt
 80067d0:	9204      	strlt	r2, [sp, #16]
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80067d6:	d10a      	bne.n	80067ee <_vfiprintf_r+0x156>
 80067d8:	7863      	ldrb	r3, [r4, #1]
 80067da:	2b2a      	cmp	r3, #42	@ 0x2a
 80067dc:	d132      	bne.n	8006844 <_vfiprintf_r+0x1ac>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9203      	str	r2, [sp, #12]
 80067e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ea:	3402      	adds	r4, #2
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80068b8 <_vfiprintf_r+0x220>
 80067f2:	7821      	ldrb	r1, [r4, #0]
 80067f4:	2203      	movs	r2, #3
 80067f6:	4650      	mov	r0, sl
 80067f8:	f7f9 fcea 	bl	80001d0 <memchr>
 80067fc:	b138      	cbz	r0, 800680e <_vfiprintf_r+0x176>
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	eba0 000a 	sub.w	r0, r0, sl
 8006804:	2240      	movs	r2, #64	@ 0x40
 8006806:	4082      	lsls	r2, r0
 8006808:	4313      	orrs	r3, r2
 800680a:	3401      	adds	r4, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	482a      	ldr	r0, [pc, #168]	@ (80068bc <_vfiprintf_r+0x224>)
 8006814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006818:	2206      	movs	r2, #6
 800681a:	f7f9 fcd9 	bl	80001d0 <memchr>
 800681e:	2800      	cmp	r0, #0
 8006820:	d03f      	beq.n	80068a2 <_vfiprintf_r+0x20a>
 8006822:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <_vfiprintf_r+0x228>)
 8006824:	bb1b      	cbnz	r3, 800686e <_vfiprintf_r+0x1d6>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3307      	adds	r3, #7
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	3308      	adds	r3, #8
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006834:	443b      	add	r3, r7
 8006836:	9309      	str	r3, [sp, #36]	@ 0x24
 8006838:	e76a      	b.n	8006710 <_vfiprintf_r+0x78>
 800683a:	fb0c 3202 	mla	r2, ip, r2, r3
 800683e:	460c      	mov	r4, r1
 8006840:	2001      	movs	r0, #1
 8006842:	e7a8      	b.n	8006796 <_vfiprintf_r+0xfe>
 8006844:	2300      	movs	r3, #0
 8006846:	3401      	adds	r4, #1
 8006848:	9305      	str	r3, [sp, #20]
 800684a:	4619      	mov	r1, r3
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4620      	mov	r0, r4
 8006852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006856:	3a30      	subs	r2, #48	@ 0x30
 8006858:	2a09      	cmp	r2, #9
 800685a:	d903      	bls.n	8006864 <_vfiprintf_r+0x1cc>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c6      	beq.n	80067ee <_vfiprintf_r+0x156>
 8006860:	9105      	str	r1, [sp, #20]
 8006862:	e7c4      	b.n	80067ee <_vfiprintf_r+0x156>
 8006864:	fb0c 2101 	mla	r1, ip, r1, r2
 8006868:	4604      	mov	r4, r0
 800686a:	2301      	movs	r3, #1
 800686c:	e7f0      	b.n	8006850 <_vfiprintf_r+0x1b8>
 800686e:	ab03      	add	r3, sp, #12
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	462a      	mov	r2, r5
 8006874:	4b13      	ldr	r3, [pc, #76]	@ (80068c4 <_vfiprintf_r+0x22c>)
 8006876:	a904      	add	r1, sp, #16
 8006878:	4630      	mov	r0, r6
 800687a:	f7fd fa67 	bl	8003d4c <_printf_float>
 800687e:	4607      	mov	r7, r0
 8006880:	1c78      	adds	r0, r7, #1
 8006882:	d1d6      	bne.n	8006832 <_vfiprintf_r+0x19a>
 8006884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	d405      	bmi.n	8006896 <_vfiprintf_r+0x1fe>
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	059a      	lsls	r2, r3, #22
 800688e:	d402      	bmi.n	8006896 <_vfiprintf_r+0x1fe>
 8006890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006892:	f7fe f8ab 	bl	80049ec <__retarget_lock_release_recursive>
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	065b      	lsls	r3, r3, #25
 800689a:	f53f af1f 	bmi.w	80066dc <_vfiprintf_r+0x44>
 800689e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068a0:	e71e      	b.n	80066e0 <_vfiprintf_r+0x48>
 80068a2:	ab03      	add	r3, sp, #12
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <_vfiprintf_r+0x22c>)
 80068aa:	a904      	add	r1, sp, #16
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7fd fce7 	bl	8004280 <_printf_i>
 80068b2:	e7e4      	b.n	800687e <_vfiprintf_r+0x1e6>
 80068b4:	08006ac2 	.word	0x08006ac2
 80068b8:	08006ac8 	.word	0x08006ac8
 80068bc:	08006acc 	.word	0x08006acc
 80068c0:	08003d4d 	.word	0x08003d4d
 80068c4:	08006675 	.word	0x08006675

080068c8 <_raise_r>:
 80068c8:	291f      	cmp	r1, #31
 80068ca:	b538      	push	{r3, r4, r5, lr}
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	d904      	bls.n	80068dc <_raise_r+0x14>
 80068d2:	2316      	movs	r3, #22
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068de:	b112      	cbz	r2, 80068e6 <_raise_r+0x1e>
 80068e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068e4:	b94b      	cbnz	r3, 80068fa <_raise_r+0x32>
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 f830 	bl	800694c <_getpid_r>
 80068ec:	4622      	mov	r2, r4
 80068ee:	4601      	mov	r1, r0
 80068f0:	4628      	mov	r0, r5
 80068f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f6:	f000 b817 	b.w	8006928 <_kill_r>
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d00a      	beq.n	8006914 <_raise_r+0x4c>
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	d103      	bne.n	800690a <_raise_r+0x42>
 8006902:	2316      	movs	r3, #22
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	2001      	movs	r0, #1
 8006908:	e7e7      	b.n	80068da <_raise_r+0x12>
 800690a:	2100      	movs	r1, #0
 800690c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006910:	4620      	mov	r0, r4
 8006912:	4798      	blx	r3
 8006914:	2000      	movs	r0, #0
 8006916:	e7e0      	b.n	80068da <_raise_r+0x12>

08006918 <raise>:
 8006918:	4b02      	ldr	r3, [pc, #8]	@ (8006924 <raise+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f7ff bfd3 	b.w	80068c8 <_raise_r>
 8006922:	bf00      	nop
 8006924:	20000018 	.word	0x20000018

08006928 <_kill_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	@ (8006948 <_kill_r+0x20>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	f7fa fee0 	bl	80016fa <_kill>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d102      	bne.n	8006944 <_kill_r+0x1c>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b103      	cbz	r3, 8006944 <_kill_r+0x1c>
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	bd38      	pop	{r3, r4, r5, pc}
 8006946:	bf00      	nop
 8006948:	20000408 	.word	0x20000408

0800694c <_getpid_r>:
 800694c:	f7fa bece 	b.w	80016ec <_getpid>

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr

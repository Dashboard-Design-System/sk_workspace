
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001110  08001110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001164  08001164  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001164  08001164  00002164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800116c  0800116c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001174  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000170  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012bc  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000662  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000049a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c8  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001843c  00000000  00000000  00004b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019b7  00000000  00000000  0001cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c313  00000000  00000000  0001e98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aac9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000814  00000000  00000000  000aace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ab4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  000ab51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080010f8 	.word	0x080010f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080010f8 	.word	0x080010f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b092      	sub	sp, #72	@ 0x48
 8000274:	af00      	add	r7, sp, #0
    uint8_t temp, hum;

    UartInit(9600);
 8000276:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800027a:	f000 f9bd 	bl	80005f8 <UartInit>
    delay_ms(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000282:	f000 f98a 	bl	800059a <delay_ms>

    while (1)
    {
        if (DHT_read(&temp, &hum))
 8000286:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 800028a:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 800028e:	4611      	mov	r1, r2
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f935 	bl	8000500 <DHT_read>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00c      	beq.n	80002b6 <main+0x46>
        {
        	char buffer[64];
        	    sprintf(buffer, "Temperature: %d C, Hum: %d %%\r\n", temp, hum);
 800029c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80002a0:	461a      	mov	r2, r3
 80002a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80002a6:	1d38      	adds	r0, r7, #4
 80002a8:	4905      	ldr	r1, [pc, #20]	@ (80002c0 <main+0x50>)
 80002aa:	f000 fa8d 	bl	80007c8 <siprintf>
        	    UartPuts(buffer);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f9fd 	bl	80006b0 <UartPuts>


        }
        delay_ms(15000);
 80002b6:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80002ba:	f000 f96e 	bl	800059a <delay_ms>
        if (DHT_read(&temp, &hum))
 80002be:	e7e2      	b.n	8000286 <main+0x16>
 80002c0:	08001110 	.word	0x08001110

080002c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002cc:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <_sbrk+0x5c>)
 80002ce:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <_sbrk+0x60>)
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <_sbrk+0x64>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d102      	bne.n	80002e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <_sbrk+0x64>)
 80002e2:	4a12      	ldr	r2, [pc, #72]	@ (800032c <_sbrk+0x68>)
 80002e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002e6:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <_sbrk+0x64>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	693a      	ldr	r2, [r7, #16]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d207      	bcs.n	8000304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002f4:	f000 fa8a 	bl	800080c <__errno>
 80002f8:	4603      	mov	r3, r0
 80002fa:	220c      	movs	r2, #12
 80002fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000302:	e009      	b.n	8000318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <_sbrk+0x64>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800030a:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <_sbrk+0x64>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <_sbrk+0x64>)
 8000314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000316:	68fb      	ldr	r3, [r7, #12]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20020000 	.word	0x20020000
 8000324:	00000400 	.word	0x00000400
 8000328:	20000070 	.word	0x20000070
 800032c:	200001c8 	.word	0x200001c8

08000330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000334:	f000 f802 	bl	800033c <DWT_Init>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <DWT_Init+0x58>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a13      	ldr	r2, [pc, #76]	@ (8000394 <DWT_Init+0x58>)
 8000346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800034a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <DWT_Init+0x58>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <DWT_Init+0x58>)
 8000352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000356:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <DWT_Init+0x5c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <DWT_Init+0x5c>)
 800035e:	f023 0301 	bic.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <DWT_Init+0x5c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <DWT_Init+0x5c>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <DWT_Init+0x5c>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000376:	bf00      	nop
    __ASM volatile ("NOP");
 8000378:	bf00      	nop
    __ASM volatile ("NOP");
 800037a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <DWT_Init+0x5c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf0c      	ite	eq
 8000384:	2301      	moveq	r3, #1
 8000386:	2300      	movne	r3, #0
 8000388:	b2db      	uxtb	r3, r3
}
 800038a:	4618      	mov	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000edf0 	.word	0xe000edf0
 8000398:	e0001000 	.word	0xe0001000

0800039c <set_pin_output>:
 *      Author: hp15s-pc
 */
#include"temp.h"

void set_pin_output(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
    // 1. Set MODER[2n:2n+1] = 01 (General purpose output)
    DHT_PORT->MODER &= ~(0x3 << (DHT_PIN * 2));
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <set_pin_output+0x54>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <set_pin_output+0x54>)
 80003a6:	f023 030c 	bic.w	r3, r3, #12
 80003aa:	6013      	str	r3, [r2, #0]
    DHT_PORT->MODER |=  (0x1 << (DHT_PIN * 2));
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <set_pin_output+0x54>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0f      	ldr	r2, [pc, #60]	@ (80003f0 <set_pin_output+0x54>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6013      	str	r3, [r2, #0]

    // 2. Set OTYPER[n] = 0 (Push-pull)
    DHT_PORT->OTYPER &= ~(1 << DHT_PIN);
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <set_pin_output+0x54>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <set_pin_output+0x54>)
 80003be:	f023 0302 	bic.w	r3, r3, #2
 80003c2:	6053      	str	r3, [r2, #4]

    // 3. Set OSPEEDR[2n:2n+1] = 01 (Medium speed ~10 MHz)
    DHT_PORT->OSPEEDR &= ~(0x3 << (DHT_PIN * 2));
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <set_pin_output+0x54>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	4a09      	ldr	r2, [pc, #36]	@ (80003f0 <set_pin_output+0x54>)
 80003ca:	f023 030c 	bic.w	r3, r3, #12
 80003ce:	6093      	str	r3, [r2, #8]
    DHT_PORT->OSPEEDR |=  (0x1 << (DHT_PIN * 2));
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <set_pin_output+0x54>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <set_pin_output+0x54>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6093      	str	r3, [r2, #8]

    // 4. Optional: No pull-up/down
    DHT_PORT->PUPDR &= ~(0x3 << (DHT_PIN * 2));
 80003dc:	4b04      	ldr	r3, [pc, #16]	@ (80003f0 <set_pin_output+0x54>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a03      	ldr	r2, [pc, #12]	@ (80003f0 <set_pin_output+0x54>)
 80003e2:	f023 030c 	bic.w	r3, r3, #12
 80003e6:	60d3      	str	r3, [r2, #12]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40020000 	.word	0x40020000

080003f4 <set_pin_input>:
void set_pin_input(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
    // 1. Set MODER[2n:2n+1] = 00 (Input mode)
    DHT_PORT->MODER &= ~(0x3 << (DHT_PIN * 2));
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <set_pin_input+0x24>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <set_pin_input+0x24>)
 80003fe:	f023 030c 	bic.w	r3, r3, #12
 8000402:	6013      	str	r3, [r2, #0]

    // 2. No pull-up/pull-down (floating input)
    DHT_PORT->PUPDR &= ~(0x3 << (DHT_PIN * 2));
 8000404:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <set_pin_input+0x24>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a03      	ldr	r2, [pc, #12]	@ (8000418 <set_pin_input+0x24>)
 800040a:	f023 030c 	bic.w	r3, r3, #12
 800040e:	60d3      	str	r3, [r2, #12]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40020000 	.word	0x40020000

0800041c <DHT_start>:

void DHT_start(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    set_pin_output();
 8000420:	f7ff ffbc 	bl	800039c <set_pin_output>
    DHT_PORT->ODR &= ~(1 << DHT_PIN);   // Pull LOW
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <DHT_start+0x34>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a09      	ldr	r2, [pc, #36]	@ (8000450 <DHT_start+0x34>)
 800042a:	f023 0302 	bic.w	r3, r3, #2
 800042e:	6153      	str	r3, [r2, #20]
    delay_ms(20);                       // ≥18ms
 8000430:	2014      	movs	r0, #20
 8000432:	f000 f8b2 	bl	800059a <delay_ms>
    DHT_PORT->ODR |= (1 << DHT_PIN);    // Pull HIGH
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <DHT_start+0x34>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <DHT_start+0x34>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	6153      	str	r3, [r2, #20]
    delay_us(30);                       // 20-40us
 8000442:	201e      	movs	r0, #30
 8000444:	f000 f895 	bl	8000572 <delay_us>
    set_pin_input();                    // Release line
 8000448:	f7ff ffd4 	bl	80003f4 <set_pin_input>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40020000 	.word	0x40020000

08000454 <DHT_check_response>:

int8_t DHT_check_response(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    delay_us(40);
 8000458:	2028      	movs	r0, #40	@ 0x28
 800045a:	f000 f88a 	bl	8000572 <delay_us>
    if (!(DHT_PORT->IDR & (1 << DHT_PIN))) // LOW for 80us
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <DHT_check_response+0x38>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	2b00      	cmp	r3, #0
 8000468:	d10d      	bne.n	8000486 <DHT_check_response+0x32>
    {
        delay_us(80);
 800046a:	2050      	movs	r0, #80	@ 0x50
 800046c:	f000 f881 	bl	8000572 <delay_us>
        if (DHT_PORT->IDR & (1 << DHT_PIN)) // HIGH for 80us
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <DHT_check_response+0x38>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	f003 0302 	and.w	r3, r3, #2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d004      	beq.n	8000486 <DHT_check_response+0x32>
        {
            delay_us(50);
 800047c:	2032      	movs	r0, #50	@ 0x32
 800047e:	f000 f878 	bl	8000572 <delay_us>
            return 1;
 8000482:	2301      	movs	r3, #1
 8000484:	e000      	b.n	8000488 <DHT_check_response+0x34>
        }
    }
    return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020000 	.word	0x40020000

08000490 <DHT_read_byte>:

uint8_t DHT_read_byte(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 800049a:	2300      	movs	r3, #0
 800049c:	603b      	str	r3, [r7, #0]
 800049e:	e025      	b.n	80004ec <DHT_read_byte+0x5c>
    {
        while (!(DHT_PORT->IDR & (1 << DHT_PIN))); // Wait for HIGH
 80004a0:	bf00      	nop
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <DHT_read_byte+0x6c>)
 80004a4:	691b      	ldr	r3, [r3, #16]
 80004a6:	f003 0302 	and.w	r3, r3, #2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <DHT_read_byte+0x12>
        delay_us(40);
 80004ae:	2028      	movs	r0, #40	@ 0x28
 80004b0:	f000 f85f 	bl	8000572 <delay_us>
        if (DHT_PORT->IDR & (1 << DHT_PIN))
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <DHT_read_byte+0x6c>)
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	f003 0302 	and.w	r3, r3, #2
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00b      	beq.n	80004d8 <DHT_read_byte+0x48>
            byte |= (1 << (7 - i)); // If HIGH after 40us → 1
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	2201      	movs	r2, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	b25a      	sxtb	r2, r3
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	71fb      	strb	r3, [r7, #7]
        while (DHT_PORT->IDR & (1 << DHT_PIN)); // Wait for LOW
 80004d8:	bf00      	nop
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <DHT_read_byte+0x6c>)
 80004dc:	691b      	ldr	r3, [r3, #16]
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1f9      	bne.n	80004da <DHT_read_byte+0x4a>
    for (int i = 0; i < 8; i++)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	ddd6      	ble.n	80004a0 <DHT_read_byte+0x10>
    }
    return byte;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020000 	.word	0x40020000

08000500 <DHT_read>:

uint8_t DHT_read(uint8_t* temp, uint8_t* hum)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
    uint8_t hum_int, hum_dec, temp_int, temp_dec, checksum;

    DHT_start();
 800050a:	f7ff ff87 	bl	800041c <DHT_start>
    if (!DHT_check_response())
 800050e:	f7ff ffa1 	bl	8000454 <DHT_check_response>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d101      	bne.n	800051c <DHT_read+0x1c>
        return 0;
 8000518:	2300      	movs	r3, #0
 800051a:	e026      	b.n	800056a <DHT_read+0x6a>

    hum_int = DHT_read_byte();
 800051c:	f7ff ffb8 	bl	8000490 <DHT_read_byte>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]
    hum_dec = DHT_read_byte();
 8000524:	f7ff ffb4 	bl	8000490 <DHT_read_byte>
 8000528:	4603      	mov	r3, r0
 800052a:	73bb      	strb	r3, [r7, #14]
    temp_int = DHT_read_byte();
 800052c:	f7ff ffb0 	bl	8000490 <DHT_read_byte>
 8000530:	4603      	mov	r3, r0
 8000532:	737b      	strb	r3, [r7, #13]
    temp_dec = DHT_read_byte();
 8000534:	f7ff ffac 	bl	8000490 <DHT_read_byte>
 8000538:	4603      	mov	r3, r0
 800053a:	733b      	strb	r3, [r7, #12]
    checksum = DHT_read_byte();
 800053c:	f7ff ffa8 	bl	8000490 <DHT_read_byte>
 8000540:	4603      	mov	r3, r0
 8000542:	72fb      	strb	r3, [r7, #11]

    if (checksum == (hum_int + hum_dec + temp_int + temp_dec))
 8000544:	7afa      	ldrb	r2, [r7, #11]
 8000546:	7bf9      	ldrb	r1, [r7, #15]
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	4419      	add	r1, r3
 800054c:	7b7b      	ldrb	r3, [r7, #13]
 800054e:	4419      	add	r1, r3
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	440b      	add	r3, r1
 8000554:	429a      	cmp	r2, r3
 8000556:	d107      	bne.n	8000568 <DHT_read+0x68>
    {
        *temp = temp_int;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b7a      	ldrb	r2, [r7, #13]
 800055c:	701a      	strb	r2, [r3, #0]
        *hum = hum_int;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	7bfa      	ldrb	r2, [r7, #15]
 8000562:	701a      	strb	r2, [r3, #0]
        return 1;
 8000564:	2301      	movs	r3, #1
 8000566:	e000      	b.n	800056a <DHT_read+0x6a>
    }
    return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <delay_us>:

void delay_us(uint32_t us)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    us *= 8;  // Rough for 72MHz (adjust if needed)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	607b      	str	r3, [r7, #4]
    while (us--) __NOP();
 8000580:	e000      	b.n	8000584 <delay_us+0x12>
 8000582:	bf00      	nop
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f9      	bne.n	8000582 <delay_us+0x10>
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <delay_ms>:

void delay_ms(uint32_t ms)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
    while (ms--) delay_us(1000);
 80005a2:	e003      	b.n	80005ac <delay_ms+0x12>
 80005a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a8:	f7ff ffe3 	bl	8000572 <delay_us>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f6      	bne.n	80005a4 <delay_ms+0xa>
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db0b      	blt.n	80005ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 021f 	and.w	r2, r3, #31
 80005d8:	4906      	ldr	r1, [pc, #24]	@ (80005f4 <__NVIC_EnableIRQ+0x34>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	2001      	movs	r0, #1
 80005e2:	fa00 f202 	lsl.w	r2, r0, r2
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	e000e100 	.word	0xe000e100

080005f8 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	// gpio settings
	// enable gpio clock - AHB1ENR
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <UartInit+0xac>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <UartInit+0xac>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio mode as alt fn - MODER = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <UartInit+0xb0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <UartInit+0xb0>)
 8000612:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000616:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <UartInit+0xb0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <UartInit+0xb0>)
 800061e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000622:	6013      	str	r3, [r2, #0]
	// set alt fn - AFRL --> AF7 = UART2
	GPIOA->AFR[0] |= (7 << (4*2)) | (7 << (4*3));
 8000624:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <UartInit+0xb0>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <UartInit+0xb0>)
 800062a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800062e:	6213      	str	r3, [r2, #32]
	// disable pull up & pull down - PUPDR
	GPIOA->PUPDR &= ~(BV(2*2) | BV(2*3) | BV(2*2+1) | BV(2*3+1));
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <UartInit+0xb0>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <UartInit+0xb0>)
 8000636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800063a:	60d3      	str	r3, [r2, #12]

	// uart settings
	// enable clock - APB1ENR
	RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <UartInit+0xac>)
 800063e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000642:	641a      	str	r2, [r3, #64]	@ 0x40
	// CR1 = 8N1, Tx En
	USART2->CR1 = USART_CR1_TE;
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <UartInit+0xb4>)
 8000646:	2208      	movs	r2, #8
 8000648:	60da      	str	r2, [r3, #12]
	// CR2 = 1 stop bit (00) -- default setting
	USART2->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <UartInit+0xb4>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <UartInit+0xb4>)
 8000650:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000654:	6113      	str	r3, [r2, #16]
	// set baud rate - BRR
	if(baud == 9600)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800065c:	d104      	bne.n	8000668 <UartInit+0x70>
		USART2->BRR = 0x0683;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <UartInit+0xb4>)
 8000660:	f240 6283 	movw	r2, #1667	@ 0x683
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	e00f      	b.n	8000688 <UartInit+0x90>
	else if(baud == 38400)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800066e:	d104      	bne.n	800067a <UartInit+0x82>
		USART2->BRR = 0x01A1;
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <UartInit+0xb4>)
 8000672:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	e006      	b.n	8000688 <UartInit+0x90>
	else if(baud == 115200)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000680:	d102      	bne.n	8000688 <UartInit+0x90>
		USART2->BRR = 0x008B;
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <UartInit+0xb4>)
 8000684:	228b      	movs	r2, #139	@ 0x8b
 8000686:	609a      	str	r2, [r3, #8]
	// enable uart - CR1
	USART2->CR1 |= USART_CR1_UE;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <UartInit+0xb4>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <UartInit+0xb4>)
 800068e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000692:	60d3      	str	r3, [r2, #12]
	// enable uart intr in NVIC - ISER regr
	NVIC_EnableIRQ(USART2_IRQn);
 8000694:	2026      	movs	r0, #38	@ 0x26
 8000696:	f7ff ff93 	bl	80005c0 <__NVIC_EnableIRQ>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40004400 	.word	0x40004400

080006b0 <UartPuts>:

static int tx_index;
static char *tx_str;
volatile static int tx_completed = 1;

void UartPuts(char *str) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	// wait until prev string is transmitted
	while(tx_completed == 0)
 80006b8:	bf00      	nop
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <UartPuts+0x4c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0fb      	beq.n	80006ba <UartPuts+0xa>
		;
	// write first char into TDR
	tx_str = str;
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <UartPuts+0x50>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <UartPuts+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	tx_completed = 0; // start new str tx
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <UartPuts+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_str[tx_index];
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <UartPuts+0x50>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <UartPuts+0x54>)
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <UartPuts+0x58>)
 80006e2:	605a      	str	r2, [r3, #4]
	// enable tx intr - CR1
	USART2->CR1 |= USART_CR1_TXEIE;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <UartPuts+0x58>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <UartPuts+0x58>)
 80006ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000078 	.word	0x20000078
 8000704:	20000074 	.word	0x20000074
 8000708:	40004400 	.word	0x40004400

0800070c <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	// confirm if tx intr is raised -- look at TXE flag in SR
	if((USART2->SR & USART_SR_TXE) != 0) {
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <USART2_IRQHandler+0x58>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01e      	beq.n	800075a <USART2_IRQHandler+0x4e>
		// go to next char
		tx_index++;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <USART2_IRQHandler+0x5c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <USART2_IRQHandler+0x5c>)
 8000724:	6013      	str	r3, [r2, #0]
		// if \0 char, disable tx intr - CR1
		if(tx_str[tx_index] == '\0') {
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <USART2_IRQHandler+0x60>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <USART2_IRQHandler+0x5c>)
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d109      	bne.n	800074a <USART2_IRQHandler+0x3e>
			USART2->CR1 &= ~USART_CR1_TXEIE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <USART2_IRQHandler+0x58>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <USART2_IRQHandler+0x58>)
 800073c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000740:	60d3      	str	r3, [r2, #12]
			tx_completed = 1;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <USART2_IRQHandler+0x64>)
 8000744:	2201      	movs	r2, #1
 8000746:	601a      	str	r2, [r3, #0]
	}
	// check if rx intr is raised -- (when rx intr is enabled and new char is received)
	//if((USART2->SR & USART_SR_RXNE) != 0) {
	//	// write rx intr handling logic here
	//}
}
 8000748:	e007      	b.n	800075a <USART2_IRQHandler+0x4e>
			USART2->DR = tx_str[tx_index];
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <USART2_IRQHandler+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <USART2_IRQHandler+0x5c>)
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	4413      	add	r3, r2
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <USART2_IRQHandler+0x58>)
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400
 8000768:	20000074 	.word	0x20000074
 800076c:	20000078 	.word	0x20000078
 8000770:	20000000 	.word	0x20000000

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f7ff fdda 	bl	8000330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	@ (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	@ (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f000 f839 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fd63 	bl	8000270 <main>

080007aa <LoopForever>:

LoopForever:
  b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80007b8:	08001174 	.word	0x08001174
  ldr r2, =_sbss
 80007bc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80007c0:	200001c4 	.word	0x200001c4

080007c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>
	...

080007c8 <siprintf>:
 80007c8:	b40e      	push	{r1, r2, r3}
 80007ca:	b510      	push	{r4, lr}
 80007cc:	b09d      	sub	sp, #116	@ 0x74
 80007ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80007d0:	9002      	str	r0, [sp, #8]
 80007d2:	9006      	str	r0, [sp, #24]
 80007d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <siprintf+0x3c>)
 80007da:	9107      	str	r1, [sp, #28]
 80007dc:	9104      	str	r1, [sp, #16]
 80007de:	490a      	ldr	r1, [pc, #40]	@ (8000808 <siprintf+0x40>)
 80007e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80007e4:	9105      	str	r1, [sp, #20]
 80007e6:	2400      	movs	r4, #0
 80007e8:	a902      	add	r1, sp, #8
 80007ea:	6800      	ldr	r0, [r0, #0]
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80007f0:	f000 f98c 	bl	8000b0c <_svfiprintf_r>
 80007f4:	9b02      	ldr	r3, [sp, #8]
 80007f6:	701c      	strb	r4, [r3, #0]
 80007f8:	b01d      	add	sp, #116	@ 0x74
 80007fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007fe:	b003      	add	sp, #12
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000004 	.word	0x20000004
 8000808:	ffff0208 	.word	0xffff0208

0800080c <__errno>:
 800080c:	4b01      	ldr	r3, [pc, #4]	@ (8000814 <__errno+0x8>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000004 	.word	0x20000004

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4d0d      	ldr	r5, [pc, #52]	@ (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	@ (8000854 <__libc_init_array+0x3c>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2600      	movs	r6, #0
 8000824:	42a6      	cmp	r6, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4d0b      	ldr	r5, [pc, #44]	@ (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	@ (800085c <__libc_init_array+0x44>)
 800082c:	f000 fc64 	bl	80010f8 <_init>
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2600      	movs	r6, #0
 8000836:	42a6      	cmp	r6, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000840:	4798      	blx	r3
 8000842:	3601      	adds	r6, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f855 3b04 	ldr.w	r3, [r5], #4
 800084a:	4798      	blx	r3
 800084c:	3601      	adds	r6, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	0800116c 	.word	0x0800116c
 8000854:	0800116c 	.word	0x0800116c
 8000858:	0800116c 	.word	0x0800116c
 800085c:	08001170 	.word	0x08001170

08000860 <__retarget_lock_acquire_recursive>:
 8000860:	4770      	bx	lr

08000862 <__retarget_lock_release_recursive>:
 8000862:	4770      	bx	lr

08000864 <_free_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4605      	mov	r5, r0
 8000868:	2900      	cmp	r1, #0
 800086a:	d041      	beq.n	80008f0 <_free_r+0x8c>
 800086c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000870:	1f0c      	subs	r4, r1, #4
 8000872:	2b00      	cmp	r3, #0
 8000874:	bfb8      	it	lt
 8000876:	18e4      	addlt	r4, r4, r3
 8000878:	f000 f8e0 	bl	8000a3c <__malloc_lock>
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <_free_r+0x90>)
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	b933      	cbnz	r3, 8000890 <_free_r+0x2c>
 8000882:	6063      	str	r3, [r4, #4]
 8000884:	6014      	str	r4, [r2, #0]
 8000886:	4628      	mov	r0, r5
 8000888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800088c:	f000 b8dc 	b.w	8000a48 <__malloc_unlock>
 8000890:	42a3      	cmp	r3, r4
 8000892:	d908      	bls.n	80008a6 <_free_r+0x42>
 8000894:	6820      	ldr	r0, [r4, #0]
 8000896:	1821      	adds	r1, r4, r0
 8000898:	428b      	cmp	r3, r1
 800089a:	bf01      	itttt	eq
 800089c:	6819      	ldreq	r1, [r3, #0]
 800089e:	685b      	ldreq	r3, [r3, #4]
 80008a0:	1809      	addeq	r1, r1, r0
 80008a2:	6021      	streq	r1, [r4, #0]
 80008a4:	e7ed      	b.n	8000882 <_free_r+0x1e>
 80008a6:	461a      	mov	r2, r3
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	b10b      	cbz	r3, 80008b0 <_free_r+0x4c>
 80008ac:	42a3      	cmp	r3, r4
 80008ae:	d9fa      	bls.n	80008a6 <_free_r+0x42>
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	1850      	adds	r0, r2, r1
 80008b4:	42a0      	cmp	r0, r4
 80008b6:	d10b      	bne.n	80008d0 <_free_r+0x6c>
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	4401      	add	r1, r0
 80008bc:	1850      	adds	r0, r2, r1
 80008be:	4283      	cmp	r3, r0
 80008c0:	6011      	str	r1, [r2, #0]
 80008c2:	d1e0      	bne.n	8000886 <_free_r+0x22>
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	6053      	str	r3, [r2, #4]
 80008ca:	4408      	add	r0, r1
 80008cc:	6010      	str	r0, [r2, #0]
 80008ce:	e7da      	b.n	8000886 <_free_r+0x22>
 80008d0:	d902      	bls.n	80008d8 <_free_r+0x74>
 80008d2:	230c      	movs	r3, #12
 80008d4:	602b      	str	r3, [r5, #0]
 80008d6:	e7d6      	b.n	8000886 <_free_r+0x22>
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	1821      	adds	r1, r4, r0
 80008dc:	428b      	cmp	r3, r1
 80008de:	bf04      	itt	eq
 80008e0:	6819      	ldreq	r1, [r3, #0]
 80008e2:	685b      	ldreq	r3, [r3, #4]
 80008e4:	6063      	str	r3, [r4, #4]
 80008e6:	bf04      	itt	eq
 80008e8:	1809      	addeq	r1, r1, r0
 80008ea:	6021      	streq	r1, [r4, #0]
 80008ec:	6054      	str	r4, [r2, #4]
 80008ee:	e7ca      	b.n	8000886 <_free_r+0x22>
 80008f0:	bd38      	pop	{r3, r4, r5, pc}
 80008f2:	bf00      	nop
 80008f4:	200001c0 	.word	0x200001c0

080008f8 <sbrk_aligned>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4e0f      	ldr	r6, [pc, #60]	@ (8000938 <sbrk_aligned+0x40>)
 80008fc:	460c      	mov	r4, r1
 80008fe:	6831      	ldr	r1, [r6, #0]
 8000900:	4605      	mov	r5, r0
 8000902:	b911      	cbnz	r1, 800090a <sbrk_aligned+0x12>
 8000904:	f000 fba4 	bl	8001050 <_sbrk_r>
 8000908:	6030      	str	r0, [r6, #0]
 800090a:	4621      	mov	r1, r4
 800090c:	4628      	mov	r0, r5
 800090e:	f000 fb9f 	bl	8001050 <_sbrk_r>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	d103      	bne.n	800091e <sbrk_aligned+0x26>
 8000916:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800091a:	4620      	mov	r0, r4
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	1cc4      	adds	r4, r0, #3
 8000920:	f024 0403 	bic.w	r4, r4, #3
 8000924:	42a0      	cmp	r0, r4
 8000926:	d0f8      	beq.n	800091a <sbrk_aligned+0x22>
 8000928:	1a21      	subs	r1, r4, r0
 800092a:	4628      	mov	r0, r5
 800092c:	f000 fb90 	bl	8001050 <_sbrk_r>
 8000930:	3001      	adds	r0, #1
 8000932:	d1f2      	bne.n	800091a <sbrk_aligned+0x22>
 8000934:	e7ef      	b.n	8000916 <sbrk_aligned+0x1e>
 8000936:	bf00      	nop
 8000938:	200001bc 	.word	0x200001bc

0800093c <_malloc_r>:
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	1ccd      	adds	r5, r1, #3
 8000942:	f025 0503 	bic.w	r5, r5, #3
 8000946:	3508      	adds	r5, #8
 8000948:	2d0c      	cmp	r5, #12
 800094a:	bf38      	it	cc
 800094c:	250c      	movcc	r5, #12
 800094e:	2d00      	cmp	r5, #0
 8000950:	4606      	mov	r6, r0
 8000952:	db01      	blt.n	8000958 <_malloc_r+0x1c>
 8000954:	42a9      	cmp	r1, r5
 8000956:	d904      	bls.n	8000962 <_malloc_r+0x26>
 8000958:	230c      	movs	r3, #12
 800095a:	6033      	str	r3, [r6, #0]
 800095c:	2000      	movs	r0, #0
 800095e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a38 <_malloc_r+0xfc>
 8000966:	f000 f869 	bl	8000a3c <__malloc_lock>
 800096a:	f8d8 3000 	ldr.w	r3, [r8]
 800096e:	461c      	mov	r4, r3
 8000970:	bb44      	cbnz	r4, 80009c4 <_malloc_r+0x88>
 8000972:	4629      	mov	r1, r5
 8000974:	4630      	mov	r0, r6
 8000976:	f7ff ffbf 	bl	80008f8 <sbrk_aligned>
 800097a:	1c43      	adds	r3, r0, #1
 800097c:	4604      	mov	r4, r0
 800097e:	d158      	bne.n	8000a32 <_malloc_r+0xf6>
 8000980:	f8d8 4000 	ldr.w	r4, [r8]
 8000984:	4627      	mov	r7, r4
 8000986:	2f00      	cmp	r7, #0
 8000988:	d143      	bne.n	8000a12 <_malloc_r+0xd6>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d04b      	beq.n	8000a26 <_malloc_r+0xea>
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	4639      	mov	r1, r7
 8000992:	4630      	mov	r0, r6
 8000994:	eb04 0903 	add.w	r9, r4, r3
 8000998:	f000 fb5a 	bl	8001050 <_sbrk_r>
 800099c:	4581      	cmp	r9, r0
 800099e:	d142      	bne.n	8000a26 <_malloc_r+0xea>
 80009a0:	6821      	ldr	r1, [r4, #0]
 80009a2:	1a6d      	subs	r5, r5, r1
 80009a4:	4629      	mov	r1, r5
 80009a6:	4630      	mov	r0, r6
 80009a8:	f7ff ffa6 	bl	80008f8 <sbrk_aligned>
 80009ac:	3001      	adds	r0, #1
 80009ae:	d03a      	beq.n	8000a26 <_malloc_r+0xea>
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	442b      	add	r3, r5
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	f8d8 3000 	ldr.w	r3, [r8]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	bb62      	cbnz	r2, 8000a18 <_malloc_r+0xdc>
 80009be:	f8c8 7000 	str.w	r7, [r8]
 80009c2:	e00f      	b.n	80009e4 <_malloc_r+0xa8>
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	1b52      	subs	r2, r2, r5
 80009c8:	d420      	bmi.n	8000a0c <_malloc_r+0xd0>
 80009ca:	2a0b      	cmp	r2, #11
 80009cc:	d917      	bls.n	80009fe <_malloc_r+0xc2>
 80009ce:	1961      	adds	r1, r4, r5
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	6025      	str	r5, [r4, #0]
 80009d4:	bf18      	it	ne
 80009d6:	6059      	strne	r1, [r3, #4]
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	bf08      	it	eq
 80009dc:	f8c8 1000 	streq.w	r1, [r8]
 80009e0:	5162      	str	r2, [r4, r5]
 80009e2:	604b      	str	r3, [r1, #4]
 80009e4:	4630      	mov	r0, r6
 80009e6:	f000 f82f 	bl	8000a48 <__malloc_unlock>
 80009ea:	f104 000b 	add.w	r0, r4, #11
 80009ee:	1d23      	adds	r3, r4, #4
 80009f0:	f020 0007 	bic.w	r0, r0, #7
 80009f4:	1ac2      	subs	r2, r0, r3
 80009f6:	bf1c      	itt	ne
 80009f8:	1a1b      	subne	r3, r3, r0
 80009fa:	50a3      	strne	r3, [r4, r2]
 80009fc:	e7af      	b.n	800095e <_malloc_r+0x22>
 80009fe:	6862      	ldr	r2, [r4, #4]
 8000a00:	42a3      	cmp	r3, r4
 8000a02:	bf0c      	ite	eq
 8000a04:	f8c8 2000 	streq.w	r2, [r8]
 8000a08:	605a      	strne	r2, [r3, #4]
 8000a0a:	e7eb      	b.n	80009e4 <_malloc_r+0xa8>
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	6864      	ldr	r4, [r4, #4]
 8000a10:	e7ae      	b.n	8000970 <_malloc_r+0x34>
 8000a12:	463c      	mov	r4, r7
 8000a14:	687f      	ldr	r7, [r7, #4]
 8000a16:	e7b6      	b.n	8000986 <_malloc_r+0x4a>
 8000a18:	461a      	mov	r2, r3
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d1fb      	bne.n	8000a18 <_malloc_r+0xdc>
 8000a20:	2300      	movs	r3, #0
 8000a22:	6053      	str	r3, [r2, #4]
 8000a24:	e7de      	b.n	80009e4 <_malloc_r+0xa8>
 8000a26:	230c      	movs	r3, #12
 8000a28:	6033      	str	r3, [r6, #0]
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f000 f80c 	bl	8000a48 <__malloc_unlock>
 8000a30:	e794      	b.n	800095c <_malloc_r+0x20>
 8000a32:	6005      	str	r5, [r0, #0]
 8000a34:	e7d6      	b.n	80009e4 <_malloc_r+0xa8>
 8000a36:	bf00      	nop
 8000a38:	200001c0 	.word	0x200001c0

08000a3c <__malloc_lock>:
 8000a3c:	4801      	ldr	r0, [pc, #4]	@ (8000a44 <__malloc_lock+0x8>)
 8000a3e:	f7ff bf0f 	b.w	8000860 <__retarget_lock_acquire_recursive>
 8000a42:	bf00      	nop
 8000a44:	200001b8 	.word	0x200001b8

08000a48 <__malloc_unlock>:
 8000a48:	4801      	ldr	r0, [pc, #4]	@ (8000a50 <__malloc_unlock+0x8>)
 8000a4a:	f7ff bf0a 	b.w	8000862 <__retarget_lock_release_recursive>
 8000a4e:	bf00      	nop
 8000a50:	200001b8 	.word	0x200001b8

08000a54 <__ssputs_r>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	688e      	ldr	r6, [r1, #8]
 8000a5a:	461f      	mov	r7, r3
 8000a5c:	42be      	cmp	r6, r7
 8000a5e:	680b      	ldr	r3, [r1, #0]
 8000a60:	4682      	mov	sl, r0
 8000a62:	460c      	mov	r4, r1
 8000a64:	4690      	mov	r8, r2
 8000a66:	d82d      	bhi.n	8000ac4 <__ssputs_r+0x70>
 8000a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a70:	d026      	beq.n	8000ac0 <__ssputs_r+0x6c>
 8000a72:	6965      	ldr	r5, [r4, #20]
 8000a74:	6909      	ldr	r1, [r1, #16]
 8000a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a7a:	eba3 0901 	sub.w	r9, r3, r1
 8000a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a82:	1c7b      	adds	r3, r7, #1
 8000a84:	444b      	add	r3, r9
 8000a86:	106d      	asrs	r5, r5, #1
 8000a88:	429d      	cmp	r5, r3
 8000a8a:	bf38      	it	cc
 8000a8c:	461d      	movcc	r5, r3
 8000a8e:	0553      	lsls	r3, r2, #21
 8000a90:	d527      	bpl.n	8000ae2 <__ssputs_r+0x8e>
 8000a92:	4629      	mov	r1, r5
 8000a94:	f7ff ff52 	bl	800093c <_malloc_r>
 8000a98:	4606      	mov	r6, r0
 8000a9a:	b360      	cbz	r0, 8000af6 <__ssputs_r+0xa2>
 8000a9c:	6921      	ldr	r1, [r4, #16]
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	f000 fae6 	bl	8001070 <memcpy>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aae:	81a3      	strh	r3, [r4, #12]
 8000ab0:	6126      	str	r6, [r4, #16]
 8000ab2:	6165      	str	r5, [r4, #20]
 8000ab4:	444e      	add	r6, r9
 8000ab6:	eba5 0509 	sub.w	r5, r5, r9
 8000aba:	6026      	str	r6, [r4, #0]
 8000abc:	60a5      	str	r5, [r4, #8]
 8000abe:	463e      	mov	r6, r7
 8000ac0:	42be      	cmp	r6, r7
 8000ac2:	d900      	bls.n	8000ac6 <__ssputs_r+0x72>
 8000ac4:	463e      	mov	r6, r7
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	4632      	mov	r2, r6
 8000aca:	4641      	mov	r1, r8
 8000acc:	f000 faa6 	bl	800101c <memmove>
 8000ad0:	68a3      	ldr	r3, [r4, #8]
 8000ad2:	1b9b      	subs	r3, r3, r6
 8000ad4:	60a3      	str	r3, [r4, #8]
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	4433      	add	r3, r6
 8000ada:	6023      	str	r3, [r4, #0]
 8000adc:	2000      	movs	r0, #0
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	f000 fad2 	bl	800108c <_realloc_r>
 8000ae8:	4606      	mov	r6, r0
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d1e0      	bne.n	8000ab0 <__ssputs_r+0x5c>
 8000aee:	6921      	ldr	r1, [r4, #16]
 8000af0:	4650      	mov	r0, sl
 8000af2:	f7ff feb7 	bl	8000864 <_free_r>
 8000af6:	230c      	movs	r3, #12
 8000af8:	f8ca 3000 	str.w	r3, [sl]
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b02:	81a3      	strh	r3, [r4, #12]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b08:	e7e9      	b.n	8000ade <__ssputs_r+0x8a>
	...

08000b0c <_svfiprintf_r>:
 8000b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b10:	4698      	mov	r8, r3
 8000b12:	898b      	ldrh	r3, [r1, #12]
 8000b14:	061b      	lsls	r3, r3, #24
 8000b16:	b09d      	sub	sp, #116	@ 0x74
 8000b18:	4607      	mov	r7, r0
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4614      	mov	r4, r2
 8000b1e:	d510      	bpl.n	8000b42 <_svfiprintf_r+0x36>
 8000b20:	690b      	ldr	r3, [r1, #16]
 8000b22:	b973      	cbnz	r3, 8000b42 <_svfiprintf_r+0x36>
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	f7ff ff09 	bl	800093c <_malloc_r>
 8000b2a:	6028      	str	r0, [r5, #0]
 8000b2c:	6128      	str	r0, [r5, #16]
 8000b2e:	b930      	cbnz	r0, 8000b3e <_svfiprintf_r+0x32>
 8000b30:	230c      	movs	r3, #12
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b38:	b01d      	add	sp, #116	@ 0x74
 8000b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	2340      	movs	r3, #64	@ 0x40
 8000b40:	616b      	str	r3, [r5, #20]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b46:	2320      	movs	r3, #32
 8000b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b50:	2330      	movs	r3, #48	@ 0x30
 8000b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cf0 <_svfiprintf_r+0x1e4>
 8000b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b5a:	f04f 0901 	mov.w	r9, #1
 8000b5e:	4623      	mov	r3, r4
 8000b60:	469a      	mov	sl, r3
 8000b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b66:	b10a      	cbz	r2, 8000b6c <_svfiprintf_r+0x60>
 8000b68:	2a25      	cmp	r2, #37	@ 0x25
 8000b6a:	d1f9      	bne.n	8000b60 <_svfiprintf_r+0x54>
 8000b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8000b70:	d00b      	beq.n	8000b8a <_svfiprintf_r+0x7e>
 8000b72:	465b      	mov	r3, fp
 8000b74:	4622      	mov	r2, r4
 8000b76:	4629      	mov	r1, r5
 8000b78:	4638      	mov	r0, r7
 8000b7a:	f7ff ff6b 	bl	8000a54 <__ssputs_r>
 8000b7e:	3001      	adds	r0, #1
 8000b80:	f000 80a7 	beq.w	8000cd2 <_svfiprintf_r+0x1c6>
 8000b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b86:	445a      	add	r2, fp
 8000b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 809f 	beq.w	8000cd2 <_svfiprintf_r+0x1c6>
 8000b94:	2300      	movs	r3, #0
 8000b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b9e:	f10a 0a01 	add.w	sl, sl, #1
 8000ba2:	9304      	str	r3, [sp, #16]
 8000ba4:	9307      	str	r3, [sp, #28]
 8000ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bac:	4654      	mov	r4, sl
 8000bae:	2205      	movs	r2, #5
 8000bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb4:	484e      	ldr	r0, [pc, #312]	@ (8000cf0 <_svfiprintf_r+0x1e4>)
 8000bb6:	f7ff fb0b 	bl	80001d0 <memchr>
 8000bba:	9a04      	ldr	r2, [sp, #16]
 8000bbc:	b9d8      	cbnz	r0, 8000bf6 <_svfiprintf_r+0xea>
 8000bbe:	06d0      	lsls	r0, r2, #27
 8000bc0:	bf44      	itt	mi
 8000bc2:	2320      	movmi	r3, #32
 8000bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bc8:	0711      	lsls	r1, r2, #28
 8000bca:	bf44      	itt	mi
 8000bcc:	232b      	movmi	r3, #43	@ 0x2b
 8000bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd8:	d015      	beq.n	8000c06 <_svfiprintf_r+0xfa>
 8000bda:	9a07      	ldr	r2, [sp, #28]
 8000bdc:	4654      	mov	r4, sl
 8000bde:	2000      	movs	r0, #0
 8000be0:	f04f 0c0a 	mov.w	ip, #10
 8000be4:	4621      	mov	r1, r4
 8000be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bea:	3b30      	subs	r3, #48	@ 0x30
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	d94b      	bls.n	8000c88 <_svfiprintf_r+0x17c>
 8000bf0:	b1b0      	cbz	r0, 8000c20 <_svfiprintf_r+0x114>
 8000bf2:	9207      	str	r2, [sp, #28]
 8000bf4:	e014      	b.n	8000c20 <_svfiprintf_r+0x114>
 8000bf6:	eba0 0308 	sub.w	r3, r0, r8
 8000bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	9304      	str	r3, [sp, #16]
 8000c02:	46a2      	mov	sl, r4
 8000c04:	e7d2      	b.n	8000bac <_svfiprintf_r+0xa0>
 8000c06:	9b03      	ldr	r3, [sp, #12]
 8000c08:	1d19      	adds	r1, r3, #4
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	9103      	str	r1, [sp, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfbb      	ittet	lt
 8000c12:	425b      	neglt	r3, r3
 8000c14:	f042 0202 	orrlt.w	r2, r2, #2
 8000c18:	9307      	strge	r3, [sp, #28]
 8000c1a:	9307      	strlt	r3, [sp, #28]
 8000c1c:	bfb8      	it	lt
 8000c1e:	9204      	strlt	r2, [sp, #16]
 8000c20:	7823      	ldrb	r3, [r4, #0]
 8000c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c24:	d10a      	bne.n	8000c3c <_svfiprintf_r+0x130>
 8000c26:	7863      	ldrb	r3, [r4, #1]
 8000c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c2a:	d132      	bne.n	8000c92 <_svfiprintf_r+0x186>
 8000c2c:	9b03      	ldr	r3, [sp, #12]
 8000c2e:	1d1a      	adds	r2, r3, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	9203      	str	r2, [sp, #12]
 8000c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c38:	3402      	adds	r4, #2
 8000c3a:	9305      	str	r3, [sp, #20]
 8000c3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000cf4 <_svfiprintf_r+0x1e8>
 8000c40:	7821      	ldrb	r1, [r4, #0]
 8000c42:	2203      	movs	r2, #3
 8000c44:	4650      	mov	r0, sl
 8000c46:	f7ff fac3 	bl	80001d0 <memchr>
 8000c4a:	b138      	cbz	r0, 8000c5c <_svfiprintf_r+0x150>
 8000c4c:	9b04      	ldr	r3, [sp, #16]
 8000c4e:	eba0 000a 	sub.w	r0, r0, sl
 8000c52:	2240      	movs	r2, #64	@ 0x40
 8000c54:	4082      	lsls	r2, r0
 8000c56:	4313      	orrs	r3, r2
 8000c58:	3401      	adds	r4, #1
 8000c5a:	9304      	str	r3, [sp, #16]
 8000c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c60:	4825      	ldr	r0, [pc, #148]	@ (8000cf8 <_svfiprintf_r+0x1ec>)
 8000c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c66:	2206      	movs	r2, #6
 8000c68:	f7ff fab2 	bl	80001d0 <memchr>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d036      	beq.n	8000cde <_svfiprintf_r+0x1d2>
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <_svfiprintf_r+0x1f0>)
 8000c72:	bb1b      	cbnz	r3, 8000cbc <_svfiprintf_r+0x1b0>
 8000c74:	9b03      	ldr	r3, [sp, #12]
 8000c76:	3307      	adds	r3, #7
 8000c78:	f023 0307 	bic.w	r3, r3, #7
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	9303      	str	r3, [sp, #12]
 8000c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c82:	4433      	add	r3, r6
 8000c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c86:	e76a      	b.n	8000b5e <_svfiprintf_r+0x52>
 8000c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	2001      	movs	r0, #1
 8000c90:	e7a8      	b.n	8000be4 <_svfiprintf_r+0xd8>
 8000c92:	2300      	movs	r3, #0
 8000c94:	3401      	adds	r4, #1
 8000c96:	9305      	str	r3, [sp, #20]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 0c0a 	mov.w	ip, #10
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ca4:	3a30      	subs	r2, #48	@ 0x30
 8000ca6:	2a09      	cmp	r2, #9
 8000ca8:	d903      	bls.n	8000cb2 <_svfiprintf_r+0x1a6>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0c6      	beq.n	8000c3c <_svfiprintf_r+0x130>
 8000cae:	9105      	str	r1, [sp, #20]
 8000cb0:	e7c4      	b.n	8000c3c <_svfiprintf_r+0x130>
 8000cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e7f0      	b.n	8000c9e <_svfiprintf_r+0x192>
 8000cbc:	ab03      	add	r3, sp, #12
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	462a      	mov	r2, r5
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <_svfiprintf_r+0x1f4>)
 8000cc4:	a904      	add	r1, sp, #16
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	f3af 8000 	nop.w
 8000ccc:	1c42      	adds	r2, r0, #1
 8000cce:	4606      	mov	r6, r0
 8000cd0:	d1d6      	bne.n	8000c80 <_svfiprintf_r+0x174>
 8000cd2:	89ab      	ldrh	r3, [r5, #12]
 8000cd4:	065b      	lsls	r3, r3, #25
 8000cd6:	f53f af2d 	bmi.w	8000b34 <_svfiprintf_r+0x28>
 8000cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cdc:	e72c      	b.n	8000b38 <_svfiprintf_r+0x2c>
 8000cde:	ab03      	add	r3, sp, #12
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	462a      	mov	r2, r5
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <_svfiprintf_r+0x1f4>)
 8000ce6:	a904      	add	r1, sp, #16
 8000ce8:	4638      	mov	r0, r7
 8000cea:	f000 f879 	bl	8000de0 <_printf_i>
 8000cee:	e7ed      	b.n	8000ccc <_svfiprintf_r+0x1c0>
 8000cf0:	08001130 	.word	0x08001130
 8000cf4:	08001136 	.word	0x08001136
 8000cf8:	0800113a 	.word	0x0800113a
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	08000a55 	.word	0x08000a55

08000d04 <_printf_common>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	4616      	mov	r6, r2
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	688a      	ldr	r2, [r1, #8]
 8000d0e:	690b      	ldr	r3, [r1, #16]
 8000d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bfb8      	it	lt
 8000d18:	4613      	movlt	r3, r2
 8000d1a:	6033      	str	r3, [r6, #0]
 8000d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d20:	4607      	mov	r7, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	b10a      	cbz	r2, 8000d2a <_printf_common+0x26>
 8000d26:	3301      	adds	r3, #1
 8000d28:	6033      	str	r3, [r6, #0]
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	0699      	lsls	r1, r3, #26
 8000d2e:	bf42      	ittt	mi
 8000d30:	6833      	ldrmi	r3, [r6, #0]
 8000d32:	3302      	addmi	r3, #2
 8000d34:	6033      	strmi	r3, [r6, #0]
 8000d36:	6825      	ldr	r5, [r4, #0]
 8000d38:	f015 0506 	ands.w	r5, r5, #6
 8000d3c:	d106      	bne.n	8000d4c <_printf_common+0x48>
 8000d3e:	f104 0a19 	add.w	sl, r4, #25
 8000d42:	68e3      	ldr	r3, [r4, #12]
 8000d44:	6832      	ldr	r2, [r6, #0]
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	dc26      	bgt.n	8000d9a <_printf_common+0x96>
 8000d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	3b00      	subs	r3, #0
 8000d54:	bf18      	it	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	0692      	lsls	r2, r2, #26
 8000d5a:	d42b      	bmi.n	8000db4 <_printf_common+0xb0>
 8000d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d60:	4641      	mov	r1, r8
 8000d62:	4638      	mov	r0, r7
 8000d64:	47c8      	blx	r9
 8000d66:	3001      	adds	r0, #1
 8000d68:	d01e      	beq.n	8000da8 <_printf_common+0xa4>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	6922      	ldr	r2, [r4, #16]
 8000d6e:	f003 0306 	and.w	r3, r3, #6
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf02      	ittt	eq
 8000d76:	68e5      	ldreq	r5, [r4, #12]
 8000d78:	6833      	ldreq	r3, [r6, #0]
 8000d7a:	1aed      	subeq	r5, r5, r3
 8000d7c:	68a3      	ldr	r3, [r4, #8]
 8000d7e:	bf0c      	ite	eq
 8000d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d84:	2500      	movne	r5, #0
 8000d86:	4293      	cmp	r3, r2
 8000d88:	bfc4      	itt	gt
 8000d8a:	1a9b      	subgt	r3, r3, r2
 8000d8c:	18ed      	addgt	r5, r5, r3
 8000d8e:	2600      	movs	r6, #0
 8000d90:	341a      	adds	r4, #26
 8000d92:	42b5      	cmp	r5, r6
 8000d94:	d11a      	bne.n	8000dcc <_printf_common+0xc8>
 8000d96:	2000      	movs	r0, #0
 8000d98:	e008      	b.n	8000dac <_printf_common+0xa8>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4652      	mov	r2, sl
 8000d9e:	4641      	mov	r1, r8
 8000da0:	4638      	mov	r0, r7
 8000da2:	47c8      	blx	r9
 8000da4:	3001      	adds	r0, #1
 8000da6:	d103      	bne.n	8000db0 <_printf_common+0xac>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	3501      	adds	r5, #1
 8000db2:	e7c6      	b.n	8000d42 <_printf_common+0x3e>
 8000db4:	18e1      	adds	r1, r4, r3
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	2030      	movs	r0, #48	@ 0x30
 8000dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dbe:	4422      	add	r2, r4
 8000dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dc8:	3302      	adds	r3, #2
 8000dca:	e7c7      	b.n	8000d5c <_printf_common+0x58>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4641      	mov	r1, r8
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	47c8      	blx	r9
 8000dd6:	3001      	adds	r0, #1
 8000dd8:	d0e6      	beq.n	8000da8 <_printf_common+0xa4>
 8000dda:	3601      	adds	r6, #1
 8000ddc:	e7d9      	b.n	8000d92 <_printf_common+0x8e>
	...

08000de0 <_printf_i>:
 8000de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	7e0f      	ldrb	r7, [r1, #24]
 8000de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000de8:	2f78      	cmp	r7, #120	@ 0x78
 8000dea:	4691      	mov	r9, r2
 8000dec:	4680      	mov	r8, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	469a      	mov	sl, r3
 8000df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000df6:	d807      	bhi.n	8000e08 <_printf_i+0x28>
 8000df8:	2f62      	cmp	r7, #98	@ 0x62
 8000dfa:	d80a      	bhi.n	8000e12 <_printf_i+0x32>
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	f000 80d1 	beq.w	8000fa4 <_printf_i+0x1c4>
 8000e02:	2f58      	cmp	r7, #88	@ 0x58
 8000e04:	f000 80b8 	beq.w	8000f78 <_printf_i+0x198>
 8000e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e10:	e03a      	b.n	8000e88 <_printf_i+0xa8>
 8000e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e16:	2b15      	cmp	r3, #21
 8000e18:	d8f6      	bhi.n	8000e08 <_printf_i+0x28>
 8000e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8000e20 <_printf_i+0x40>)
 8000e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e20:	08000e79 	.word	0x08000e79
 8000e24:	08000e8d 	.word	0x08000e8d
 8000e28:	08000e09 	.word	0x08000e09
 8000e2c:	08000e09 	.word	0x08000e09
 8000e30:	08000e09 	.word	0x08000e09
 8000e34:	08000e09 	.word	0x08000e09
 8000e38:	08000e8d 	.word	0x08000e8d
 8000e3c:	08000e09 	.word	0x08000e09
 8000e40:	08000e09 	.word	0x08000e09
 8000e44:	08000e09 	.word	0x08000e09
 8000e48:	08000e09 	.word	0x08000e09
 8000e4c:	08000f8b 	.word	0x08000f8b
 8000e50:	08000eb7 	.word	0x08000eb7
 8000e54:	08000f45 	.word	0x08000f45
 8000e58:	08000e09 	.word	0x08000e09
 8000e5c:	08000e09 	.word	0x08000e09
 8000e60:	08000fad 	.word	0x08000fad
 8000e64:	08000e09 	.word	0x08000e09
 8000e68:	08000eb7 	.word	0x08000eb7
 8000e6c:	08000e09 	.word	0x08000e09
 8000e70:	08000e09 	.word	0x08000e09
 8000e74:	08000f4d 	.word	0x08000f4d
 8000e78:	6833      	ldr	r3, [r6, #0]
 8000e7a:	1d1a      	adds	r2, r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6032      	str	r2, [r6, #0]
 8000e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e09c      	b.n	8000fc6 <_printf_i+0x1e6>
 8000e8c:	6833      	ldr	r3, [r6, #0]
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	1d19      	adds	r1, r3, #4
 8000e92:	6031      	str	r1, [r6, #0]
 8000e94:	0606      	lsls	r6, r0, #24
 8000e96:	d501      	bpl.n	8000e9c <_printf_i+0xbc>
 8000e98:	681d      	ldr	r5, [r3, #0]
 8000e9a:	e003      	b.n	8000ea4 <_printf_i+0xc4>
 8000e9c:	0645      	lsls	r5, r0, #25
 8000e9e:	d5fb      	bpl.n	8000e98 <_printf_i+0xb8>
 8000ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	da03      	bge.n	8000eb0 <_printf_i+0xd0>
 8000ea8:	232d      	movs	r3, #45	@ 0x2d
 8000eaa:	426d      	negs	r5, r5
 8000eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eb0:	4858      	ldr	r0, [pc, #352]	@ (8001014 <_printf_i+0x234>)
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	e011      	b.n	8000eda <_printf_i+0xfa>
 8000eb6:	6821      	ldr	r1, [r4, #0]
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	0608      	lsls	r0, r1, #24
 8000ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ec0:	d402      	bmi.n	8000ec8 <_printf_i+0xe8>
 8000ec2:	0649      	lsls	r1, r1, #25
 8000ec4:	bf48      	it	mi
 8000ec6:	b2ad      	uxthmi	r5, r5
 8000ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000eca:	4852      	ldr	r0, [pc, #328]	@ (8001014 <_printf_i+0x234>)
 8000ecc:	6033      	str	r3, [r6, #0]
 8000ece:	bf14      	ite	ne
 8000ed0:	230a      	movne	r3, #10
 8000ed2:	2308      	moveq	r3, #8
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000eda:	6866      	ldr	r6, [r4, #4]
 8000edc:	60a6      	str	r6, [r4, #8]
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	db05      	blt.n	8000eee <_printf_i+0x10e>
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	432e      	orrs	r6, r5
 8000ee6:	f021 0104 	bic.w	r1, r1, #4
 8000eea:	6021      	str	r1, [r4, #0]
 8000eec:	d04b      	beq.n	8000f86 <_printf_i+0x1a6>
 8000eee:	4616      	mov	r6, r2
 8000ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8000ef8:	5dc7      	ldrb	r7, [r0, r7]
 8000efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000efe:	462f      	mov	r7, r5
 8000f00:	42bb      	cmp	r3, r7
 8000f02:	460d      	mov	r5, r1
 8000f04:	d9f4      	bls.n	8000ef0 <_printf_i+0x110>
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d10b      	bne.n	8000f22 <_printf_i+0x142>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	07df      	lsls	r7, r3, #31
 8000f0e:	d508      	bpl.n	8000f22 <_printf_i+0x142>
 8000f10:	6923      	ldr	r3, [r4, #16]
 8000f12:	6861      	ldr	r1, [r4, #4]
 8000f14:	4299      	cmp	r1, r3
 8000f16:	bfde      	ittt	le
 8000f18:	2330      	movle	r3, #48	@ 0x30
 8000f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f22:	1b92      	subs	r2, r2, r6
 8000f24:	6122      	str	r2, [r4, #16]
 8000f26:	f8cd a000 	str.w	sl, [sp]
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	aa03      	add	r2, sp, #12
 8000f2e:	4621      	mov	r1, r4
 8000f30:	4640      	mov	r0, r8
 8000f32:	f7ff fee7 	bl	8000d04 <_printf_common>
 8000f36:	3001      	adds	r0, #1
 8000f38:	d14a      	bne.n	8000fd0 <_printf_i+0x1f0>
 8000f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f3e:	b004      	add	sp, #16
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	6023      	str	r3, [r4, #0]
 8000f4c:	4832      	ldr	r0, [pc, #200]	@ (8001018 <_printf_i+0x238>)
 8000f4e:	2778      	movs	r7, #120	@ 0x78
 8000f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	6831      	ldr	r1, [r6, #0]
 8000f58:	061f      	lsls	r7, r3, #24
 8000f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f5e:	d402      	bmi.n	8000f66 <_printf_i+0x186>
 8000f60:	065f      	lsls	r7, r3, #25
 8000f62:	bf48      	it	mi
 8000f64:	b2ad      	uxthmi	r5, r5
 8000f66:	6031      	str	r1, [r6, #0]
 8000f68:	07d9      	lsls	r1, r3, #31
 8000f6a:	bf44      	itt	mi
 8000f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8000f70:	6023      	strmi	r3, [r4, #0]
 8000f72:	b11d      	cbz	r5, 8000f7c <_printf_i+0x19c>
 8000f74:	2310      	movs	r3, #16
 8000f76:	e7ad      	b.n	8000ed4 <_printf_i+0xf4>
 8000f78:	4826      	ldr	r0, [pc, #152]	@ (8001014 <_printf_i+0x234>)
 8000f7a:	e7e9      	b.n	8000f50 <_printf_i+0x170>
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	f023 0320 	bic.w	r3, r3, #32
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	e7f6      	b.n	8000f74 <_printf_i+0x194>
 8000f86:	4616      	mov	r6, r2
 8000f88:	e7bd      	b.n	8000f06 <_printf_i+0x126>
 8000f8a:	6833      	ldr	r3, [r6, #0]
 8000f8c:	6825      	ldr	r5, [r4, #0]
 8000f8e:	6961      	ldr	r1, [r4, #20]
 8000f90:	1d18      	adds	r0, r3, #4
 8000f92:	6030      	str	r0, [r6, #0]
 8000f94:	062e      	lsls	r6, r5, #24
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	d501      	bpl.n	8000f9e <_printf_i+0x1be>
 8000f9a:	6019      	str	r1, [r3, #0]
 8000f9c:	e002      	b.n	8000fa4 <_printf_i+0x1c4>
 8000f9e:	0668      	lsls	r0, r5, #25
 8000fa0:	d5fb      	bpl.n	8000f9a <_printf_i+0x1ba>
 8000fa2:	8019      	strh	r1, [r3, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	6123      	str	r3, [r4, #16]
 8000fa8:	4616      	mov	r6, r2
 8000faa:	e7bc      	b.n	8000f26 <_printf_i+0x146>
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	1d1a      	adds	r2, r3, #4
 8000fb0:	6032      	str	r2, [r6, #0]
 8000fb2:	681e      	ldr	r6, [r3, #0]
 8000fb4:	6862      	ldr	r2, [r4, #4]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff f909 	bl	80001d0 <memchr>
 8000fbe:	b108      	cbz	r0, 8000fc4 <_printf_i+0x1e4>
 8000fc0:	1b80      	subs	r0, r0, r6
 8000fc2:	6060      	str	r0, [r4, #4]
 8000fc4:	6863      	ldr	r3, [r4, #4]
 8000fc6:	6123      	str	r3, [r4, #16]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fce:	e7aa      	b.n	8000f26 <_printf_i+0x146>
 8000fd0:	6923      	ldr	r3, [r4, #16]
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	4649      	mov	r1, r9
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	47d0      	blx	sl
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d0ad      	beq.n	8000f3a <_printf_i+0x15a>
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	079b      	lsls	r3, r3, #30
 8000fe2:	d413      	bmi.n	800100c <_printf_i+0x22c>
 8000fe4:	68e0      	ldr	r0, [r4, #12]
 8000fe6:	9b03      	ldr	r3, [sp, #12]
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	bfb8      	it	lt
 8000fec:	4618      	movlt	r0, r3
 8000fee:	e7a6      	b.n	8000f3e <_printf_i+0x15e>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4632      	mov	r2, r6
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	47d0      	blx	sl
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	d09d      	beq.n	8000f3a <_printf_i+0x15a>
 8000ffe:	3501      	adds	r5, #1
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	9903      	ldr	r1, [sp, #12]
 8001004:	1a5b      	subs	r3, r3, r1
 8001006:	42ab      	cmp	r3, r5
 8001008:	dcf2      	bgt.n	8000ff0 <_printf_i+0x210>
 800100a:	e7eb      	b.n	8000fe4 <_printf_i+0x204>
 800100c:	2500      	movs	r5, #0
 800100e:	f104 0619 	add.w	r6, r4, #25
 8001012:	e7f5      	b.n	8001000 <_printf_i+0x220>
 8001014:	08001141 	.word	0x08001141
 8001018:	08001152 	.word	0x08001152

0800101c <memmove>:
 800101c:	4288      	cmp	r0, r1
 800101e:	b510      	push	{r4, lr}
 8001020:	eb01 0402 	add.w	r4, r1, r2
 8001024:	d902      	bls.n	800102c <memmove+0x10>
 8001026:	4284      	cmp	r4, r0
 8001028:	4623      	mov	r3, r4
 800102a:	d807      	bhi.n	800103c <memmove+0x20>
 800102c:	1e43      	subs	r3, r0, #1
 800102e:	42a1      	cmp	r1, r4
 8001030:	d008      	beq.n	8001044 <memmove+0x28>
 8001032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800103a:	e7f8      	b.n	800102e <memmove+0x12>
 800103c:	4402      	add	r2, r0
 800103e:	4601      	mov	r1, r0
 8001040:	428a      	cmp	r2, r1
 8001042:	d100      	bne.n	8001046 <memmove+0x2a>
 8001044:	bd10      	pop	{r4, pc}
 8001046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800104a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800104e:	e7f7      	b.n	8001040 <memmove+0x24>

08001050 <_sbrk_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d06      	ldr	r5, [pc, #24]	@ (800106c <_sbrk_r+0x1c>)
 8001054:	2300      	movs	r3, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	f7ff f932 	bl	80002c4 <_sbrk>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_sbrk_r+0x1a>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_sbrk_r+0x1a>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200001b4 	.word	0x200001b4

08001070 <memcpy>:
 8001070:	440a      	add	r2, r1
 8001072:	4291      	cmp	r1, r2
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001078:	d100      	bne.n	800107c <memcpy+0xc>
 800107a:	4770      	bx	lr
 800107c:	b510      	push	{r4, lr}
 800107e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001086:	4291      	cmp	r1, r2
 8001088:	d1f9      	bne.n	800107e <memcpy+0xe>
 800108a:	bd10      	pop	{r4, pc}

0800108c <_realloc_r>:
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	4607      	mov	r7, r0
 8001092:	4614      	mov	r4, r2
 8001094:	460d      	mov	r5, r1
 8001096:	b921      	cbnz	r1, 80010a2 <_realloc_r+0x16>
 8001098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	4611      	mov	r1, r2
 800109e:	f7ff bc4d 	b.w	800093c <_malloc_r>
 80010a2:	b92a      	cbnz	r2, 80010b0 <_realloc_r+0x24>
 80010a4:	f7ff fbde 	bl	8000864 <_free_r>
 80010a8:	4625      	mov	r5, r4
 80010aa:	4628      	mov	r0, r5
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010b0:	f000 f81a 	bl	80010e8 <_malloc_usable_size_r>
 80010b4:	4284      	cmp	r4, r0
 80010b6:	4606      	mov	r6, r0
 80010b8:	d802      	bhi.n	80010c0 <_realloc_r+0x34>
 80010ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80010be:	d8f4      	bhi.n	80010aa <_realloc_r+0x1e>
 80010c0:	4621      	mov	r1, r4
 80010c2:	4638      	mov	r0, r7
 80010c4:	f7ff fc3a 	bl	800093c <_malloc_r>
 80010c8:	4680      	mov	r8, r0
 80010ca:	b908      	cbnz	r0, 80010d0 <_realloc_r+0x44>
 80010cc:	4645      	mov	r5, r8
 80010ce:	e7ec      	b.n	80010aa <_realloc_r+0x1e>
 80010d0:	42b4      	cmp	r4, r6
 80010d2:	4622      	mov	r2, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	bf28      	it	cs
 80010d8:	4632      	movcs	r2, r6
 80010da:	f7ff ffc9 	bl	8001070 <memcpy>
 80010de:	4629      	mov	r1, r5
 80010e0:	4638      	mov	r0, r7
 80010e2:	f7ff fbbf 	bl	8000864 <_free_r>
 80010e6:	e7f1      	b.n	80010cc <_realloc_r+0x40>

080010e8 <_malloc_usable_size_r>:
 80010e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010ec:	1f18      	subs	r0, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfbc      	itt	lt
 80010f2:	580b      	ldrlt	r3, [r1, r0]
 80010f4:	18c0      	addlt	r0, r0, r3
 80010f6:	4770      	bx	lr

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
